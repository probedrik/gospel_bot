#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter API
"""
import asyncio
import aiohttp
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_openrouter():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter API"""
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
    api_key = os.getenv("OPENROUTER_API_KEY")
    premium_api_key = os.getenv("OPENROUTER_PREMIUM_API_KEY")
    
    print(f"üîë –û–±—ã—á–Ω—ã–π API –∫–ª—é—á: {api_key[:20]}..." if api_key else "‚ùå –û–±—ã—á–Ω—ã–π API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print(f"üîë –ü—Ä–µ–º–∏—É–º API –∫–ª—é—á: {premium_api_key[:20]}..." if premium_api_key else "‚ùå –ü—Ä–µ–º–∏—É–º API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π API –∫–ª—é—á
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "google/gemini-2.5-flash-lite",
        "messages": [
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç."}
        ],
        "max_tokens": 50
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π API –∫–ª—é—á...")
            async with session.post(url, headers=headers, json=payload) as resp:
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {resp.status}")
                data = await resp.json()
                
                if resp.status == 200:
                    print("‚úÖ –û–±—ã—á–Ω—ã–π API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    if "choices" in data and data["choices"]:
                        response_text = data["choices"][0]["message"]["content"]
                        print(f"üí¨ –û—Ç–≤–µ—Ç: {response_text}")
                    else:
                        print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞")
                        print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {resp.status}")
                    print(f"üìÑ –û—Ç–≤–µ—Ç: {data}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º API –∫–ª—é—á
    if premium_api_key:
        premium_headers = {
            "Authorization": f"Bearer {premium_api_key}",
            "Content-Type": "application/json"
        }
        
        premium_payload = {
            "model": "google/gemini-2.5-flash-lite",
            "messages": [
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –ø—Ä–µ–º–∏—É–º API."}
            ],
            "max_tokens": 50
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º API –∫–ª—é—á...")
                async with session.post(url, headers=premium_headers, json=premium_payload) as resp:
                    print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {resp.status}")
                    data = await resp.json()
                    
                    if resp.status == 200:
                        print("‚úÖ –ü—Ä–µ–º–∏—É–º API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        if "choices" in data and data["choices"]:
                            response_text = data["choices"][0]["message"]["content"]
                            print(f"üí¨ –û—Ç–≤–µ—Ç: {response_text}")
                        else:
                            print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞")
                            print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–º–∏—É–º API: {resp.status}")
                        print(f"üìÑ –û—Ç–≤–µ—Ç: {data}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º API: {e}")

if __name__ == "__main__":
    asyncio.run(test_openrouter())