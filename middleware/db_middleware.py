"""
Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
"""
import logging
import os
from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject
from database.universal_manager import universal_db_manager as db_manager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


class DatabaseMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""

    def __init__(self):
        super().__init__()
        # –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
        self._check_db()

    def _check_db(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π"""
        try:
            # –î–ª—è PostgreSQL –∏ Supabase –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –Ω–µ –Ω—É–∂–Ω–∞ (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            if db_manager.is_postgres:
                logger.info(
                    "üêò –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL, –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                return

            if db_manager.is_supabase:
                logger.info(
                    "‚òÅÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase, –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                return

            # –î–ª—è SQLite –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            db_file = db_manager.db_file
            if db_file is None:
                logger.warning("–§–∞–π–ª –ë–î –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                return

            db_dir = os.path.dirname(db_file)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            dir_exists = os.path.exists(db_dir)
            if not dir_exists:
                logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ë–î –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {db_dir}")
                try:
                    os.makedirs(db_dir, exist_ok=True)
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ë–î: {db_dir}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ë–î: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ë–î
            file_exists = os.path.exists(db_file)
            size = os.path.getsize(db_file) if file_exists else 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É
            access_ok = False
            if file_exists:
                try:
                    with open(db_file, 'a') as f:
                        pass
                    access_ok = True
                except Exception as e:
                    logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –ë–î: {e}")

            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î
            logger.info(
                f"–ë–î {db_file}: {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if file_exists else '–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}, " +
                f"—Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç, –¥–æ—Å—Ç—É–ø: {'–û–ö' if access_ok else '–û–®–ò–ë–ö–ê'}")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if file_exists and access_ok:
                db_manager._create_tables()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}", exc_info=True)

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π.
        –û–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç db_manager –≤ –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.

        Args:
            handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            event: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è Telegram
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        event_type = event.__class__.__name__

        # –î–ª—è Message –∏ CallbackQuery –ª–æ–≥–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = None
        if hasattr(event, 'from_user') and event.from_user:
            user_id = event.from_user.id

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç –ë–î –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è SQLite)
        if not db_manager.is_postgres:
            if not hasattr(db_manager, 'db_file'):
                logger.error(
                    "–û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç db_manager –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ db_file")
            elif db_manager.db_file and not os.path.exists(db_manager.db_file):
                logger.error(
                    f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ë–î –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {db_manager.db_file}")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                try:
                    db_manager._create_tables()
                    logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑–≤–∞–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î")
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        # –î–ª—è PostgreSQL –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –Ω–µ –Ω—É–∂–Ω—ã

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç db –≤ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        data["db"] = db_manager

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω
        if "db" not in data or data["db"] is None:
            logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç –ë–î –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ data")
            # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
            data["db"] = db_manager

        # –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –¥–ª—è –ª—é–±–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞ —Å user_id
        if user_id:
            try:
                username = None
                first_name = None
                if hasattr(event, 'from_user'):
                    username = event.from_user.username
                    first_name = event.from_user.first_name
                await db_manager.add_user(user_id, username or "", first_name or "")
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ë–î: {e}", exc_info=True)
        else:
            logger.debug(
                f"–û–±—ä–µ–∫—Ç db_manager –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_type}")

        # –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Ü–µ–ø–æ—á–∫–µ
        try:
            return await handler(event, data)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ—Å–ª–µ db_middleware: {e}", exc_info=True)
            raise
