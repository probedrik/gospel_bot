#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL.
–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è.
"""
from database.db_manager import DatabaseManager
from database.postgres_manager import PostgreSQLManager
import asyncio
import sqlite3
import csv
import os
import sys
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, '.')


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('migration.log')
    ]
)
logger = logging.getLogger(__name__)


class DataMigrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL"""

    def __init__(self, sqlite_db_path: str = 'data/bible_bot.db',
                 plans_csv_dir: str = 'data/plans_csv_final'):
        self.sqlite_db_path = sqlite_db_path
        self.plans_csv_dir = plans_csv_dir
        self.postgres_manager = PostgreSQLManager()
        self.sqlite_manager = DatabaseManager(sqlite_db_path)

    async def migrate_all(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PostgreSQL
            await self.postgres_manager.initialize()
            logger.info("‚úÖ PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.migrate_users()

            # –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–∫–ª–∞–¥–æ–∫
            await self.migrate_bookmarks()

            # –ú–∏–≥—Ä–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ –ò–ò
            await self.migrate_ai_limits()

            # –ú–∏–≥—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è –∏–∑ CSV
            await self.migrate_reading_plans()

            # –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è
            await self.migrate_reading_progress()

            logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
            raise
        finally:
            await self.postgres_manager.close()

    async def migrate_users(self):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("üì§ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        if not os.path.exists(self.sqlite_db_path):
            logger.warning(f"SQLite –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.sqlite_db_path}")
            return

        conn = sqlite3.connect(self.sqlite_db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        try:
            cursor.execute("SELECT * FROM users")
            users = cursor.fetchall()

            migrated_count = 0
            for user in users:
                await self.postgres_manager.add_user(
                    user_id=user['user_id'],
                    username=user['username'] or '',
                    first_name=user['first_name'] or ''
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç default
                if user['current_translation'] and user['current_translation'] != 'rst':
                    async with self.postgres_manager.pool.acquire() as pg_conn:
                        await pg_conn.execute(
                            "UPDATE users SET current_translation = $1 WHERE user_id = $2",
                            user['current_translation'], user['user_id']
                        )

                migrated_count += 1

            logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {migrated_count}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        finally:
            conn.close()

    async def migrate_bookmarks(self):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∑–∞–∫–ª–∞–¥–∫–∏"""
        logger.info("üì§ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–∫–ª–∞–¥–æ–∫...")

        if not os.path.exists(self.sqlite_db_path):
            logger.warning(f"SQLite –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.sqlite_db_path}")
            return

        conn = sqlite3.connect(self.sqlite_db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        try:
            cursor.execute("SELECT * FROM bookmarks ORDER BY created_at")
            bookmarks = cursor.fetchall()

            migrated_count = 0
            for bookmark in bookmarks:
                await self.postgres_manager.add_bookmark(
                    user_id=bookmark['user_id'],
                    book_id=bookmark['book_id'],
                    chapter=bookmark['chapter'],
                    display_text=bookmark['display_text'] or '',
                    verse_start=None,
                    verse_end=None,
                    note=None
                )
                migrated_count += 1

            logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–∫–ª–∞–¥–æ–∫: {migrated_count}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–∫–ª–∞–¥–æ–∫: {e}")
        finally:
            conn.close()

    async def migrate_ai_limits(self):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ª–∏–º–∏—Ç—ã –ò–ò"""
        logger.info("üì§ –ú–∏–≥—Ä–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ –ò–ò...")

        if not os.path.exists(self.sqlite_db_path):
            logger.warning(f"SQLite –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.sqlite_db_path}")
            return

        conn = sqlite3.connect(self.sqlite_db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        try:
            cursor.execute("SELECT * FROM ai_limits")
            limits = cursor.fetchall()

            migrated_count = 0
            for limit in limits:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
                date_str = limit['date']
                try:
                    date_obj = datetime.strptime(date_str, '%Y-%m-%d').date()
                except:
                    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥—Ä—É–≥–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue

                async with self.postgres_manager.pool.acquire() as pg_conn:
                    await pg_conn.execute('''
                        INSERT INTO ai_limits (user_id, date, count)
                        VALUES ($1, $2, $3)
                        ON CONFLICT (user_id, date) DO UPDATE SET
                            count = EXCLUDED.count
                    ''', limit['user_id'], date_obj, limit['count'])

                migrated_count += 1

            logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ª–∏–º–∏—Ç–æ–≤ –ò–ò: {migrated_count}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –ò–ò: {e}")
        finally:
            conn.close()

    async def migrate_reading_plans(self):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è –∏–∑ CSV —Ñ–∞–π–ª–æ–≤"""
        logger.info("üì§ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è –∏–∑ CSV...")

        if not os.path.exists(self.plans_csv_dir):
            logger.warning(f"–ü–∞–ø–∫–∞ —Å –ø–ª–∞–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.plans_csv_dir}")
            return

        migrated_plans = 0
        total_days = 0

        for filename in os.listdir(self.plans_csv_dir):
            if not filename.endswith('.csv'):
                continue

            plan_path = os.path.join(self.plans_csv_dir, filename)
            plan_id = filename.replace('.csv', '')

            logger.info(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω: {plan_id}")

            try:
                with open(plan_path, 'r', encoding='utf-8') as f:
                    reader = csv.DictReader(f)
                    rows = list(reader)

                    if not rows:
                        continue

                    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–ª–∞–Ω–∞
                    plan_title = rows[0].get('plan_title', plan_id)

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω
                    await self.postgres_manager.add_reading_plan(
                        plan_id=plan_id,
                        title=plan_title,
                        description=f"–ü–ª–∞–Ω —á—Ç–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ {filename}"
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø–ª–∞–Ω–∞
                    day_count = 0
                    for row in rows:
                        if 'day' in row and 'reading' in row:
                            try:
                                day_number = int(row['day'])
                                reading_text = row['reading']

                                await self.postgres_manager.add_reading_plan_day(
                                    plan_id=plan_id,
                                    day_number=day_number,
                                    reading_text=reading_text
                                )
                                day_count += 1
                                total_days += 1

                            except ValueError:
                                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –¥–Ω—è
                                continue

                    logger.info(f"‚úÖ –ü–ª–∞–Ω {plan_id}: {day_count} –¥–Ω–µ–π")
                    migrated_plans += 1

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞–Ω–∞ {filename}: {e}")

        logger.info(
            f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–ª–∞–Ω–æ–≤: {migrated_plans}, –≤—Å–µ–≥–æ –¥–Ω–µ–π: {total_days}")

    async def migrate_reading_progress(self):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è"""
        logger.info("üì§ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è...")

        if not os.path.exists(self.sqlite_db_path):
            logger.warning(f"SQLite –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.sqlite_db_path}")
            return

        conn = sqlite3.connect(self.sqlite_db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        try:
            # –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –¥–Ω—è–º
            cursor.execute("SELECT * FROM reading_progress")
            progress_days = cursor.fetchall()

            migrated_days = 0
            for progress in progress_days:
                if progress['completed']:
                    completed_at = None
                    if progress['completed_at']:
                        try:
                            completed_at = datetime.fromisoformat(
                                progress['completed_at'])
                        except:
                            completed_at = datetime.now()

                    async with self.postgres_manager.pool.acquire() as pg_conn:
                        await pg_conn.execute('''
                            INSERT INTO reading_progress (user_id, plan_id, day_number, completed, completed_at)
                            VALUES ($1, $2, $3, $4, $5)
                            ON CONFLICT (user_id, plan_id, day_number) DO UPDATE SET
                                completed = EXCLUDED.completed,
                                completed_at = EXCLUDED.completed_at
                        ''', progress['user_id'], progress['plan_id'],
                            progress['day'], True, completed_at)

                    migrated_days += 1

            # –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —á–∞—Å—Ç—è–º –¥–Ω—è
            cursor.execute("SELECT * FROM reading_parts_progress")
            progress_parts = cursor.fetchall()

            migrated_parts = 0
            for progress in progress_parts:
                if progress['completed']:
                    completed_at = None
                    if progress['completed_at']:
                        try:
                            completed_at = datetime.fromisoformat(
                                progress['completed_at'])
                        except:
                            completed_at = datetime.now()

                    async with self.postgres_manager.pool.acquire() as pg_conn:
                        await pg_conn.execute('''
                            INSERT INTO reading_parts_progress (user_id, plan_id, day_number, part_idx, completed, completed_at)
                            VALUES ($1, $2, $3, $4, $5, $6)
                            ON CONFLICT (user_id, plan_id, day_number, part_idx) DO UPDATE SET
                                completed = EXCLUDED.completed,
                                completed_at = EXCLUDED.completed_at
                        ''', progress['user_id'], progress['plan_id'],
                            progress['day'], progress['part_idx'], True, completed_at)

                    migrated_parts += 1

            logger.info(
                f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–Ω–µ–π: {migrated_days}, —á–∞—Å—Ç–µ–π: {migrated_parts}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        finally:
            conn.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    import argparse

    parser = argparse.ArgumentParser(
        description='–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL')
    parser.add_argument('--sqlite-db', default='data/bible_bot.db',
                        help='–ü—É—Ç—å –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--plans-csv', default='data/plans_csv_final',
                        help='–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å CSV –ø–ª–∞–Ω–∞–º–∏ —á—Ç–µ–Ω–∏—è')
    parser.add_argument('--postgres-host', default=None,
                        help='–•–æ—Å—Ç PostgreSQL (–∏–ª–∏ POSTGRES_HOST env)')
    parser.add_argument('--postgres-port', type=int, default=None,
                        help='–ü–æ—Ä—Ç PostgreSQL (–∏–ª–∏ POSTGRES_PORT env)')
    parser.add_argument('--postgres-db', default=None,
                        help='–ò–º—è –±–∞–∑—ã PostgreSQL (–∏–ª–∏ POSTGRES_DB env)')
    parser.add_argument('--postgres-user', default=None,
                        help='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å PostgreSQL (–∏–ª–∏ POSTGRES_USER env)')
    parser.add_argument('--postgres-password', default=None,
                        help='–ü–∞—Ä–æ–ª—å PostgreSQL (–∏–ª–∏ POSTGRES_PASSWORD env)')

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    migrator = DataMigrator(
        sqlite_db_path=args.sqlite_db,
        plans_csv_dir=args.plans_csv
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã PostgreSQL –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if args.postgres_host:
        migrator.postgres_manager.host = args.postgres_host
    if args.postgres_port:
        migrator.postgres_manager.port = args.postgres_port
    if args.postgres_db:
        migrator.postgres_manager.database = args.postgres_db
    if args.postgres_user:
        migrator.postgres_manager.user = args.postgres_user
    if args.postgres_password:
        migrator.postgres_manager.password = args.postgres_password

    # –í—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL:")
    logger.info(
        f"   –•–æ—Å—Ç: {migrator.postgres_manager.host}:{migrator.postgres_manager.port}")
    logger.info(f"   –ë–∞–∑–∞: {migrator.postgres_manager.database}")
    logger.info(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {migrator.postgres_manager.user}")

    logger.info(f"üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
    logger.info(f"   SQLite: {args.sqlite_db}")
    logger.info(f"   CSV –ø–ª–∞–Ω—ã: {args.plans_csv}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    confirm = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ")
    if confirm.lower() not in ['y', 'yes', '–¥–∞']:
        logger.info("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    await migrator.migrate_all()


if __name__ == "__main__":
    asyncio.run(main())
