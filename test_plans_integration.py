#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
"""

from utils.reference_parser import parse_reference, parse_multiple_references
from services.reading_plans import reading_plans_service
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


def test_reading_plans():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è...")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞–Ω—ã
    plans = reading_plans_service.get_all_plans()
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–Ω–æ–≤: {len(plans)}")

    for plan in plans:
        print(f"  - {plan.plan_id}: {plan.title} ({plan.total_days} –¥–Ω–µ–π)")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
        day_1 = reading_plans_service.get_plan_day(plan.plan_id, 1)
        if day_1:
            print(f"    –î–µ–Ω—å 1: {day_1}")

            # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏
            references = reading_plans_service.parse_reading_references(day_1)
            print(f"    –°—Å—ã–ª–æ–∫ –≤ –¥–Ω–µ 1: {len(references)}")
            for i, ref in enumerate(references[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"      {i+1}. {ref}")
        print()


def test_reference_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä —Å—Å—ã–ª–æ–∫."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å—Å—ã–ª–æ–∫...")

    test_refs = [
        "–ú—Ñ 1",
        "–ú—Ñ 1:1",
        "–ú—Ñ 1:1-5",
        "–õ–∫ 5:27-39",
        "–ë—ã—Ç 1:1-2:25",
        "–ü—Å 1",
        "–ü–µ—Ä–≤–∞—è –¶–∞—Ä—Å—Ç–≤ 1:1-2:25"
    ]

    for ref in test_refs:
        parsed = parse_reference(ref)
        print(f"  {ref} -> {parsed}")

    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫...")
    multi_ref = "–ú—Ñ 1; –ú—Ñ 2; –õ–∫ 1:1-25"
    parsed_multi = parse_multiple_references(multi_ref)
    print(f"  {multi_ref} -> {len(parsed_multi)} —Å—Å—ã–ª–æ–∫")
    for i, ref in enumerate(parsed_multi):
        print(f"    {i+1}. {ref}")


async def test_database_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    from database.db_manager import db_manager

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_user_id = 12345
    test_book_id = 1  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ú–∞—Ç—Ñ–µ–π
    test_chapter = 1
    test_verse_start = 1
    test_verse_end = 5

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏
        exists_before = await db_manager.is_bookmark_exists_detailed(
            test_user_id, test_book_id, test_chapter, test_verse_start, test_verse_end
        )
        print(f"  –ó–∞–∫–ª–∞–¥–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {exists_before}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª–∞–¥–∫—É
        added = await db_manager.add_bookmark_detailed(
            test_user_id, test_book_id, test_chapter,
            test_verse_start, test_verse_end, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–∫–ª–∞–¥–∫–∞"
        )
        print(f"  –ó–∞–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {added}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        exists_after = await db_manager.is_bookmark_exists_detailed(
            test_user_id, test_book_id, test_chapter, test_verse_start, test_verse_end
        )
        print(f"  –ó–∞–∫–ª–∞–¥–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {exists_after}")

        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–ª–∞–¥–∫—É
        removed = await db_manager.remove_bookmark_detailed(
            test_user_id, test_book_id, test_chapter, test_verse_start, test_verse_end
        )
        print(f"  –ó–∞–∫–ª–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {removed}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        exists_final = await db_manager.is_bookmark_exists_detailed(
            test_user_id, test_book_id, test_chapter, test_verse_start, test_verse_end
        )
        print(f"  –ó–∞–∫–ª–∞–¥–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {exists_final}")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ë–î: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è\n")

    # –¢–µ—Å—Ç –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è
    test_reading_plans()

    # –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Å—Å—ã–ª–æ–∫
    test_reference_parser()

    # –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüîç –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    asyncio.run(test_database_methods())

    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()
