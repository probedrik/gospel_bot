"""
–°–ª—É–∂–±–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∞–º–∏ —á—Ç–µ–Ω–∏—è –ë–∏–±–ª–∏–∏ –∏–∑ Supabase.
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ CSV-–∑–∞–≥—Ä—É–∑–∫–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Supabase.
"""
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class ReadingPlan:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è"""
    plan_id: str
    title: str
    days: List[Tuple[int, str]]  # (–¥–µ–Ω—å, —á—Ç–µ–Ω–∏–µ)
    total_days: int


class SupabaseReadingPlansService:
    """–°–ª—É–∂–±–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∞–º–∏ —á—Ç–µ–Ω–∏—è –∏–∑ Supabase"""

    def __init__(self, db_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª—É–∂–±—É –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è —Å Supabase

        Args:
            db_manager: –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è)
        """
        self.db_manager = db_manager
        self.plans: Dict[str, ReadingPlan] = {}
        self._plans_loaded = False

    async def _load_plans(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø–ª–∞–Ω—ã –∏–∑ Supabase"""
        if not self.db_manager:
            logger.error("–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        if self._plans_loaded:
            return  # –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            plans_data = await self.db_manager.get_reading_plans()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(plans_data)} –ø–ª–∞–Ω–æ–≤ –∏–∑ Supabase")
            logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤: {plans_data}")

            for plan_data in plans_data:
                logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω: {plan_data}")

                plan_id = plan_data.get('plan_id', plan_data.get('id'))
                title = plan_data.get(
                    'title', plan_data.get('name', f'–ü–ª–∞–Ω {plan_id}'))

                logger.info(f"üìã –ü–ª–∞–Ω: ID='{plan_id}', title='{title}'")

                # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –ø–ª–∞–Ω–∞
                days_data = await self.db_manager.get_reading_plan_days(plan_id)
                logger.info(
                    f"üìÖ –ü–æ–ª—É—á–µ–Ω–æ {len(days_data)} –¥–Ω–µ–π –¥–ª—è –ø–ª–∞–Ω–∞ {plan_id}")
                logger.debug(
                    f"–ü–µ—Ä–≤—ã–µ 3 –¥–Ω—è: {days_data[:3] if days_data else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")

                days = []
                for day_data in days_data:
                    logger.debug(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–Ω—å: {day_data}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
                    day_number = day_data.get(
                        'day_number', day_data.get('day'))
                    reading = day_data.get('reading', day_data.get(
                        'reading_text', day_data.get('text', '')))

                    logger.debug(
                        f"   –¥–µ–Ω—å: {day_number}, —á—Ç–µ–Ω–∏–µ: '{reading[:50]}...' (–¥–ª–∏–Ω–∞: {len(reading) if reading else 0})")

                    if day_number and reading:
                        days.append((day_number, reading))
                        logger.debug(f"   ‚úÖ –î–µ–Ω—å {day_number} –¥–æ–±–∞–≤–ª–µ–Ω")
                    else:
                        logger.warning(
                            f"   ‚ùå –î–µ–Ω—å –ø—Ä–æ–ø—É—â–µ–Ω: day_number={day_number}, reading='{reading[:20]}...'")

                logger.info(
                    f"üìä –í—Å–µ–≥–æ –¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –ø–ª–∞–Ω–∞ {plan_id}: {len(days)}")

                if days:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –Ω–æ–º–µ—Ä—É
                    days.sort(key=lambda x: x[0])

                    plan = ReadingPlan(
                        plan_id=plan_id,
                        title=title,
                        days=days,
                        total_days=len(days)
                    )

                    self.plans[plan_id] = plan
                    logger.info(
                        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–ª–∞–Ω –∏–∑ Supabase: {title} ({len(days)} –¥–Ω–µ–π)")
                else:
                    logger.warning(
                        f"‚ö†Ô∏è –ü–ª–∞–Ω {plan_id} –ø—Ä–æ–ø—É—â–µ–Ω - –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–Ω–µ–π")

            self._plans_loaded = True
            logger.info(
                f"üìà –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–ª–∞–Ω–æ–≤ –∏–∑ Supabase: {len(self.plans)}")
            logger.info(f"üìã –ü–ª–∞–Ω—ã –≤ –ø–∞–º—è—Ç–∏: {list(self.plans.keys())}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–æ–≤ –∏–∑ Supabase: {e}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")

    async def get_all_plans(self) -> List[ReadingPlan]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
        await self._load_plans()
        return list(self.plans.values())

    async def get_plan(self, plan_id: str) -> Optional[ReadingPlan]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–∞–Ω –ø–æ ID

        Args:
            plan_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞

        Returns:
            –û–±—ä–µ–∫—Ç ReadingPlan –∏–ª–∏ None –µ—Å–ª–∏ –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        await self._load_plans()
        return self.plans.get(plan_id)

    async def get_plan_day(self, plan_id: str, day: int) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á—Ç–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –ø–ª–∞–Ω–∞

        Args:
            plan_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞
            day: –Ω–æ–º–µ—Ä –¥–Ω—è

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —á—Ç–µ–Ω–∏–µ–º –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        plan = await self.get_plan(plan_id)
        if not plan:
            return None

        for plan_day, reading in plan.days:
            if plan_day == day:
                return reading

        return None

    async def get_next_day(self, plan_id: str, current_day: int) -> Optional[int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –≤ –ø–ª–∞–Ω–µ

        Args:
            plan_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞
            current_day: —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å

        Returns:
            –ù–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –∏–ª–∏ None –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        """
        plan = await self.get_plan(plan_id)
        if not plan:
            return None

        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –≤ —Å–ø–∏—Å–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        for i, (day, _) in enumerate(plan.days):
            if day == current_day and i + 1 < len(plan.days):
                return plan.days[i + 1][0]

        return None

    async def get_previous_day(self, plan_id: str, current_day: int) -> Optional[int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è –≤ –ø–ª–∞–Ω–µ

        Args:
            plan_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞
            current_day: —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å

        Returns:
            –ù–æ–º–µ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è –∏–ª–∏ None –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
        """
        plan = await self.get_plan(plan_id)
        if not plan:
            return None

        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –≤ —Å–ø–∏—Å–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        for i, (day, _) in enumerate(plan.days):
            if day == current_day and i > 0:
                return plan.days[i - 1][0]

        return None

    def parse_reading_references(self, reading: str) -> List[str]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —á—Ç–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫

        Args:
            reading: —Å—Ç—Ä–æ–∫–∞ —á—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ú—Ñ 1; –ú—Ñ 2")

        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
        """
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        references = [ref.strip() for ref in reading.split(';') if ref.strip()]
        return references

    async def reload_plans(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–ª–∞–Ω—ã –∏–∑ Supabase"""
        self._plans_loaded = False
        self.plans.clear()
        await self._load_plans()

    def get_all_plans_sync(self) -> List[dict]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        import asyncio

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.db_manager:
            try:
                from database.universal_manager import universal_db_manager
                self.db_manager = universal_db_manager
                logger.info(
                    "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω universal_db_manager –¥–ª—è Supabase —Å–µ—Ä–≤–∏—Å–∞")
            except ImportError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î: {e}")
                return []

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø–ª–∞–Ω–æ–≤
            if asyncio.get_event_loop().is_running():
                # –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                logger.warning(
                    "–ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
                if not self._plans_loaded:
                    logger.warning(
                        "–ü–ª–∞–Ω—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                    return []
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(self._load_plans())
                finally:
                    loop.close()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–ª–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ dict
            plans_list = []
            for plan in self.plans.values():
                plans_list.append({
                    'plan_id': plan.plan_id,
                    'title': plan.title,
                    'total_days': plan.total_days
                })

            logger.info(
                f"üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(plans_list)} –ø–ª–∞–Ω–æ–≤ –∏–∑ Supabase (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)")
            return plans_list

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –∏–∑ Supabase: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return []

    def get_plan_days_sync(self, plan_id: str) -> List[dict]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–π –ø–ª–∞–Ω–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        plan = self.plans.get(plan_id)
        if not plan:
            return []

        days_list = []
        for day_num, reading_text in plan.days:
            days_list.append({
                'day': day_num,
                'reading_text': reading_text
            })

        return days_list


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–ª—É–∂–±—ã
async def create_supabase_reading_plans_service(db_manager):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª—É–∂–±—É –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è –∏–∑ Supabase

    Args:
        db_manager: –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Returns:
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SupabaseReadingPlansService
    """
    service = SupabaseReadingPlansService(db_manager)
    await service._load_plans()
    return service
