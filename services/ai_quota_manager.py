"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–≤–æ—Ç –ò–ò —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
"""
import asyncio
import logging
from datetime import datetime, timedelta, date
from typing import Optional
from database.universal_manager import universal_db_manager as db_manager
from config.settings import ADMIN_USER_ID

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–≤–æ—Ç
ADMIN_DAILY_LIMIT = 1000  # –õ–∏–º–∏—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
QUOTA_RESET_HOUR = 0  # –ß–∞—Å —Å–±—Ä–æ—Å–∞ –∫–≤–æ—Ç (00:00 UTC)


class AIQuotaManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–≤–æ—Ç –ò–ò"""
    
    def __init__(self):
        self.last_reset_date = None
        self.reset_task = None
    
    async def start_quota_reset_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±—Ä–æ—Å–∞ –∫–≤–æ—Ç"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–≤–æ—Ç –ò–ò")
        self.reset_task = asyncio.create_task(self._quota_reset_loop())
    
    async def stop_quota_reset_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±—Ä–æ—Å–∞ –∫–≤–æ—Ç"""
        if self.reset_task:
            self.reset_task.cancel()
            try:
                await self.reset_task
            except asyncio.CancelledError:
                pass
            logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±—Ä–æ—Å–∞ –∫–≤–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _quota_reset_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–±—Ä–æ—Å–∞ –∫–≤–æ—Ç"""
        while True:
            try:
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞
                now = datetime.utcnow()
                next_reset = self._get_next_reset_time(now)
                sleep_seconds = (next_reset - now).total_seconds()
                
                logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å –∫–≤–æ—Ç: {next_reset.strftime('%Y-%m-%d %H:%M:%S')} UTC")
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {sleep_seconds:.0f} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–±—Ä–æ—Å–∞")
                
                # –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞
                await asyncio.sleep(sleep_seconds)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –∫–≤–æ—Ç
                await self._reset_daily_quotas()
                
            except asyncio.CancelledError:
                logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–≤–æ—Ç –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∫–≤–æ—Ç: {e}")
                # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(3600)
    
    def _get_next_reset_time(self, current_time: datetime) -> datetime:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞ –∫–≤–æ—Ç"""
        # –°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å –≤ QUOTA_RESET_HOUR:00:00
        next_reset = current_time.replace(
            hour=QUOTA_RESET_HOUR, 
            minute=0, 
            second=0, 
            microsecond=0
        )
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if next_reset <= current_time:
            next_reset += timedelta(days=1)
        
        return next_reset
    
    async def _reset_daily_quotas(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –∫–≤–æ—Ç—ã (–æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏)"""
        try:
            today = datetime.utcnow().strftime('%Y-%m-%d')
            yesterday = (datetime.utcnow() - timedelta(days=1)).strftime('%Y-%m-%d')
            
            logger.info(f"üîÑ –°–±—Ä–æ—Å –∫–≤–æ—Ç –ò–ò –Ω–∞ {today}")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            logger.info(f"‚úÖ –ö–≤–æ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ {today}")
            
            self.last_reset_date = today
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–≤–æ—Ç: {e}")
    
    async def get_user_quota_info(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã)"""
        try:
            today_date = datetime.utcnow().date()
            today_str = today_date.strftime('%Y-%m-%d')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            used_today = await db_manager.get_ai_usage(user_id, today_date)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id == ADMIN_USER_ID:
                daily_limit = ADMIN_DAILY_LIMIT
            else:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                from services.ai_settings_manager import ai_settings_manager
                daily_limit = await ai_settings_manager.get_daily_limit()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            remaining = max(0, daily_limit - used_today)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–∞—Ö
            from services.premium_manager import premium_manager
            premium_requests = await premium_manager.get_user_premium_requests(user_id)
            
            # –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞
            now = datetime.utcnow()
            next_reset = self._get_next_reset_time(now)
            hours_until_reset = int((next_reset - now).total_seconds() / 3600)
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            total_available = remaining + premium_requests
            
            return {
                'user_id': user_id,
                'date': today_str,
                'daily_limit': daily_limit,
                'used_today': used_today,
                'remaining': remaining,
                'premium_requests': premium_requests,
                'total_available': total_available,
                'is_admin': user_id == ADMIN_USER_ID,
                'next_reset': next_reset,
                'hours_until_reset': hours_until_reset,
                'can_use_ai': remaining > 0 or premium_requests > 0 or user_id == ADMIN_USER_ID
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–æ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ ai_settings.py –ø—Ä–∏ –æ—à–∏–±–∫–µ
            from config.ai_settings import AI_DAILY_LIMIT
            return {
                'user_id': user_id,
                'date': datetime.utcnow().strftime('%Y-%m-%d'),
                'daily_limit': AI_DAILY_LIMIT,
                'used_today': 0,
                'remaining': AI_DAILY_LIMIT,
                'premium_requests': 0,
                'total_available': AI_DAILY_LIMIT,
                'is_admin': False,
                'next_reset': self._get_next_reset_time(datetime.utcnow()),
                'hours_until_reset': 24,
                'can_use_ai': True,
                'error': str(e)
            }
    
    async def check_and_increment_usage(self, user_id: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–≤–æ—Ç—É –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã)
        
        –õ–æ–≥–∏–∫–∞: –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã, –æ–Ω –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–º–∏—É–º –ò–ò
        
        Returns:
            tuple[bool, str]: (–º–æ–∂–Ω–æ_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —Ç–∏–ø_–∏–∏)
            —Ç–∏–ø_–∏–∏: 'regular' –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ò–ò, 'premium' –¥–ª—è –ø—Ä–µ–º–∏—É–º –ò–ò
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–æ—Ç–µ
            quota_info = await self.get_user_quota_info(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø
            from services.premium_manager import premium_manager
            from services.ai_settings_manager import ai_settings_manager
            
            premium_available = await premium_manager.get_user_premium_requests(user_id)
            free_premium_users = await ai_settings_manager.get_free_premium_users()
            is_free_premium_user = user_id in free_premium_users
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º
            is_admin_premium_mode = False
            if user_id == ADMIN_USER_ID:
                is_admin_premium_mode = await ai_settings_manager.get_admin_premium_mode()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∏–ª–∏ –∞–¥–º–∏–Ω –≤ –ø—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–º–∏—É–º –ò–ò
            if premium_available > 0 or is_free_premium_user or is_admin_premium_mode:
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã, –Ω–æ —Å –ø—Ä–µ–º–∏—É–º –ò–ò
                if quota_info['can_use_ai']:
                    await db_manager.increment_ai_usage(user_id)
                    user_type = "–∞–¥–º–∏–Ω" if user_id == ADMIN_USER_ID else ("–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–µ–º–∏—É–º" if is_free_premium_user else "–ø—Ä–µ–º–∏—É–º")
                    logger.info(f"‚úÖ {user_type.capitalize()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å –ø—Ä–µ–º–∏—É–º –ò–ò {user_id}. "
                               f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {quota_info['used_today'] + 1}/{quota_info['daily_limit']}")
                    return True, 'premium'
                else:
                    # –ï—Å–ª–∏ –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã
                    if premium_available > 0:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
                        success = await premium_manager.use_premium_request(user_id)
                        if success:
                            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. "
                                       f"–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–º–∏—É–º: {premium_available - 1}")
                            return True, 'premium'
                    elif is_free_premium_user or is_admin_premium_mode:
                        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∞–¥–º–∏–Ω –≤ –ø—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º–µ –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
                        logger.warning(f"‚ö†Ô∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å—á–µ—Ä–ø–∞–ª –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã")
                        return False, 'none'
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
            elif quota_info['can_use_ai']:
                await db_manager.increment_ai_usage(user_id)
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–±—ã—á–Ω—ã–π –ò–ò –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. "
                           f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {quota_info['used_today'] + 1}/{quota_info['daily_limit']}")
                return True, 'regular'
            
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å—á–µ—Ä–ø–∞–ª –≤—Å–µ –ª–∏–º–∏—Ç—ã –ò–ò")
            return False, 'none'
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–æ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False, 'none'
    
    async def get_quota_stats(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–≤–æ—Ç–∞–º"""
        try:
            today = datetime.utcnow().strftime('%Y-%m-%d')
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            
            return {
                'date': today,
                'default_limit': DEFAULT_DAILY_LIMIT,
                'admin_limit': ADMIN_DAILY_LIMIT,
                'reset_hour': QUOTA_RESET_HOUR,
                'last_reset': self.last_reset_date,
                'scheduler_running': self.reset_task is not None and not self.reset_task.done()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–≤–æ—Ç: {e}")
            return {
                'error': str(e)
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–≤–æ—Ç
ai_quota_manager = AIQuotaManager()