"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∞–º–∏ —á—Ç–µ–Ω–∏—è –ë–∏–±–ª–∏–∏.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (CSV –∏–ª–∏ Supabase).
"""
import csv
import os
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class ReadingPlan:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è"""
    plan_id: str
    title: str
    days: List[Tuple[int, str]]  # (–¥–µ–Ω—å, —á—Ç–µ–Ω–∏–µ)
    total_days: int


class UniversalReadingPlansService:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∞–º–∏ —á—Ç–µ–Ω–∏—è"""

    def __init__(self, plans_directory: str = "data/plans_csv_final"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª—É–∂–±—É –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è

        Args:
            plans_directory: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å CSV —Ñ–∞–π–ª–∞–º–∏ –ø–ª–∞–Ω–æ–≤
        """
        self.plans_directory = plans_directory
        self.plans: Dict[str, ReadingPlan] = {}
        self.supabase_service = None
        self.db_manager = None
        self._load_plans()

    def _load_plans(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–ª–∞–Ω—ã –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase –ø–ª–∞–Ω–æ–≤
        config_file = "data/supabase_plans.conf"
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if "USE_SUPABASE_PLANS=true" in content:
                        logger.info(
                            "üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Supabase –ø–ª–∞–Ω—ã")
                        if self._load_from_supabase():
                            logger.info("‚úÖ –ü–ª–∞–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Supabase")
                            return
                        else:
                            logger.warning(
                                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Supabase, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ CSV
        if self._load_from_csv():
            logger.info("‚úÖ –ü–ª–∞–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ CSV —Ñ–∞–π–ª–æ–≤")
            return

        # –ï—Å–ª–∏ CSV –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_dir = "data/plans_csv_backup"
        if os.path.exists(backup_dir):
            logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_dir}")
            if self._load_from_csv_directory(backup_dir):
                logger.info("‚úÖ –ü–ª–∞–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                return

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø—ã—Ç–∞–µ–º—Å—è Supabase
        if self._load_from_supabase():
            logger.info("‚úÖ –ü–ª–∞–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Supabase (fallback)")
            return

        # –ï—Å–ª–∏ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã-–∑–∞–≥–ª—É—à–∫–∏
        logger.warning("‚ö†Ô∏è –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–ª–∞–Ω–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏")
        self._create_fallback_plans()

    def _load_from_csv(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–ª–∞–Ω—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π CSV –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        if not os.path.exists(self.plans_directory):
            logger.error(f"–ü–∞–ø–∫–∞ —Å –ø–ª–∞–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.plans_directory}")
            return False

        return self._load_from_csv_directory(self.plans_directory)

    def _load_from_csv_directory(self, directory: str) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–ª–∞–Ω—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π CSV –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        plans_loaded = 0

        for filename in os.listdir(directory):
            if filename.endswith('.csv'):
                plan_path = os.path.join(directory, filename)
                try:
                    plan = self._load_plan_from_csv(plan_path, filename)
                    if plan:
                        self.plans[plan.plan_id] = plan
                        logger.info(
                            f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø–ª–∞–Ω: {plan.title} ({plan.total_days} –¥–Ω–µ–π)")
                        plans_loaded += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞ {filename}: {e}")

        return plans_loaded > 0

    def _load_plan_from_csv(self, file_path: str, filename: str) -> Optional[ReadingPlan]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–ª–∞–Ω —á—Ç–µ–Ω–∏—è –∏–∑ CSV —Ñ–∞–π–ª–∞

        Args:
            file_path: –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
            filename: –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ID

        Returns:
            –û–±—ä–µ–∫—Ç ReadingPlan –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                lines = file.readlines()

                if len(lines) < 3:  # –ú–∏–Ω–∏–º—É–º: –Ω–∞–∑–≤–∞–Ω–∏–µ, –∑–∞–≥–æ–ª–æ–≤–∫–∏, –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    logger.warning(
                        f"–§–∞–π–ª {filename} —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å—Ç—Ä–æ–∫")
                    return None

                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: plan_title,–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
                first_line = lines[0].strip()
                if ',' in first_line:
                    plan_title = first_line.split(',', 1)[1].strip()
                else:
                    plan_title = filename.replace('.csv', '')

                # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –ø–ª–∞–Ω–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ ID)
                if '–ï–≤–∞–Ω–≥–µ–ª–∏–µ' in filename:
                    plan_id = 'plan1'  # gospel_daily
                elif '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π' in filename:
                    plan_id = 'plan2'  # classic_year
                elif '–í–ó-–∏-–ù–ó' in filename or '–í–ó_–∏_–ù–ó' in filename:
                    plan_id = 'plan3'  # ot_nt_plan
                else:
                    # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
                    plan_id = filename.replace('.csv', '').replace(
                        ' ', '_').replace('-', '_')[:20]

                # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: day,reading
                headers_line = lines[1].strip()
                if not headers_line.startswith('day,reading'):
                    logger.warning(
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ {filename}: {headers_line}")

                days = []

                # –ß–∏—Ç–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
                for i, line in enumerate(lines[2:], start=3):
                    line = line.strip()
                    if not line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        continue

                    if ',' in line:
                        parts = line.split(',', 1)
                        if len(parts) == 2:
                            try:
                                day = int(parts[0].strip())
                                reading = parts[1].strip()
                                if reading:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º —á—Ç–µ–Ω–∏–µ–º
                                    days.append((day, reading))
                            except ValueError as e:
                                logger.warning(
                                    f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è –≤ —Å—Ç—Ä–æ–∫–µ {i} —Ñ–∞–π–ª–∞ {filename}: {parts[0]}")

                if not days:
                    logger.warning(
                        f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–Ω–µ–π —á—Ç–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ {filename}")
                    return None

                logger.info(
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø–ª–∞–Ω '{plan_title}' —Å {len(days)} –¥–Ω—è–º–∏ –∏–∑ —Ñ–∞–π–ª–∞ {filename}")

                return ReadingPlan(
                    plan_id=plan_id,
                    title=plan_title,
                    days=days,
                    total_days=len(days)
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None

    def _create_fallback_plans(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã-–∑–∞–≥–ª—É—à–∫–∏ –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"""
        fallback_plans = [
            {
                'plan_id': 'plan1',
                'title': 'üìñ –ï–≤–∞–Ω–≥–µ–ª–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)',
                'days': [(1, "–ú—Ñ 1"), (2, "–ú—Ñ 2")]  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            },
            {
                'plan_id': 'plan2',
                'title': 'üìö –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω –∑–∞ 1 –≥–æ–¥ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)',
                'days': [(1, "–ë—ã—Ç 1; –ú—Ñ 1"), (2, "–ë—ã—Ç 2; –ú—Ñ 2")]
            },
            {
                'plan_id': 'plan3',
                'title': 'üìú –ü–ª–∞–Ω –í–ó –∏ –ù–ó (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)',
                'days': [(1, "–ë—ã—Ç 1; –ú—Ñ 1"), (2, "–ë—ã—Ç 2; –ú—Ñ 2")]
            }
        ]

        for plan_data in fallback_plans:
            plan = ReadingPlan(
                plan_id=plan_data['plan_id'],
                title=plan_data['title'],
                days=plan_data['days'],
                total_days=len(plan_data['days'])
            )
            self.plans[plan.plan_id] = plan
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω-–∑–∞–≥–ª—É—à–∫–∞: {plan.title}")

    def get_all_plans(self) -> List[ReadingPlan]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
        return list(self.plans.values())

    def get_plan(self, plan_id: str) -> Optional[ReadingPlan]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–∞–Ω –ø–æ ID

        Args:
            plan_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞

        Returns:
            –û–±—ä–µ–∫—Ç ReadingPlan –∏–ª–∏ None –µ—Å–ª–∏ –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        return self.plans.get(plan_id)

    def get_plan_day(self, plan_id: str, day: int) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á—Ç–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –ø–ª–∞–Ω–∞

        Args:
            plan_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞
            day: –Ω–æ–º–µ—Ä –¥–Ω—è

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —á—Ç–µ–Ω–∏–µ–º –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        plan = self.get_plan(plan_id)
        if not plan:
            return None

        for plan_day, reading in plan.days:
            if plan_day == day:
                return reading

        return None

    def get_next_day(self, plan_id: str, current_day: int) -> Optional[int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –≤ –ø–ª–∞–Ω–µ

        Args:
            plan_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞
            current_day: —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å

        Returns:
            –ù–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –∏–ª–∏ None –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        """
        plan = self.get_plan(plan_id)
        if not plan:
            return None

        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –≤ —Å–ø–∏—Å–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        for i, (day, _) in enumerate(plan.days):
            if day == current_day and i + 1 < len(plan.days):
                return plan.days[i + 1][0]

        return None

    def get_previous_day(self, plan_id: str, current_day: int) -> Optional[int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è –≤ –ø–ª–∞–Ω–µ

        Args:
            plan_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞
            current_day: —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å

        Returns:
            –ù–æ–º–µ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è –∏–ª–∏ None –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
        """
        plan = self.get_plan(plan_id)
        if not plan:
            return None

        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –≤ —Å–ø–∏—Å–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        for i, (day, _) in enumerate(plan.days):
            if day == current_day and i > 0:
                return plan.days[i - 1][0]

        return None

    def parse_reading_references(self, reading: str) -> List[str]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —á—Ç–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫

        Args:
            reading: —Å—Ç—Ä–æ–∫–∞ —á—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ú—Ñ 1; –ú—Ñ 2")

        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
        """
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        references = [ref.strip() for ref in reading.split(';') if ref.strip()]
        return references

    def _load_from_supabase(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–ª–∞–Ω—ã –∏–∑ Supabase"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.supabase_service:
                try:
                    from services.supabase_reading_plans import SupabaseReadingPlansService
                    self.supabase_service = SupabaseReadingPlansService()
                except ImportError as e:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Supabase —Å–µ—Ä–≤–∏—Å: {e}")
                    return False

            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –∏–∑ Supabase
            supabase_plans = self.supabase_service.get_all_plans_sync()
            if not supabase_plans:
                logger.warning("–ü–ª–∞–Ω—ã –∏–∑ Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç ReadingPlan
            plans_loaded = 0
            for plan_data in supabase_plans:
                try:
                    plan = self._convert_supabase_plan(plan_data)
                    if plan:
                        self.plans[plan.plan_id] = plan
                        logger.info(
                            f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø–ª–∞–Ω –∏–∑ Supabase: {plan.title} ({plan.total_days} –¥–Ω–µ–π)")
                        plans_loaded += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –∏–∑ Supabase: {e}")

            return plans_loaded > 0

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤ –∏–∑ Supabase: {e}")
            return False

    def _convert_supabase_plan(self, plan_data: dict) -> Optional[ReadingPlan]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –∏–∑ Supabase –≤ ReadingPlan"""
        try:
            plan_id = plan_data.get('plan_id')
            title = plan_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω')
            total_days = plan_data.get('total_days', 0)

            # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –ø–ª–∞–Ω–∞
            days_data = self.supabase_service.get_plan_days_sync(plan_id)
            days = []

            for day_data in days_data:
                day_num = day_data.get('day')
                reading_text = day_data.get('reading_text', '')
                if day_num and reading_text:
                    days.append((day_num, reading_text))

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
            days.sort(key=lambda x: x[0])

            return ReadingPlan(
                plan_id=plan_id,
                title=title,
                days=days,
                total_days=len(days)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ {plan_data}: {e}")
            return None

    def _init_db_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        if not self.db_manager:
            try:
                from database.universal_manager import universal_db_manager
                self.db_manager = universal_db_manager
            except ImportError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î: {e}")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–ª—É–∂–±—ã
universal_reading_plans_service = UniversalReadingPlansService()
