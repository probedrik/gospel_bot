"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É SQLite –∏ PostgreSQL –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""
import logging
import os
from typing import Optional, Union

from .db_manager import DatabaseManager
from .postgres_manager import PostgreSQLManager

logger = logging.getLogger(__name__)


class UniversalDatabaseManager:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self):
        self.manager: Optional[Union[DatabaseManager,
                                     PostgreSQLManager]] = None
        self.is_postgres = False
        self._initialize()

    def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è USE_POSTGRES
        use_postgres = os.getenv('USE_POSTGRES', 'false').lower() in [
            'true', '1', 'yes']

        if use_postgres:
            logger.info("üêò –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            self.manager = PostgreSQLManager()
            self.is_postgres = True
        else:
            logger.info("üóÉÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            self.manager = DatabaseManager()
            self.is_postgres = False

    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if self.is_postgres:
            await self.manager.initialize()
        # SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.is_postgres and hasattr(self.manager, 'close'):
            await self.manager.close()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    async def get_user(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return await self.manager.get_user(user_id)

    async def add_user(self, user_id: int, username: str, first_name: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        return await self.manager.add_user(user_id, username, first_name)

    async def update_user_translation(self, user_id: int, translation: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.manager.update_user_translation(user_id, translation)

    async def update_user_activity(self, user_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.manager.update_user_activity(user_id)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–ª–∞–¥–∫–∞–º–∏
    async def get_bookmarks(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–ª–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.manager.get_bookmarks(user_id)

    async def add_bookmark(self, user_id: int, book_id: int, chapter: int, display_text: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–∫–ª–∞–¥–∫—É"""
        if self.is_postgres:
            return await self.manager.add_bookmark(
                user_id=user_id,
                book_id=book_id,
                chapter=chapter,
                display_text=display_text,
                verse_start=None,
                verse_end=None,
                note=None
            )
        else:
            return await self.manager.add_bookmark(user_id, book_id, chapter, display_text)

    async def remove_bookmark(self, user_id: int, book_id: int, chapter: int):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–∫–ª–∞–¥–∫—É"""
        return await self.manager.remove_bookmark(user_id, book_id, chapter)

    async def is_bookmarked(self, user_id: int, book_id: int, chapter: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–ª–∞–¥–∫–∞"""
        return await self.manager.is_bookmarked(user_id, book_id, chapter)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–º–∏—Ç–∞–º–∏ –ò–ò
    async def increment_ai_usage(self, user_id: int):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò"""
        return await self.manager.increment_ai_usage(user_id)

    async def get_ai_usage(self, user_id: int, date=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ò–ò"""
        return await self.manager.get_ai_usage(user_id, date)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —á—Ç–µ–Ω–∏—è
    async def mark_reading_day_completed(self, user_id: int, plan_id: str, day: int):
        """–û—Ç–º–µ—á–∞–µ—Ç –¥–µ–Ω—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π"""
        return await self.manager.mark_reading_day_completed(user_id, plan_id, day)

    async def mark_reading_part_completed(self, user_id: int, plan_id: str, day: int, part_idx: int):
        """–û—Ç–º–µ—á–∞–µ—Ç —á–∞—Å—Ç—å –¥–Ω—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é"""
        return await self.manager.mark_reading_part_completed(user_id, plan_id, day, part_idx)

    async def get_reading_progress(self, user_id: int, plan_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è –ø–æ –ø–ª–∞–Ω—É"""
        return await self.manager.get_reading_progress(user_id, plan_id)

    async def get_reading_part_progress(self, user_id: int, plan_id: str, day: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á–∞—Å—Ç–µ–π –¥–Ω—è"""
        return await self.manager.get_reading_part_progress(user_id, plan_id, day)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∞–º–∏ —á—Ç–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è PostgreSQL)
    async def get_reading_plans(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ PostgreSQL)"""
        if self.is_postgres:
            return await self.manager.get_reading_plans()
        else:
            # –î–ª—è SQLite –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –ø–ª–∞–Ω—ã –±—É–¥—É—Ç –∏–∑ CSV
            return []

    async def get_reading_plan_days(self, plan_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–Ω–∏ –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ PostgreSQL)"""
        if self.is_postgres:
            return await self.manager.get_reading_plan_days(plan_id)
        else:
            # –î–ª—è SQLite –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –ø–ª–∞–Ω—ã –±—É–¥—É—Ç –∏–∑ CSV
            return []

    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API SQLite
    def _create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è SQLite)"""
        if not self.is_postgres:
            return self.manager._create_tables()

    @property
    def db_file(self):
        """–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è SQLite)"""
        if not self.is_postgres:
            return self.manager.db_file
        return None


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
universal_db_manager = UniversalDatabaseManager()
