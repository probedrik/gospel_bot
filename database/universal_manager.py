"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É SQLite –∏ PostgreSQL –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""
import logging
import os
from typing import Optional, Union, List, Dict

from .db_manager import DatabaseManager
from .postgres_manager import PostgreSQLManager
from .supabase_manager import SupabaseManager

logger = logging.getLogger(__name__)


class UniversalDatabaseManager:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self):
        self.manager: Optional[Union[DatabaseManager,
                                     PostgreSQLManager,
                                     SupabaseManager]] = None
        self.is_postgres = False
        self.is_supabase = False
        self._initialize()

    def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è USE_SUPABASE
        use_supabase = os.getenv('USE_SUPABASE', 'false').lower() in [
            'true', '1', 'yes']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è USE_POSTGRES
        use_postgres = os.getenv('USE_POSTGRES', 'false').lower() in [
            'true', '1', 'yes']

        if use_supabase:
            logger.info("‚òÅÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            self.manager = SupabaseManager()
            self.is_supabase = True
            self.is_postgres = False  # Supabase –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PostgreSQL, –Ω–æ —á–µ—Ä–µ–∑ API
        elif use_postgres:
            logger.info("üêò –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            self.manager = PostgreSQLManager()
            self.is_postgres = True
            self.is_supabase = False
        else:
            logger.info("üóÉÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            self.manager = DatabaseManager()
            self.is_postgres = False
            self.is_supabase = False

    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if self.is_postgres or self.is_supabase:
            await self.manager.initialize()
        # SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ai_settings
        await self.create_ai_settings_table()

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if (self.is_postgres or self.is_supabase) and hasattr(self.manager, 'close'):
            await self.manager.close()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    async def get_user(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return await self.manager.get_user(user_id)

    async def add_user(self, user_id: int, username: str, first_name: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        return await self.manager.add_user(user_id, username, first_name)

    async def update_user_translation(self, user_id: int, translation: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.manager.update_user_translation(user_id, translation)

    async def update_user_activity(self, user_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.manager.update_user_activity(user_id)

    async def update_user_response_length(self, user_id: int, response_length: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.manager.update_user_response_length(user_id, response_length)

    async def get_user_response_length(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.manager.get_user_response_length(user_id)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–ª–∞–¥–∫–∞–º–∏
    async def get_bookmarks(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–ª–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.manager.get_bookmarks(user_id)

    async def add_bookmark(self, user_id: int, book_id: int, chapter_start: int,
                           display_text: str, chapter_end: int = None,
                           verse_start: int = None, verse_end: int = None, note: str = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–∫–ª–∞–¥–∫—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –≥–ª–∞–≤ –∏ —Å—Ç–∏—Ö–æ–≤"""
        if self.is_postgres or self.is_supabase:
            return await self.manager.add_bookmark(
                user_id=user_id,
                book_id=book_id,
                chapter_start=chapter_start,
                chapter_end=chapter_end,
                display_text=display_text,
                verse_start=verse_start,
                verse_end=verse_end,
                note=note
            )
        else:
            return await self.manager.add_bookmark(
                user_id, book_id, chapter_start, chapter_end,
                verse_start, verse_end, display_text, note
            )

    async def remove_bookmark(self, user_id: int, book_id: int, chapter_start: int,
                              chapter_end: int = None, verse_start: int = None, verse_end: int = None):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–∫–ª–∞–¥–∫—É"""
        return await self.manager.remove_bookmark(user_id, book_id, chapter_start, chapter_end, verse_start, verse_end)

    async def is_bookmarked(self, user_id: int, book_id: int, chapter_start: int,
                            chapter_end: int = None, verse_start: int = None, verse_end: int = None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–ª–∞–¥–∫–∞"""
        return await self.manager.is_bookmarked(user_id, book_id, chapter_start, chapter_end, verse_start, verse_end)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–º–∏—Ç–∞–º–∏ –ò–ò
    async def increment_ai_usage(self, user_id: int):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò"""
        return await self.manager.increment_ai_usage(user_id)

    async def get_ai_usage(self, user_id: int, date=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ò–ò"""
        return await self.manager.get_ai_usage(user_id, date)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —á—Ç–µ–Ω–∏—è
    async def mark_reading_day_completed(self, user_id: int, plan_id: str, day: int):
        """–û—Ç–º–µ—á–∞–µ—Ç –¥–µ–Ω—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π"""
        return await self.manager.mark_reading_day_completed(user_id, plan_id, day)

    async def mark_reading_part_completed(self, user_id: int, plan_id: str, day: int, part_idx: int):
        """–û—Ç–º–µ—á–∞–µ—Ç —á–∞—Å—Ç—å –¥–Ω—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é"""
        return await self.manager.mark_reading_part_completed(user_id, plan_id, day, part_idx)

    async def get_reading_progress(self, user_id: int, plan_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è –ø–æ –ø–ª–∞–Ω—É"""
        return await self.manager.get_reading_progress(user_id, plan_id)

    async def get_reading_part_progress(self, user_id: int, plan_id: str, day: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á–∞—Å—Ç–µ–π –¥–Ω—è"""
        return await self.manager.get_reading_part_progress(user_id, plan_id, day)

    async def is_reading_day_completed(self, user_id: int, plan_id: str, day: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –¥–µ–Ω—å –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è"""
        return await self.manager.is_reading_day_completed(user_id, plan_id, day)

    async def is_reading_part_completed(self, user_id: int, plan_id: str, day: int, part_idx: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–º–µ—á–µ–Ω–∞ –ª–∏ —á–∞—Å—Ç—å –¥–Ω—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è"""
        return await self.manager.is_reading_part_completed(user_id, plan_id, day, part_idx)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å handlers
    async def get_user_reading_plan(self, user_id: int, plan_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–Ω —á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.manager.get_user_reading_plan(user_id, plan_id)

    async def set_user_reading_plan(self, user_id: int, plan_id: str, day: int = 1):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω —á—Ç–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.manager.set_user_reading_plan(user_id, plan_id, day)

    async def get_user_reading_plans(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.manager.get_user_reading_plans(user_id)

    async def update_reading_plan_day(self, user_id: int, plan_id: str, day: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è"""
        return await self.manager.update_reading_plan_day(user_id, plan_id, day)

    async def is_bookmark_exists(self, user_id: int, reference: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ"""
        return await self.manager.is_bookmark_exists(user_id, reference)

    # –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def get_reading_progress_async(self, user_id: int, plan_id: str):
        """–ê–ª–∏–∞—Å –¥–ª—è get_reading_progress"""
        return await self.get_reading_progress(user_id, plan_id)

    async def is_reading_day_completed_async(self, user_id: int, plan_id: str, day: int):
        """–ê–ª–∏–∞—Å –¥–ª—è is_reading_day_completed"""
        return await self.is_reading_day_completed(user_id, plan_id, day)

    async def mark_reading_day_completed_async(self, user_id: int, plan_id: str, day: int):
        """–ê–ª–∏–∞—Å –¥–ª—è mark_reading_day_completed"""
        return await self.mark_reading_day_completed(user_id, plan_id, day)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∞–º–∏ —á—Ç–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è PostgreSQL)
    async def get_reading_plans(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ PostgreSQL/Supabase)"""
        if self.is_postgres or self.is_supabase:
            return await self.manager.get_reading_plans()
        else:
            # –î–ª—è SQLite –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –ø–ª–∞–Ω—ã –±—É–¥—É—Ç –∏–∑ CSV
            return []

    async def get_reading_plan_days(self, plan_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–Ω–∏ –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ PostgreSQL/Supabase)"""
        if self.is_postgres or self.is_supabase:
            return await self.manager.get_reading_plan_days(plan_id)
        else:
            # –î–ª—è SQLite –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –ø–ª–∞–Ω—ã –±—É–¥—É—Ç –∏–∑ CSV
            return []

    async def get_reading_plan_by_id(self, plan_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–Ω —á—Ç–µ–Ω–∏—è –ø–æ ID (—Ç–æ–ª—å–∫–æ PostgreSQL/Supabase)"""
        if self.is_postgres or self.is_supabase:
            return await self.manager.get_reading_plan_by_id(plan_id)
        else:
            return None

    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API SQLite
    def _create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è SQLite)"""
        if not self.is_postgres and not self.is_supabase:
            return self.manager._create_tables()

    @property
    def db_file(self):
        """–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è SQLite)"""
        if not self.is_postgres and not self.is_supabase:
            return self.manager.db_file
        return None

    # AI Limits –º–µ—Ç–æ–¥—ã
    async def get_ai_limit(self, user_id: int, date: str) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –¥–∞—Ç—É (—Å—Ç—Ä–æ–∫–∞ YYYY-MM-DD)"""
        return await self.manager.get_ai_limit(user_id, date)

    async def increment_ai_limit(self, user_id: int, date: str) -> int:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –¥–∞—Ç—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        return await self.manager.increment_ai_limit(user_id, date)

    async def reset_ai_limit(self, user_id: int, date: str) -> None:
        """–°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –¥–∞—Ç—É (–æ–±–Ω—É–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫)"""
        return await self.manager.reset_ai_limit(user_id, date)

    async def get_ai_stats(self, date: str, limit: int = 10) -> list:
        """–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ò–ò-–∑–∞–ø—Ä–æ—Å–∞–º –∑–∞ –¥–∞—Ç—É (user_id, count)"""
        return await self.manager.get_ai_stats(date, limit)

    async def get_ai_stats_alltime(self, limit: int = 10) -> list:
        """–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ò–ò-–∑–∞–ø—Ä–æ—Å–∞–º –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è (user_id, total_count)"""
        return await self.manager.get_ai_stats_alltime(limit)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π
    async def save_commentary(self, user_id: int, book_id: int, chapter_start: int,
                              chapter_end: int = None, verse_start: int = None, verse_end: int = None,
                              reference_text: str = "", commentary_text: str = "",
                              commentary_type: str = "ai") -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.manager.save_commentary(
            user_id, book_id, chapter_start, chapter_end, verse_start, verse_end,
            reference_text, commentary_text, commentary_type)

    async def get_saved_commentary(self, user_id: int, book_id: int, chapter_start: int,
                                   chapter_end: int = None, verse_start: int = None, verse_end: int = None,
                                   commentary_type: str = "ai") -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ"""
        return await self.manager.get_saved_commentary(
            user_id, book_id, chapter_start, chapter_end, verse_start, verse_end, commentary_type)

    async def delete_saved_commentary(self, user_id: int, book_id: int = None, chapter_start: int = None,
                                      chapter_end: int = None, verse_start: int = None, verse_end: int = None,
                                      commentary_type: str = "ai", commentary_id: int = None) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏–ª–∏ ID"""
        if commentary_id is not None:
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ ID (–¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–ª–∞–¥–æ–∫)
            if hasattr(self.manager, 'delete_commentary_by_id'):
                return await self.manager.delete_commentary_by_id(user_id, commentary_id)
            else:
                # Fallback: –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π
                commentaries = await self.get_user_commentaries(user_id)
                for i, commentary in enumerate(commentaries):
                    if commentary.get('id') == commentary_id:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        return await self.manager.delete_saved_commentary(
                            user_id,
                            commentary.get('book_id'),
                            commentary.get('chapter_start'),
                            commentary.get('chapter_end'),
                            commentary.get('verse_start'),
                            commentary.get('verse_end'),
                            commentary.get('commentary_type', 'ai')
                        )
                return False
        else:
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
            return await self.manager.delete_saved_commentary(
                user_id, book_id, chapter_start, chapter_end, verse_start, verse_end, commentary_type)

    async def get_user_commentaries(self, user_id: int, limit: int = 50) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.manager.get_user_commentaries(user_id, limit)

    async def get_saved_commentaries(self, user_id: int, limit: int = 50) -> list:
        """–ê–ª–∏–∞—Å –¥–ª—è get_user_commentaries –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return await self.get_user_commentaries(user_id, limit)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –±–∏–±–ª–µ–π—Å–∫–∏—Ö —Ç–µ–º
    async def get_bible_topics(self, search_query: str = "", limit: int = 50) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∏–±–ª–µ–π—Å–∫–∏—Ö —Ç–µ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞"""
        return await self.manager.get_bible_topics(search_query, limit)

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async def fetch_one(self, query: str, params: tuple = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å"""
        try:
            if self.is_postgres or self.is_supabase:
                # –î–ª—è PostgreSQL/Supabase –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncpg
                if hasattr(self.manager, 'pool') and self.manager.pool:
                    async with self.manager.pool.acquire() as conn:
                        row = await conn.fetchrow(query, *(params or ()))
                        return dict(row) if row else None
                else:
                    logger.error("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return None
            else:
                # –î–ª—è SQLite –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                import sqlite3
                import asyncio

                def _sync_fetch_one():
                    conn = sqlite3.connect(self.manager.db_file)
                    conn.row_factory = sqlite3.Row
                    cursor = conn.cursor()
                    cursor.execute(query, params or ())
                    row = cursor.fetchone()
                    conn.close()
                    return dict(row) if row else None

                return await asyncio.get_event_loop().run_in_executor(None, _sync_fetch_one)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fetch_one: {e}")
            return None

    async def fetch_all(self, query: str, params: tuple = None) -> List[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏"""
        try:
            if self.is_postgres or self.is_supabase:
                # –î–ª—è PostgreSQL/Supabase –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncpg
                if hasattr(self.manager, 'pool') and self.manager.pool:
                    async with self.manager.pool.acquire() as conn:
                        rows = await conn.fetch(query, *(params or ()))
                        return [dict(row) for row in rows]
                else:
                    logger.error("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return []
            else:
                # –î–ª—è SQLite –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                import sqlite3
                import asyncio

                def _sync_fetch_all():
                    conn = sqlite3.connect(self.manager.db_file)
                    conn.row_factory = sqlite3.Row
                    cursor = conn.cursor()
                    cursor.execute(query, params or ())
                    rows = cursor.fetchall()
                    conn.close()
                    return [dict(row) for row in rows]

                return await asyncio.get_event_loop().run_in_executor(None, _sync_fetch_all)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fetch_all: {e}")
            return []

    async def execute(self, query: str, params: tuple = None) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.is_postgres or self.is_supabase:
                # –î–ª—è PostgreSQL/Supabase –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncpg
                if hasattr(self.manager, 'pool') and self.manager.pool:
                    async with self.manager.pool.acquire() as conn:
                        await conn.execute(query, *(params or ()))
                        return True
                else:
                    logger.error("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return False
            else:
                # –î–ª—è SQLite –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                import sqlite3
                import asyncio

                def _sync_execute():
                    conn = sqlite3.connect(self.manager.db_file)
                    cursor = conn.cursor()
                    cursor.execute(query, params or ())
                    conn.commit()
                    conn.close()
                    return True

                return await asyncio.get_event_loop().run_in_executor(None, _sync_execute)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è execute: {e}")
            return False

    async def create_ai_settings_table(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É ai_settings –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            if self.is_postgres or self.is_supabase:
                create_table_sql = """
                    CREATE TABLE IF NOT EXISTS ai_settings (
                        id SERIAL PRIMARY KEY,
                        setting_key VARCHAR(100) NOT NULL UNIQUE,
                        setting_value TEXT NOT NULL,
                        setting_type VARCHAR(20) NOT NULL DEFAULT 'string',
                        description TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );
                """
            else:
                # SQLite –≤–µ—Ä—Å–∏—è
                create_table_sql = """
                    CREATE TABLE IF NOT EXISTS ai_settings (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        setting_key TEXT NOT NULL UNIQUE,
                        setting_value TEXT NOT NULL,
                        setting_type TEXT NOT NULL DEFAULT 'string',
                        description TEXT,
                        created_at TEXT DEFAULT (datetime('now')),
                        updated_at TEXT DEFAULT (datetime('now'))
                    );
                """

            await self.execute(create_table_sql)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
            index_sql = "CREATE INDEX IF NOT EXISTS idx_ai_settings_key ON ai_settings(setting_key);"
            await self.execute(index_sql)

            # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            defaults = [
                ('ai_daily_limit', '3', 'integer',
                 '–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ò–ò –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
                ('premium_package_price', '100', 'integer',
                 '–¶–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö'),
                ('premium_package_requests', '30', 'integer',
                 '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–µ'),
                ('admin_premium_mode', 'true', 'boolean',
                 '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –ø—Ä–µ–º–∏—É–º –ò–ò –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'),
                ('free_premium_users', '[]', 'string',
                 'JSON —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–æ–º')
            ]

            for key, value, setting_type, description in defaults:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                existing = await self.fetch_one("SELECT setting_key FROM ai_settings WHERE setting_key = ?", (key,))
                if not existing:
                    await self.execute(
                        "INSERT INTO ai_settings (setting_key, setting_value, setting_type, description) VALUES (?, ?, ?, ?)",
                        (key, value, setting_type, description)
                    )

            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ ai_settings —Å–æ–∑–¥–∞–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ai_settings: {e}")
            return False

    async def get_topic_by_name(self, topic_name: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º—É –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é"""
        return await self.manager.get_topic_by_name(topic_name)

    async def get_topic_by_id(self, topic_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º—É –ø–æ ID"""
        return await self.manager.get_topic_by_id(topic_id)

    async def search_topics_fulltext(self, search_query: str, limit: int = 20) -> list:
        """–ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–º–∞–º"""
        return await self.manager.search_topics_fulltext(search_query, limit)

    async def get_topics_count(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º"""
        return await self.manager.get_topics_count()

    async def add_bible_topic(self, topic_name: str, verses: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –±–∏–±–ª–µ–π—Å–∫—É—é —Ç–µ–º—É"""
        return await self.manager.add_bible_topic(topic_name, verses)

    async def update_bible_topic(self, topic_id: int, topic_name: str = None, verses: str = None) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∏–±–ª–µ–π—Å–∫—É—é —Ç–µ–º—É"""
        return await self.manager.update_bible_topic(topic_id, topic_name, verses)

    async def delete_bible_topic(self, topic_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –±–∏–±–ª–µ–π—Å–∫—É—é —Ç–µ–º—É"""
        return await self.manager.delete_bible_topic(topic_id)

    # === –î–∏–∞–ª–æ–≥–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: –≤—Ä–∞–ø–ø–µ—Ä—ã –¥–ª—è Supabase ===
    async def create_conversation(self, user_id: int, title: str = None):
        if hasattr(self.manager, 'create_conversation'):
            return await self.manager.create_conversation(user_id, title)
        return None

    async def update_conversation_title(self, conversation_id: str, user_id: int, title: str) -> bool:
        if hasattr(self.manager, 'update_conversation_title'):
            return await self.manager.update_conversation_title(conversation_id, user_id, title)
        return False

    async def get_conversation(self, conversation_id: str, user_id: int):
        if hasattr(self.manager, 'get_conversation'):
            return await self.manager.get_conversation(conversation_id, user_id)
        return None

    async def list_conversations(self, user_id: int, limit: int = 20):
        if hasattr(self.manager, 'list_conversations'):
            return await self.manager.list_conversations(user_id, limit)
        return []

    async def delete_conversation(self, conversation_id: str, user_id: int) -> bool:
        if hasattr(self.manager, 'delete_conversation'):
            return await self.manager.delete_conversation(conversation_id, user_id)
        return False

    async def add_message(self, conversation_id: str, role: str, content: str, meta=None):
        if hasattr(self.manager, 'add_message'):
            return await self.manager.add_message(conversation_id, role, content, meta)
        return None

    async def list_messages(self, conversation_id: str, limit: int = 20):
        if hasattr(self.manager, 'list_messages'):
            return await self.manager.list_messages(conversation_id, limit)
        return []

    # === –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò –ò–ò ===

    async def get_ai_setting(self, setting_key: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ò–ò –ø–æ –∫–ª—é—á—É"""
        if hasattr(self.manager, 'get_ai_setting'):
            return await self.manager.get_ai_setting(setting_key)
        else:
            # Fallback –¥–ª—è SQLite
            result = await self.fetch_one("SELECT * FROM ai_settings WHERE setting_key = ?", (setting_key,))
            return result

    async def set_ai_setting(self, setting_key: str, setting_value: str, setting_type: str = 'string', description: str = None) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ò–ò"""
        if hasattr(self.manager, 'set_ai_setting'):
            return await self.manager.set_ai_setting(setting_key, setting_value, setting_type, description)
        else:
            # Fallback –¥–ª—è SQLite
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                await self.execute(
                    "INSERT OR REPLACE INTO ai_settings (setting_key, setting_value, setting_type, description, updated_at) VALUES (?, ?, ?, ?, datetime('now'))",
                    (setting_key, setting_value, setting_type, description)
                )
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {setting_key}: {e}")
                return False

    async def get_all_ai_settings(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò"""
        if hasattr(self.manager, 'get_all_ai_settings'):
            return await self.manager.get_all_ai_settings()
        else:
            # Fallback –¥–ª—è SQLite
            return await self.fetch_all("SELECT * FROM ai_settings ORDER BY setting_key")

    # === –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–†–ï–ú–ò–£–ú –ó–ê–ü–†–û–°–ê–ú–ò ===

    async def get_user_premium_requests(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if hasattr(self.manager, 'get_user_premium_requests'):
            return await self.manager.get_user_premium_requests(user_id)
        else:
            # Fallback –¥–ª—è SQLite
            result = await self.fetch_one("SELECT requests_count FROM premium_requests WHERE user_id = ?", (user_id,))
            return result['requests_count'] if result else 0

    async def add_premium_requests(self, user_id: int, count: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if hasattr(self.manager, 'add_premium_requests'):
            return await self.manager.add_premium_requests(user_id, count)
        else:
            # Fallback –¥–ª—è SQLite
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                existing = await self.fetch_one("SELECT * FROM premium_requests WHERE user_id = ?", (user_id,))

                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    new_count = existing['requests_count'] + count
                    new_total = existing['total_purchased'] + count

                    await self.execute(
                        "UPDATE premium_requests SET requests_count = ?, total_purchased = ?, updated_at = datetime('now') WHERE user_id = ?",
                        (new_count, new_total, user_id)
                    )
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    await self.execute(
                        "INSERT INTO premium_requests (user_id, requests_count, total_purchased, total_used) VALUES (?, ?, ?, 0)",
                        (user_id, count, count)
                    )

                return True
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                return False

    async def use_premium_request(self, user_id: int) -> bool:
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–∏–Ω –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å"""
        if hasattr(self.manager, 'use_premium_request'):
            return await self.manager.use_premium_request(user_id)
        else:
            # Fallback –¥–ª—è SQLite
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                result = await self.fetch_one("SELECT * FROM premium_requests WHERE user_id = ?", (user_id,))

                if not result or result['requests_count'] <= 0:
                    return False

                new_count = result['requests_count'] - 1
                new_used = result['total_used'] + 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                await self.execute(
                    "UPDATE premium_requests SET requests_count = ?, total_used = ?, updated_at = datetime('now') WHERE user_id = ?",
                    (new_count, new_used, user_id)
                )

                return True
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
                return False

    async def get_premium_stats(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if hasattr(self.manager, 'get_premium_stats'):
            return await self.manager.get_premium_stats(user_id)
        else:
            # Fallback –¥–ª—è SQLite
            try:
                result = await self.fetch_one("SELECT * FROM premium_requests WHERE user_id = ?", (user_id,))

                if result:
                    return {
                        'available': result['requests_count'],
                        'total_purchased': result['total_purchased'],
                        'total_used': result['total_used'],
                        'created_at': result['created_at']
                    }
                else:
                    return {
                        'available': 0,
                        'total_purchased': 0,
                        'total_used': 0,
                        'created_at': None
                    }
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                return {
                    'available': 0,
                    'total_purchased': 0,
                    'total_used': 0,
                    'created_at': None
                }

    # === –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–ö–£–ü–ö–ê–ú–ò –ò –ü–û–ñ–ï–†–¢–í–û–í–ê–ù–ò–Ø–ú–ò ===

    async def create_premium_purchase(self, user_id: int, requests_count: int, amount_rub: int, payment_id: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if hasattr(self.manager, 'create_premium_purchase'):
            return await self.manager.create_premium_purchase(user_id, requests_count, amount_rub, payment_id)
        else:
            # Fallback –¥–ª—è SQLite
            try:
                await self.execute(
                    "INSERT INTO premium_purchases (user_id, requests_count, amount_rub, payment_id, payment_status) VALUES (?, ?, ?, ?, 'pending')",
                    (user_id, requests_count, amount_rub, payment_id)
                )
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
                return False

    async def complete_premium_purchase(self, payment_id: str) -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if hasattr(self.manager, 'complete_premium_purchase'):
            return await self.manager.complete_premium_purchase(payment_id)
        else:
            # Fallback –¥–ª—è SQLite - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
                purchase = await self.fetch_one(
                    "SELECT user_id, requests_count FROM premium_purchases WHERE payment_id = ? AND payment_status = 'pending'",
                    (payment_id,)
                )

                if not purchase:
                    return False

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏
                await self.execute(
                    "UPDATE premium_purchases SET payment_status = 'completed', completed_at = datetime('now') WHERE payment_id = ?",
                    (payment_id,)
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                return await self.add_premium_requests(purchase['user_id'], purchase['requests_count'])

            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
                return False

    async def create_donation(self, user_id: int, amount_rub: int, payment_id: str, message: str = None) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–∏"""
        if hasattr(self.manager, 'create_donation'):
            return await self.manager.create_donation(user_id, amount_rub, payment_id, message)
        else:
            # Fallback –¥–ª—è SQLite
            try:
                await self.execute(
                    "INSERT INTO donations (user_id, amount_rub, payment_id, message, payment_status) VALUES (?, ?, ?, ?, 'pending')",
                    (user_id, amount_rub, payment_id, message)
                )
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: {e}")
                return False

    async def complete_donation(self, payment_id: str) -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ"""
        if hasattr(self.manager, 'complete_donation'):
            return await self.manager.complete_donation(payment_id)
        else:
            # Fallback –¥–ª—è SQLite
            try:
                await self.execute(
                    "UPDATE donations SET payment_status = 'completed', completed_at = datetime('now') WHERE payment_id = ? AND payment_status = 'pending'",
                    (payment_id,)
                )
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: {e}")
                return False


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
universal_db_manager = UniversalDatabaseManager()
