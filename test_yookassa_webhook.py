#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –ÆKassa
"""
import asyncio
import json
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_webhook_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–µ–±—Ö—É–∫–æ–≤ –ÆKassa"""
    
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–µ–±—Ö—É–∫–æ–≤ –ÆKassa...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from database.universal_manager import universal_db_manager as db_manager
        await db_manager.initialize()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º webhook handler
        from handlers.yookassa_webhook import YooKassaWebhookHandler
        webhook_handler = YooKassaWebhookHandler()
        
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã
        logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã...")
        
        premium_payment_data = {
            "id": "test-premium-payment-123",
            "status": "succeeded",
            "amount": {
                "value": "100.00",
                "currency": "RUB"
            },
            "metadata": {
                "user_id": "123456789",
                "type": "premium_requests",
                "requests_count": "30"
            },
            "created_at": "2025-08-17T15:00:00.000Z"
        }
        
        await webhook_handler.handle_payment_succeeded(premium_payment_data)
        logger.info("   ‚úÖ –ü–ª–∞—Ç–µ–∂ –∑–∞ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
        logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ...")
        
        donation_payment_data = {
            "id": "test-donation-payment-456",
            "status": "succeeded",
            "amount": {
                "value": "500.00",
                "currency": "RUB"
            },
            "metadata": {
                "user_id": "123456789",
                "type": "donation",
                "message": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
            },
            "created_at": "2025-08-17T15:05:00.000Z"
        }
        
        await webhook_handler.handle_payment_succeeded(donation_payment_data)
        logger.info("   ‚úÖ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        if db_manager.is_supabase:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º premium_purchases
            premium_result = db_manager.manager.client.table('premium_purchases').select('*').eq('payment_id', 'test-premium-payment-123').execute()
            
            if premium_result.data:
                purchase = premium_result.data[0]
                logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤:")
                logger.info(f"      ID: {purchase['id']}")
                logger.info(f"      User ID: {purchase['user_id']}")
                logger.info(f"      Requests: {purchase['requests_count']}")
                logger.info(f"      Amount: {purchase['amount_rub']}‚ÇΩ")
                logger.info(f"      Status: {purchase['payment_status']}")
            else:
                logger.warning("   ‚ö†Ô∏è –ó–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º donations
            donation_result = db_manager.manager.client.table('donations').select('*').eq('payment_id', 'test-donation-payment-456').execute()
            
            if donation_result.data:
                donation = donation_result.data[0]
                logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–∏:")
                logger.info(f"      ID: {donation['id']}")
                logger.info(f"      User ID: {donation['user_id']}")
                logger.info(f"      Amount: {donation['amount_rub']}‚ÇΩ")
                logger.info(f"      Message: {donation['message']}")
                logger.info(f"      Status: {donation['payment_status']}")
            else:
                logger.warning("   ‚ö†Ô∏è –ó–∞–ø–∏—Å—å –æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
            from services.premium_manager import PremiumManager
            premium_manager = PremiumManager()
            balance = await premium_manager.get_user_premium_requests(123456789)
            logger.info(f"   üíé –ë–∞–ª–∞–Ω—Å –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123456789: {balance}")
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π webhook –∑–∞–ø—Ä–æ—Å
        logger.info("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π webhook –∑–∞–ø—Ä–æ—Å...")
        
        webhook_payload = {
            "event": "payment.succeeded",
            "object": premium_payment_data
        }
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º aiohttp Request
        class MockRequest:
            def __init__(self, data):
                self.data = json.dumps(data).encode('utf-8')
                self.headers = {'X-Yookassa-Signature': 'test-signature'}
            
            async def read(self):
                return self.data
        
        mock_request = MockRequest(webhook_payload)
        response = await webhook_handler.handle_webhook(mock_request)
        
        logger.info(f"   üì® Webhook response status: {response.status}")
        if response.status == 200:
            logger.info("   ‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning(f"   ‚ö†Ô∏è Webhook –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
        
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            await db_manager.close()
        except:
            pass

if __name__ == "__main__":
    asyncio.run(test_webhook_processing())