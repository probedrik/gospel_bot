#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–µ–º–∏—É–º –ò–ò
"""
import asyncio
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_premium_ui():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–µ–º–∏—É–º –ò–ò"""
    
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–µ–º–∏—É–º –ò–ò...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        logger.info("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–µ–º–∏—É–º –ò–ò...")
        
        from keyboards.settings import create_premium_ai_keyboard
        keyboard = create_premium_ai_keyboard()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
        button_texts = []
        for row in keyboard.inline_keyboard:
            for button in row:
                button_texts.append(button.text)
        
        logger.info("   üìã –ö–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:")
        for i, text in enumerate(button_texts, 1):
            logger.info(f"      {i}. {text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã" –Ω–µ—Ç
        if "üìä –ú–æ–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã" in button_texts:
            logger.error("   ‚ùå –ö–Ω–æ–ø–∫–∞ '–ú–æ–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã' –≤—Å–µ –µ—â–µ –µ—Å—Ç—å!")
        else:
            logger.info("   ‚úÖ –ö–Ω–æ–ø–∫–∞ '–ú–æ–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
        logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from database.universal_manager import universal_db_manager as db_manager
        await db_manager.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from services.premium_manager import PremiumManager
        premium_manager = PremiumManager()
        
        test_user_id = 123456789
        stats = await premium_manager.get_user_premium_stats(test_user_id)
        
        logger.info(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
        logger.info(f"      - –î–æ—Å—Ç—É–ø–Ω–æ: {stats['available']}")
        logger.info(f"      - –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ: {stats['total_purchased']}")
        logger.info(f"      - –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['total_used']}")
        logger.info(f"      - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {stats['created_at']}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã...")
        
        first_purchase = ""
        if stats['created_at']:
            try:
                if isinstance(stats['created_at'], str):
                    from datetime import datetime
                    created_date = datetime.fromisoformat(stats['created_at'].replace('Z', '+00:00'))
                    first_purchase = f"üìÖ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: {created_date.strftime('%d.%m.%Y')}"
                else:
                    first_purchase = f"üìÖ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: {stats['created_at'].strftime('%d.%m.%Y')}"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
                first_purchase = f"üìÖ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: {stats['created_at']}"
        
        logger.info(f"   ‚úÖ –î–∞—Ç–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞: {first_purchase}")
        
        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        logger.info("4Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        
        from services.ai_settings_manager import ai_settings_manager
        daily_limit = await ai_settings_manager.get_daily_limit()
        
        balance_text = (
            f"üìä **–í–∞—à–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã**\n\n"
            f"‚≠ê **–î–æ—Å—Ç—É–ø–Ω–æ:** {stats['available']} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            f"üìà **–í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ:** {stats['total_purchased']}\n"
            f"üìâ **–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {stats['total_used']}\n{first_purchase}\n\n"
        )
        
        info_text = (
            balance_text +
            "üß† **–î–≤–∞ —É—Ä–æ–≤–Ω—è –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞:**\n"
            "‚Ä¢ **–û–±—ã—á–Ω—ã–π –ò–ò:** –ö—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤), –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å\n"
            "‚Ä¢ **–ü—Ä–µ–º–∏—É–º –ò–ò:** –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤), –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å\n\n"
            "üéØ **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:**\n"
            f"‚Ä¢ **–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–µ–º–∏—É–º –ò–ò!**\n"
            f"‚Ä¢ –°–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞—Ç—è—Ç—Å—è –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã ({daily_limit} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–µ–º–∏—É–º –ò–ò)\n"
            "‚Ä¢ –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –ü—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–≥–æ—Ä–∞—é—Ç\n\n"
            "‚ÑπÔ∏è **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
            "‚Ä¢ –ù–µ —Å–≥–æ—Ä–∞—é—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ—Å–ª–µ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤\n"
            "‚Ä¢ –ù–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ"
        )
        
        logger.info("   üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        logger.info("   " + "="*50)
        for line in info_text.split('\n'):
            logger.info(f"   {line}")
        logger.info("   " + "="*50)
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        text_length = len(info_text)
        logger.info(f"   üìè –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {text_length} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if text_length > 4096:
            logger.warning(f"   ‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è Telegram ({text_length} > 4096)")
        else:
            logger.info("   ‚úÖ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞ Telegram")
        
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            await db_manager.close()
        except:
            pass

if __name__ == "__main__":
    asyncio.run(test_premium_ui())