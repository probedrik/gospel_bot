#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ HTML —Ç–µ–≥–æ–≤ –ò markdown —Å–∏–º–≤–æ–ª–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_combined_cleanup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É HTML + markdown"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É HTML —Ç–µ–≥–æ–≤ –ò markdown —Å–∏–º–≤–æ–ª–æ–≤\n")
    
    test_cases = [
        {
            "name": "–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π blockquote + markdown",
            "input": "**–ê–Ω–∞–ª–∏–∑** –≥–ª–∞–≤—ã <blockquote>–≤–∞–∂–Ω—ã–π —Ç–µ–∫—Å—Ç",
            "expected": "–ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤—ã –≤–∞–∂–Ω—ã–π —Ç–µ–∫—Å—Ç"
        },
        {
            "name": "HTML —Ç–µ–≥–∏ + markdown",
            "input": "<b>**–ñ–∏—Ä–Ω—ã–π**</b> —Ç–µ–∫—Å—Ç —Å <i>*–∫—É—Ä—Å–∏–≤–æ–º*</i>",
            "expected": "–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫—É—Ä—Å–∏–≤–æ–º"
        },
        {
            "name": "–°–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
            "input": """
            <div>
                ### **–ó–∞–≥–æ–ª–æ–≤–æ–∫**
                <p>–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å `–∫–æ–¥–æ–º` –∏ *–∫—É—Ä—Å–∏–≤–æ–º*</p>
                <blockquote>**–¶–∏—Ç–∞—Ç–∞** –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è
            </div>
            """,
            "expected": "–ó–∞–≥–æ–ª–æ–≤–æ–∫\n                –ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å –∫–æ–¥–æ–º –∏ –∫—É—Ä—Å–∏–≤–æ–º\n                –¶–∏—Ç–∞—Ç–∞ –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è"
        },
        {
            "name": "–¢–æ–ª—å–∫–æ markdown",
            "input": "**–ñ–∏—Ä–Ω—ã–π** —Ç–µ–∫—Å—Ç —Å *–∫—É—Ä—Å–∏–≤–æ–º* –∏ `–∫–æ–¥–æ–º`",
            "expected": "–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫—É—Ä—Å–∏–≤–æ–º –∏ –∫–æ–¥–æ–º"
        },
        {
            "name": "–¢–æ–ª—å–∫–æ HTML",
            "input": "<b>–ñ–∏—Ä–Ω—ã–π</b> —Ç–µ–∫—Å—Ç —Å <i>–∫—É—Ä—Å–∏–≤–æ–º</i>",
            "expected": "–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫—É—Ä—Å–∏–≤–æ–º"
        },
        {
            "name": "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç",
            "input": "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏",
            "expected": "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏"
        }
    ]
    
    success_count = 0
    
    for i, case in enumerate(test_cases, 1):
        print(f"{i}. {case['name']}:")
        print(f"   –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: {repr(case['input'][:100])}...")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∫ –≤ –∫–æ–¥–µ
        import re
        
        # –°–ù–ê–ß–ê–õ–ê HTML —Ç–µ–≥–∏
        cleaned = re.sub(r'<[^>]*>', '', case['input'])
        
        # –ó–ê–¢–ï–ú markdown
        cleaned = re.sub(r'\*\*([^*]+)\*\*', r'\1', cleaned)  # **–∂–∏—Ä–Ω—ã–π**
        cleaned = re.sub(r'\*([^*]+)\*', r'\1', cleaned)  # *–∫—É—Ä—Å–∏–≤*
        cleaned = re.sub(r'`([^`]+)`', r'\1', cleaned)  # `–∫–æ–¥`
        cleaned = re.sub(r'#{1,6}\s*([^\n]+)', r'\1', cleaned)  # ### –∑–∞–≥–æ–ª–æ–≤–æ–∫
        
        cleaned = cleaned.strip()
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {repr(cleaned[:100])}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç HTML —Ç–µ–≥–æ–≤ –∏ markdown
        has_html = '<' in cleaned and '>' in cleaned
        has_markdown = '**' in cleaned or '*' in cleaned or '`' in cleaned or '###' in cleaned
        
        if not has_html and not has_markdown:
            print(f"   ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            success_count += 1
        else:
            print(f"   ‚ùå –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
            if has_html:
                print(f"      - –û—Å—Ç–∞–ª–∏—Å—å HTML —Ç–µ–≥–∏")
            if has_markdown:
                print(f"      - –û—Å—Ç–∞–ª–∏—Å—å markdown —Å–∏–º–≤–æ–ª—ã")
        
        print()
    
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {success_count}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    return success_count == len(test_cases)

def test_format_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é format_ai_or_commentary\n")
    
    try:
        from handlers.text_messages import format_ai_or_commentary
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–ª –æ—à–∏–±–∫—É
        problematic_text = """
        **–ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤—ã 49 –∏–∑ –ò—Å–∞–∏–∏**
        
        ### –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        <blockquote>–ì–ª–∞–≤–∞ 49 —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—ã–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞
        
        ### –ë–æ–≥–æ—Å–ª–æ–≤—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        1. **–ú–µ—Å—Å–∏–∞–Ω—Å–∫–∏–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞**: <i>–í–∞–∂–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</i>
        2. **–°–ø–∞—Å–µ–Ω–∏–µ –Ω–∞—Ä–æ–¥–æ–≤**: `–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ` —Å–ø–∞—Å–µ–Ω–∏–µ
        
        <div>–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫ —Å **–∂–∏—Ä–Ω—ã–º** —Ç–µ–∫—Å—Ç–æ–º
        """
        
        result, opts = format_ai_or_commentary(problematic_text, "‚≠ê –ü—Ä–µ–º–∏—É–º —Ä–∞–∑–±–æ—Ä –æ—Ç –ò–ò")
        
        print(f"–í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: {repr(problematic_text[:100])}...")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        print(f"–û–ø—Ü–∏–∏: {opts}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        blockquote_open = result.count('<blockquote>')
        blockquote_close = result.count('</blockquote>')
        
        if blockquote_open == blockquote_close == 1:
            print("‚úÖ blockquote —Ç–µ–≥–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            print("‚ùå blockquote —Ç–µ–≥–∏ –ù–ï —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã!")
            print(f"   –û—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö: {blockquote_open}")
            print(f"   –ó–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö: {blockquote_close}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        content = result.split('<blockquote>')[1].split('</blockquote>')[0]
        has_html = '<' in content and '>' in content
        has_markdown = '**' in content or '*' in content or '`' in content
        
        if not has_html:
            print("‚úÖ –ù–µ—Ç HTML —Ç–µ–≥–æ–≤ –≤–Ω—É—Ç—Ä–∏ blockquote")
        else:
            print("‚ùå –ï—Å—Ç—å HTML —Ç–µ–≥–∏ –≤–Ω—É—Ç—Ä–∏ blockquote!")
        
        if not has_markdown:
            print("‚úÖ –ù–µ—Ç markdown —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print("‚ùå –ï—Å—Ç—å markdown —Å–∏–º–≤–æ–ª—ã!")
        
        return not has_html and not has_markdown and blockquote_open == blockquote_close == 1
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def show_cleanup_order():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ—á–∏—Å—Ç–∫–∏"""
    print("\nüîÑ –ü–û–†–Ø–î–û–ö –û–ß–ò–°–¢–ö–ò:")
    print("=" * 50)
    
    print("1. üè∑Ô∏è –£–î–ê–õ–Ø–ï–ú HTML –¢–ï–ì–ò:")
    print("   r'<[^>]*>' ‚Üí —É–¥–∞–ª—è–µ—Ç <blockquote>, <div>, <b>, <i> –∏ —Ç.–¥.")
    print()
    
    print("2. üìù –£–î–ê–õ–Ø–ï–ú MARKDOWN:")
    print("   r'\\*\\*([^*]+)\\*\\*' ‚Üí **–∂–∏—Ä–Ω—ã–π** ‚Üí –∂–∏—Ä–Ω—ã–π")
    print("   r'\\*([^*]+)\\*' ‚Üí *–∫—É—Ä—Å–∏–≤* ‚Üí –∫—É—Ä—Å–∏–≤")
    print("   r'`([^`]+)`' ‚Üí `–∫–æ–¥` ‚Üí –∫–æ–¥")
    print("   r'#{1,6}\\s*([^\\n]+)' ‚Üí ### –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí –∑–∞–≥–æ–ª–æ–≤–æ–∫")
    print()
    
    print("3. üßπ –û–ß–ò–©–ê–ï–ú –ü–†–û–ë–ï–õ–´:")
    print("   .strip() ‚Üí —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã")
    print()
    
    print("4. üîí –≠–ö–†–ê–ù–ò–†–£–ï–ú HTML:")
    print("   html.escape() ‚Üí < ‚Üí &lt;, > ‚Üí &gt;, & ‚Üí &amp;")
    print()
    
    print("5. üì¶ –û–ë–û–†–ê–ß–ò–í–ê–ï–ú –í BLOCKQUOTE:")
    print("   f'<blockquote>{escaped_text}</blockquote>'")

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢ –û–ß–ò–°–¢–ö–ò HTML –¢–ï–ì–û–í –ò MARKDOWN –°–ò–ú–í–û–õ–û–í\n")
    
    cleanup_success = test_combined_cleanup()
    format_success = test_format_function()
    
    show_cleanup_order()
    
    if cleanup_success and format_success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ HTML —Ç–µ–≥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª—è—é—Ç—Å—è")
        print("‚úÖ Markdown —Å–∏–º–≤–æ–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª—è—é—Ç—Å—è")
        print("‚úÖ blockquote —Ç–µ–≥–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã")
        print("‚úÖ HTML —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        if not cleanup_success:
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –æ—á–∏—Å—Ç–∫–æ–π")
        if not format_success:
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")