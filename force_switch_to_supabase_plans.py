#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è –∏–∑ Supabase.
–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–æ–≤.
"""

import os
import sys
import asyncio
from pathlib import Path


def update_supabase_config():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Supabase –ø–ª–∞–Ω–æ–≤"""
    config_file = "data/supabase_plans.conf"

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    os.makedirs("data", exist_ok=True)

    config_content = """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è –∏–∑ Supabase

# –≠—Ç–æ—Ç —Ñ–∞–π–ª —É–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è –∏–∑ Supabase
# –≤–º–µ—Å—Ç–æ CSV —Ñ–∞–π–ª–æ–≤

USE_SUPABASE_PLANS=true
CSV_PLANS_DISABLED=true

# –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ CSV –ø–ª–∞–Ω–∞–º:
# 1. –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –ø–∞–ø–∫—É data/plans_csv_final_disabled –æ–±—Ä–∞—Ç–Ω–æ –≤ data/plans_csv_final
# 2. –£–¥–∞–ª–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_SUPABASE_PLANS=false

"""

    with open(config_file, 'w', encoding='utf-8') as f:
        f.write(config_content)

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {config_file}")


def disable_csv_plans():
    """–û—Ç–∫–ª—é—á–∞–µ—Ç CSV –ø–ª–∞–Ω—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å"""
    csv_dir = "data/plans_csv_final"
    disabled_dir = "data/plans_csv_final_disabled"

    if os.path.exists(csv_dir) and not os.path.exists(disabled_dir):
        os.rename(csv_dir, disabled_dir)
        print(f"‚úÖ CSV –ø–ª–∞–Ω—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã: {csv_dir} ‚Üí {disabled_dir}")
    else:
        print(f"‚ÑπÔ∏è CSV –ø–ª–∞–Ω—ã —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")


async def test_supabase_plans():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–æ–≤ –∏–∑ Supabase"""
    try:
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–æ–≤ –∏–∑ Supabase...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        from dotenv import load_dotenv
        load_dotenv()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ë–î
        from database.universal_manager import universal_db_manager

        if universal_db_manager.is_supabase:
            print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–î: Supabase")
        elif universal_db_manager.is_postgres:
            print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–î: PostgreSQL")
        else:
            print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–î: SQLite")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –º–µ–Ω–µ–¥–∂–µ—Ä
        await universal_db_manager.initialize()

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º db_manager
        from services.supabase_reading_plans import SupabaseReadingPlansService
        service = SupabaseReadingPlansService(universal_db_manager)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ê–°–ò–ù–•–†–û–ù–ù–´–ô –º–µ—Ç–æ–¥
        plans = await service.get_all_plans()

        if plans:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(plans)} –ø–ª–∞–Ω–æ–≤ –≤ Supabase:")
            for plan in plans:
                print(
                    f"   üìã {plan.plan_id}: {plan.title} ({plan.total_days} –¥–Ω–µ–π)")
            return True
        else:
            print("‚ùå –ü–ª–∞–Ω—ã –≤ Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Supabase –ø–ª–∞–Ω–æ–≤: {e}")
        import traceback
        print(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return False


async def test_universal_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–æ–≤"""
    try:
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–æ–≤...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        from dotenv import load_dotenv
        load_dotenv()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        from services.universal_reading_plans import universal_reading_plans_service

        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not hasattr(universal_reading_plans_service, 'plans') or not universal_reading_plans_service.plans:
            print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞...")
            universal_reading_plans_service._load_plans()

        plans = universal_reading_plans_service.get_all_plans()

        if plans:
            print(f"‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∑–∏–ª {len(plans)} –ø–ª–∞–Ω–æ–≤:")
            for plan in plans[:3]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ dict –∏–ª–∏ ReadingPlan –æ–±—ä–µ–∫—Ç
                if hasattr(plan, 'title'):
                    # –≠—Ç–æ ReadingPlan –æ–±—ä–µ–∫—Ç
                    title = plan.title
                    days = plan.total_days
                    plan_id = plan.plan_id
                    print(f"   üìã {plan_id}: {title} ({days} –¥–Ω–µ–π)")
                elif isinstance(plan, dict):
                    # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                    title = plan.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω')
                    days = plan.get('total_days', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    plan_id = plan.get('plan_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                    print(f"   üìã {plan_id}: {title} ({days} –¥–Ω–µ–π)")
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
                    print(f"   üìã {str(plan)}")

            if len(plans) > 3:
                print(f"   ... –∏ –µ—â–µ {len(plans) - 3} –ø–ª–∞–Ω–æ–≤")
            return True
        else:
            print("‚ùå –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω—ã")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        import traceback
        print(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞–Ω—ã Supabase")
    print("=" * 60)

    # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    update_supabase_config()

    # –®–∞–≥ 2: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ CSV –ø–ª–∞–Ω–æ–≤
    disable_csv_plans()

    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–æ–≤...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Supabase –ø–ª–∞–Ω—ã
    supabase_ok = await test_supabase_plans()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    universal_ok = await test_universal_service()

    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    if supabase_ok:
        print("‚úÖ –ü–ª–∞–Ω—ã –≤ Supabase –¥–æ—Å—Ç—É–ø–Ω—ã")
        print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Supabase –ø–ª–∞–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–æ–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑: .\\build-and-push.ps1 -Username \"probedrik\" -Tag \"v2.8.12\"")
        print(
            "2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: docker-compose -f docker-compose.supabase-sdk.yml up -d")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs -f bible-bot-supabase")
    else:
        print("‚ùå –ü–ª–∞–Ω—ã –≤ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("1. USE_SUPABASE=true –≤ .env —Ñ–∞–π–ª–µ")
        print("2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Supabase –≤ .env")
        print("3. –¢–∞–±–ª–∏—Ü—ã reading_plans –∏ reading_plan_days —Å–æ–∑–¥–∞–Ω—ã")


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
