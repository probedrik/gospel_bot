"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –ë–∏–±–ª–∏–∏.
"""
import asyncio
import logging
import sys
from datetime import datetime
import os

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext

from config import settings
from handlers import (
    commands, text_messages, callbacks, bookmarks, bookmark_callbacks, reading_plans, admin, ai_assistant
)
from middleware.state import StateMiddleware
from middleware.db_middleware import DatabaseMiddleware
from database.universal_manager import universal_db_manager as db_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler(sys.stdout)
    ]
)

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
logger = logging.getLogger(__name__)


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: %s", datetime.now())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
        await db_manager.initialize()

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if db_manager.is_supabase:
            db_type = "Supabase"
        elif db_manager.is_postgres:
            db_type = "PostgreSQL"
        else:
            db_type = "SQLite"
        logger.info(f"üóÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_type}")

        # –î–ª—è SQLite –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not db_manager.is_postgres and not db_manager.is_supabase:
            db_file = db_manager.db_file
            db_dir = os.path.dirname(db_file)

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(db_dir, exist_ok=True)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            try:
                with open(db_file, 'a') as f:
                    pass
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –ë–î: {e}")

            # –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
            db_manager._create_tables()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ë–î –ø—É—Ç–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db_manager.add_user(123456, "test_user", "Test")
        test_user = await db_manager.get_user(123456)

        if test_user:
            logger.info(
                f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —É—Å–ø–µ—à–Ω–∞, —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω: {test_user}")
        else:
            logger.error(
                "‚ùå –û—à–∏–±–∫–∞: —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

    except Exception as e:
        logger.error(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
        logger.warning("‚ö†Ô∏è –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î!")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    storage = MemoryStorage()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã DefaultBotProperties
    bot = Bot(
        token=settings.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher(storage=storage)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –ë–î –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    try:
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        test_db = await db_manager.get_user(1)
        if db_manager.is_supabase:
            logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase —É—Å–ø–µ—à–Ω–æ")
        elif db_manager.is_postgres:
            logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.info(
                f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å–ø–µ—à–Ω–æ: {db_manager.db_file}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å –ë–î: {e}", exc_info=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp["db"] = db_manager
    if db_manager.is_supabase:
        logger.info("–û–±—ä–µ–∫—Ç Supabase –ë–î –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞")
    elif db_manager.is_postgres:
        logger.info("–û–±—ä–µ–∫—Ç PostgreSQL –ë–î –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞")
    else:
        logger.info(
            f"–û–±—ä–µ–∫—Ç –ë–î –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {db_manager.db_file}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    dp.update.middleware(StateMiddleware())
    dp.update.middleware(DatabaseMiddleware())
    logger.info("Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞ –ë–î –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    dp.include_router(admin.admin_router)  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–≤—ã–º–∏
    dp.include_router(commands.router)

    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫ (–í–ê–ñ–ù–û: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –î–û —Å—Ç–∞—Ä—ã—Ö!)
    from handlers import bookmarks_new, bookmark_handlers
    dp.include_router(bookmarks_new.router)
    dp.include_router(bookmark_handlers.router)

    dp.include_router(text_messages.router)
    dp.include_router(callbacks.router)
    dp.include_router(bookmarks.router)  # –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–ª–∞–¥–æ–∫
    dp.include_router(bookmark_callbacks.router)
    dp.include_router(reading_plans.router)
    dp.include_router(ai_assistant.router)  # –ò–ò –ø–æ–º–æ—â–Ω–∏–∫

    # –ö–∞–ª–µ–Ω–¥–∞—Ä—å
    from handlers import calendar as calendar_handler
    dp.include_router(calendar_handler.router)

    # –ü–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Telegram Stars
    from handlers import payments
    dp.include_router(payments.router)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤–∫–ª—é—á–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π) - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ü–µ
    from handlers import settings as settings_handler
    dp.include_router(settings_handler.router)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–≤–æ—Ç –ò–ò
    try:
        from services.ai_quota_manager import ai_quota_manager
        await ai_quota_manager.start_quota_reset_scheduler()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–≤–æ—Ç –ò–ò –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–≤–æ—Ç: %s",
                     e, exc_info=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: %s", e, exc_info=True)
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–≤–æ—Ç
        try:
            from services.ai_quota_manager import ai_quota_manager
            await ai_quota_manager.stop_quota_reset_scheduler()
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–≤–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(
                "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–≤–æ—Ç: %s", e, exc_info=True)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await db_manager.close()
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e, exc_info=True)
