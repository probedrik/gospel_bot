#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_premium_fixes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        # 1. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ PremiumManager
        logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç PremiumManager...")
        try:
            from services.premium_manager import PremiumManager
            premium_manager = PremiumManager()
            logger.info("   ‚úÖ PremiumManager –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ PremiumManager: {e}")
            return
        
        # 2. –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
        logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
        test_dates = [
            "2025-08-15T06:10:22.418027",  # Supabase —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ Z
            "2025-08-15T06:10:22.418027Z", # Supabase —Ñ–æ—Ä–º–∞—Ç —Å Z
            "2025-08-15T06:10:22+00:00",   # ISO —Ñ–æ—Ä–º–∞—Ç —Å timezone
            datetime.now(),                 # datetime –æ–±—ä–µ–∫—Ç
            None                           # –ü—É—Å—Ç–∞—è –¥–∞—Ç–∞
        ]
        
        for i, test_date in enumerate(test_dates):
            try:
                logger.info(f"   –¢–µ—Å—Ç {i+1}: {type(test_date).__name__} = {test_date}")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ handlers/settings.py
                first_purchase = ""
                if test_date:
                    if isinstance(test_date, str):
                        # –ü–∞—Ä—Å–∏–º ISO —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–∑ Supabase
                        created_date = datetime.fromisoformat(test_date.replace('Z', '+00:00'))
                        first_purchase = f"üìÖ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: {created_date.strftime('%d.%m.%Y')}"
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ datetime –æ–±—ä–µ–∫—Ç
                        first_purchase = f"üìÖ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: {test_date.strftime('%d.%m.%Y')}"
                else:
                    first_purchase = "üìÖ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                
                logger.info(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {first_purchase}")
                
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        # 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from database.universal_manager import universal_db_manager as db_manager
        await db_manager.initialize()
        
        test_user_id = 123456789
        stats = await premium_manager.get_user_premium_stats(test_user_id)
        
        logger.info(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
        logger.info(f"      - –î–æ—Å—Ç—É–ø–Ω–æ: {stats['available']}")
        logger.info(f"      - –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ: {stats['total_purchased']}")
        logger.info(f"      - –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['total_used']}")
        logger.info(f"      - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {stats['created_at']} ({type(stats['created_at']).__name__})")
        
        # 4. –¢–µ—Å—Ç ai_quota_manager
        logger.info("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º ai_quota_manager...")
        try:
            from services.ai_quota_manager import AIQuotaManager
            quota_manager = AIQuotaManager()
            quota_info = await quota_manager.get_user_quota_info(test_user_id)
            logger.info(f"   ‚úÖ –ö–≤–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞: {quota_info}")
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ ai_quota_manager: {e}")
        
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            await db_manager.close()
        except:
            pass

if __name__ == "__main__":
    asyncio.run(test_premium_fixes())