#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π Telegram Stars
"""
import asyncio
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_payments_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from database.universal_manager import universal_db_manager as db_manager
        await db_manager.initialize()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
        from services.premium_manager import PremiumManager
        premium_manager = PremiumManager()
        
        test_user_id = 123456789
        
        logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        logger.info("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤...")
        initial_balance = await premium_manager.get_user_premium_requests(test_user_id)
        logger.info(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {initial_balance} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Stars
        logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Stars...")
        purchase_id = await premium_manager.create_star_premium_purchase(
            user_id=test_user_id,
            requests_count=10,
            amount_stars=25,
            telegram_payment_charge_id="test_charge_123"
        )
        
        if purchase_id:
            logger.info(f"   ‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {purchase_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            new_balance = await premium_manager.get_user_premium_requests(test_user_id)
            logger.info(f"   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            if new_balance == initial_balance + 10:
                logger.info("   ‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {initial_balance + 10}, –ø–æ–ª—É—á–µ–Ω–æ {new_balance}")
        else:
            logger.error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–∫—É–ø–∫—É")
            new_balance = initial_balance  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Stars
        logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Stars...")
        donation_id = await premium_manager.create_star_donation(
            user_id=test_user_id,
            amount_stars=50,
            telegram_payment_charge_id="test_donation_456",
            message="–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ"
        )
        
        if donation_id:
            logger.info(f"   ‚úÖ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {donation_id}")
        else:
            logger.error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        stats = await premium_manager.get_user_premium_stats(test_user_id)
        logger.info(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–∞
        logger.info("5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–∞...")
        success = await premium_manager.use_premium_request(test_user_id)
        
        if success:
            logger.info("   ‚úÖ –ü—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            final_balance = await premium_manager.get_user_premium_requests(test_user_id)
            logger.info(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {final_balance} –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            if final_balance == new_balance - 1:
                logger.info("   ‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
            else:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –æ–∂–∏–¥–∞–ª–æ—Å—å {new_balance - 1}, –ø–æ–ª—É—á–µ–Ω–æ {final_balance}")
        else:
            logger.error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å")
        
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await db_manager.close()

if __name__ == "__main__":
    asyncio.run(test_payments_system())