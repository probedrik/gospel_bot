"""
–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –ÆKassa
"""
import logging
import asyncio
from aiohttp import web
from aiohttp.web_app import Application
from aiohttp.web_runner import AppRunner, TCPSite

from handlers.yookassa_webhook import yookassa_webhook_endpoint
from database.universal_manager import universal_db_manager as db_manager

logger = logging.getLogger(__name__)

class WebhookServer:
    """–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤"""
    
    def __init__(self, host: str = '0.0.0.0', port: int = 8080):
        self.host = host
        self.port = port
        self.app = None
        self.runner = None
        self.site = None
    
    def create_app(self) -> Application:
        """–°–æ–∑–¥–∞–µ—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        app = web.Application()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        app.router.add_post('/webhook/yookassa', yookassa_webhook_endpoint)
        
        # –î–æ–±–∞–≤–ª—è–µ–º health check
        app.router.add_get('/health', self.health_check)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        app.router.add_get('/', self.info_endpoint)
        
        return app
    
    async def health_check(self, request):
        """Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
        return web.json_response({
            'status': 'ok',
            'service': 'gospel-bot-webhook',
            'version': '0.7.2'
        })
    
    async def info_endpoint(self, request):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
        return web.json_response({
            'service': 'Gospel Bot Webhook Server',
            'version': '0.7.2',
            'endpoints': {
                'yookassa_webhook': '/webhook/yookassa',
                'health': '/health'
            },
            'description': 'Webhook server for YooKassa payment processing'
        })
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await db_manager.initialize()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.app = self.create_app()
            
            # –°–æ–∑–¥–∞–µ–º runner
            self.runner = AppRunner(self.app)
            await self.runner.setup()
            
            # –°–æ–∑–¥–∞–µ–º —Å–∞–π—Ç
            self.site = TCPSite(self.runner, self.host, self.port)
            await self.site.start()
            
            logger.info(f"üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{self.host}:{self.port}")
            logger.info(f"üì® YooKassa webhook URL: http://{self.host}:{self.port}/webhook/yookassa")
            logger.info(f"‚ù§Ô∏è Health check: http://{self.host}:{self.port}/health")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
        try:
            if self.site:
                await self.site.stop()
                logger.info("üõë Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            if self.runner:
                await self.runner.cleanup()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
            await db_manager.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")

async def run_webhook_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç webhook —Å–µ—Ä–≤–µ—Ä"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server = WebhookServer()
    
    try:
        await server.start()
        
        # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        while True:
            await asyncio.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await server.stop()

if __name__ == '__main__':
    asyncio.run(run_webhook_server())