"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–ª–∞–¥–∫–∞–º–∏
"""
from aiogram.types import InlineKeyboardButton
from typing import Optional


def create_bookmark_button(book_id: int, chapter_start: int, chapter_end: Optional[int] = None,
                          verse_start: Optional[int] = None, verse_end: Optional[int] = None,
                          is_bookmarked: bool = False) -> InlineKeyboardButton:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏
    
    Args:
        book_id: ID –∫–Ω–∏–≥–∏
        chapter_start: –ù–∞—á–∞–ª—å–Ω–∞—è –≥–ª–∞–≤–∞
        chapter_end: –ö–æ–Ω–µ—á–Ω–∞—è –≥–ª–∞–≤–∞ (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)
        verse_start: –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∏—Ö
        verse_end: –ö–æ–Ω–µ—á–Ω—ã–π —Å—Ç–∏—Ö
        is_bookmarked: –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–ª–∞–¥–∫–∏ –∏–ª–∏ –Ω–µ—Ç
    
    Returns:
        InlineKeyboardButton: –ö–Ω–æ–ø–∫–∞ –∑–∞–∫–ª–∞–¥–∫–∏
    """
    if is_bookmarked:
        text = "üîñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫"
        action = "remove"
    else:
        text = "üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏"
        action = "add"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data
    callback_parts = [f"bookmark_{action}", str(book_id), str(chapter_start)]
    
    if chapter_end and chapter_end != chapter_start:
        callback_parts.append(str(chapter_end))
    else:
        callback_parts.append("0")  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–µ—á–Ω–æ–π –≥–ª–∞–≤—ã
    
    if verse_start:
        callback_parts.append(str(verse_start))
    else:
        callback_parts.append("0")
    
    if verse_end and verse_end != verse_start:
        callback_parts.append(str(verse_end))
    else:
        callback_parts.append("0")
    
    callback_data = "_".join(callback_parts)
    
    return InlineKeyboardButton(text=text, callback_data=callback_data)


def parse_bookmark_callback(callback_data: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç callback_data –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–ª–∞–¥–∫–∏
    
    Args:
        callback_data: –°—Ç—Ä–æ–∫–∞ callback_data
    
    Returns:
        dict: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    parts = callback_data.split("_")
    
    if len(parts) < 6:
        return None
    
    try:
        action = parts[1]  # add –∏–ª–∏ remove
        book_id = int(parts[2])
        chapter_start = int(parts[3])
        chapter_end = int(parts[4]) if parts[4] != "0" else None
        verse_start = int(parts[5]) if parts[5] != "0" else None
        verse_end = int(parts[6]) if len(parts) > 6 and parts[6] != "0" else None
        
        return {
            'action': action,
            'book_id': book_id,
            'chapter_start': chapter_start,
            'chapter_end': chapter_end,
            'verse_start': verse_start,
            'verse_end': verse_end
        }
    except (ValueError, IndexError):
        return None


def format_bookmark_reference(book_name: str, chapter_start: int, chapter_end: Optional[int] = None,
                             verse_start: Optional[int] = None, verse_end: Optional[int] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–∫–ª–∞–¥–∫–µ
    
    Args:
        book_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
        chapter_start: –ù–∞—á–∞–ª—å–Ω–∞—è –≥–ª–∞–≤–∞
        chapter_end: –ö–æ–Ω–µ—á–Ω–∞—è –≥–ª–∞–≤–∞
        verse_start: –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∏—Ö
        verse_end: –ö–æ–Ω–µ—á–Ω—ã–π —Å—Ç–∏—Ö
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞
    """
    if chapter_end and chapter_end != chapter_start:
        # –î–∏–∞–ø–∞–∑–æ–Ω –≥–ª–∞–≤
        return f"{book_name} {chapter_start}-{chapter_end}"
    elif verse_start and verse_end and verse_start != verse_end:
        # –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∏—Ö–æ–≤
        return f"{book_name} {chapter_start}:{verse_start}-{verse_end}"
    elif verse_start:
        # –û–¥–∏–Ω —Å—Ç–∏—Ö
        return f"{book_name} {chapter_start}:{verse_start}"
    else:
        # –í—Å—è –≥–ª–∞–≤–∞
        return f"{book_name} {chapter_start}"