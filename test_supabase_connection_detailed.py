#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
"""

import os
import sys
from dotenv import load_dotenv


def test_env_loading():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É .env —Ñ–∞–π–ª–∞"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .env
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env
    load_dotenv()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    env_vars = {
        'USE_SUPABASE': os.getenv('USE_SUPABASE'),
        'SUPABASE_URL': os.getenv('SUPABASE_URL'),
        'SUPABASE_KEY': os.getenv('SUPABASE_KEY')
    }

    print(f"üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for key, value in env_vars.items():
        if value:
            if key == 'SUPABASE_KEY':
                # –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á
                masked = value[:20] + "..." if len(value) > 20 else value
                print(f"   ‚úÖ {key}: {masked}")
            else:
                print(f"   ‚úÖ {key}: {value}")
        else:
            print(f"   ‚ùå {key}: –ù–ï –ó–ê–î–ê–ù–û")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if not all([env_vars['USE_SUPABASE'] == 'True', env_vars['SUPABASE_URL'], env_vars['SUPABASE_KEY']]):
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–¥–∞–Ω—ã!")
        return False

    print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


def test_supabase_import():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç Supabase"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Supabase...")

    try:
        from supabase import create_client, Client
        print("‚úÖ Supabase SDK –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Supabase: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install supabase")
        return False


def test_supabase_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase"""
    print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")

    try:
        from supabase import create_client, Client

        url = os.getenv('SUPABASE_URL')
        key = os.getenv('SUPABASE_KEY')

        print(f"üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫: {url}")
        supabase: Client = create_client(url, key)

        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ reading_plans
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ reading_plans...")
        response = supabase.table('reading_plans').select(
            '*').limit(1).execute()

        if response.data:
            print(
                f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–Ω–æ–≤: {len(response.data)}")
            return True, supabase
        else:
            print("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ —Ç–∞–±–ª–∏—Ü–∞ reading_plans –ø—É—Å—Ç–∞")
            return True, supabase

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False, None


def test_tables_access(supabase):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–∞–º"""
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–∞–º...")

    tables_to_test = ['reading_plans', 'reading_plan_days']

    for table_name in tables_to_test:
        try:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É {table_name}...")
            response = supabase.table(table_name).select(
                '*').limit(5).execute()

            if response.data:
                print(
                    f"   ‚úÖ {table_name}: {len(response.data)} –∑–∞–ø–∏—Å–µ–π –Ω–∞–π–¥–µ–Ω–æ")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                if table_name == 'reading_plans':
                    for plan in response.data:
                        plan_id = plan.get('plan_id', 'unknown')
                        title = plan.get('title', 'unknown')
                        total_days = plan.get('total_days', 'unknown')
                        print(
                            f"      üìã {plan_id}: {title} ({total_days} –¥–Ω–µ–π)")

                elif table_name == 'reading_plan_days':
                    for day in response.data[:3]:
                        plan_id = day.get('plan_id', 'unknown')
                        day_num = day.get('day', 'unknown')
                        reading_text = day.get('reading_text', 'unknown')[:50]
                        print(
                            f"      üìñ {plan_id} –¥–µ–Ω—å {day_num}: {reading_text}...")
            else:
                print(f"   ‚ö†Ô∏è {table_name}: —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")

        except Exception as e:
            print(f"   ‚ùå {table_name}: –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - {e}")


def test_service_loading():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å"""
    print("\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ SupabaseReadingPlansService...")

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

        # –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        import logging
        logging.basicConfig(level=logging.DEBUG)
        logger = logging.getLogger('services.supabase_reading_plans')
        logger.setLevel(logging.DEBUG)

        from services.supabase_reading_plans import SupabaseReadingPlansService

        print("üì¶ –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞...")
        service = SupabaseReadingPlansService()

        print(f"üîß –°—Ç–∞—Ç—É—Å db_manager: {service.db_manager}")
        print(f"üîß –ü–ª–∞–Ω—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {service._plans_loaded}")
        print(f"üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {len(service.plans)}")

        print("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã —á–µ—Ä–µ–∑ –°–ò–ù–•–†–û–ù–ù–´–ô –º–µ—Ç–æ–¥...")

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        plans = service.get_all_plans_sync()

        print(f"üîß –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:")
        print(f"   - db_manager: {service.db_manager}")
        print(f"   - –ø–ª–∞–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {service._plans_loaded}")
        print(f"   - –ø–ª–∞–Ω–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {len(service.plans)}")
        print(f"   - –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –ø–ª–∞–Ω–æ–≤: {len(plans) if plans else 0}")

        if plans:
            print(f"‚úÖ –ß–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(plans)} –ø–ª–∞–Ω–æ–≤:")
            for plan in plans:
                title = plan.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω')
                total_days = plan.get('total_days', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                plan_id = plan.get('plan_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                print(f"   üìã {plan_id}: {title} ({total_days} –¥–Ω–µ–π)")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–π –ø–ª–∞–Ω–∞
            if plans:
                first_plan_id = plans[0].get('plan_id')
                print(f"\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–ª–∞–Ω–∞ {first_plan_id}...")
                days = service.get_plan_days_sync(first_plan_id)
                if days:
                    print(
                        f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(days)} –¥–Ω–µ–π –¥–ª—è –ø–ª–∞–Ω–∞ {first_plan_id}")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–Ω—è
                    for day in days[:3]:
                        day_num = day.get('day', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        reading = day.get('reading_text', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:50]
                        print(f"      üìñ –î–µ–Ω—å {day_num}: {reading}...")
                else:
                    print(f"‚ùå –î–Ω–∏ –¥–ª—è –ø–ª–∞–Ω–∞ {first_plan_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
        else:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω—ã")

            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å db_manager –≤—Ä—É—á–Ω—É—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print("\nüîß –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å db_manager –≤—Ä—É—á–Ω—É—é...")
            try:
                from database.universal_manager import universal_db_manager
                print(
                    f"‚úÖ universal_db_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {universal_db_manager}")

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã db_manager
                if hasattr(universal_db_manager, 'get_reading_plans'):
                    print("‚úÖ –ú–µ—Ç–æ–¥ get_reading_plans –Ω–∞–π–¥–µ–Ω")
                else:
                    print("‚ùå –ú–µ—Ç–æ–¥ get_reading_plans –ù–ï –Ω–∞–π–¥–µ–Ω")

                if hasattr(universal_db_manager, 'get_reading_plan_days'):
                    print("‚úÖ –ú–µ—Ç–æ–¥ get_reading_plan_days –Ω–∞–π–¥–µ–Ω")
                else:
                    print("‚ùå –ú–µ—Ç–æ–¥ get_reading_plan_days –ù–ï –Ω–∞–π–¥–µ–Ω")

            except ImportError as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å universal_db_manager: {e}")

            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE")
    print("=" * 60)

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ .env
    if not test_env_loading():
        print("\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å .env —Ñ–∞–π–ª–æ–º")
        return

    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
    if not test_supabase_import():
        print("\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–æ–º")
        return

    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_ok, supabase = test_supabase_connection()
    if not connection_ok:
        print("\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
        return

    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    test_tables_access(supabase)

    # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    test_service_loading()

    print("\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)


if __name__ == "__main__":
    main()
