#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü Telegram Stars –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import logging
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def setup_star_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è Telegram Stars –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from database.universal_manager import universal_db_manager as db_manager
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db_manager.initialize()
        
        # –ß–∏—Ç–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç
        with open('create_star_tables.sql', 'r', encoding='utf-8') as f:
            sql_script = f.read()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç
        if db_manager.is_supabase:
            # –î–ª—è Supabase –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç
            logger.info("üåü –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ Supabase...")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            sql_commands = [cmd.strip() for cmd in sql_script.split(';') if cmd.strip()]
            
            for i, command in enumerate(sql_commands):
                if command:
                    try:
                        logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É {i+1}/{len(sql_commands)}")
                        result = db_manager.manager.client.rpc('exec_sql', {'sql': command}).execute()
                        logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ {i+1} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): {e}")
                        
        elif db_manager.is_postgres:
            # –î–ª—è PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncpg
            logger.info("üêò –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å —Å–∫—Ä–∏–ø—Ç
            await db_manager.manager.execute_script(sql_script)
            
        else:
            # –î–ª—è SQLite –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç
            logger.info("üóÉÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ SQLite...")
            
            # –ó–∞–º–µ–Ω—è–µ–º PostgreSQL —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–∏–ø—ã –Ω–∞ SQLite
            sqlite_script = sql_script.replace('SERIAL PRIMARY KEY', 'INTEGER PRIMARY KEY AUTOINCREMENT')
            sqlite_script = sqlite_script.replace('BIGINT', 'INTEGER')
            sqlite_script = sqlite_script.replace('VARCHAR(255)', 'TEXT')
            sqlite_script = sqlite_script.replace('VARCHAR(50)', 'TEXT')
            sqlite_script = sqlite_script.replace('VARCHAR(20)', 'TEXT')
            sqlite_script = sqlite_script.replace('DECIMAL(10,2)', 'REAL')
            sqlite_script = sqlite_script.replace('TIMESTAMP', 'DATETIME')
            sqlite_script = sqlite_script.replace('CURRENT_TIMESTAMP', "datetime('now')")
            
            # –£–±–∏—Ä–∞–µ–º PostgreSQL —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            lines = sqlite_script.split('\n')
            filtered_lines = []
            skip_until_semicolon = False
            
            for line in lines:
                if 'CREATE OR REPLACE FUNCTION' in line or 'CREATE TRIGGER' in line:
                    skip_until_semicolon = True
                    continue
                if skip_until_semicolon:
                    if ';' in line:
                        skip_until_semicolon = False
                    continue
                if 'COMMENT ON' in line:
                    continue
                filtered_lines.append(line)
            
            sqlite_script = '\n'.join(filtered_lines)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
            db_manager.manager.execute_script(sqlite_script)
        
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –¥–ª—è Telegram Stars —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        await check_tables(db_manager)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        raise
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await db_manager.close()

async def check_tables(db_manager):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        
        tables_to_check = [
            'star_transactions',
            'premium_requests', 
            'premium_purchases',
            'donations'
        ]
        
        for table_name in tables_to_check:
            try:
                if db_manager.is_supabase:
                    # –î–ª—è Supabase –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ select
                    result = db_manager.manager.client.table(table_name).select('*').limit(1).execute()
                    logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                elif db_manager.is_postgres:
                    # –î–ª—è PostgreSQL –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ö–µ–º—É
                    query = """
                        SELECT table_name 
                        FROM information_schema.tables 
                        WHERE table_name = $1 AND table_schema = 'public'
                    """
                    result = await db_manager.manager.fetch_one(query, (table_name,))
                    if result:
                        logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    # –î–ª—è SQLite –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ sqlite_master
                    query = "SELECT name FROM sqlite_master WHERE type='table' AND name=?"
                    result = db_manager.manager.fetch_one(query, (table_name,))
                    if result:
                        logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É {table_name}: {e}")
        
        logger.info("üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")

if __name__ == "__main__":
    asyncio.run(setup_star_tables())