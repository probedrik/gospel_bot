#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ callback_data –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
"""
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_callback_filtering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ callback_data"""
    
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é callback_data...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ callback_data
    test_callbacks = [
        # –î–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è
        "donate_stars_1",
        "donate_stars_10", 
        "donate_stars_25",
        "donate_stars_50",
        "donate_stars_100",
        "buy_premium_stars_10",
        "buy_premium_stars_25",
        "buy_premium_stars_50",
        "buy_premium_stars_100",
        
        # –ù–ï –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è
        "donate_stars_menu",
        "buy_premium_stars",
        "donate_menu",
        "settings_donation"
    ]
    
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è...")
    
    for callback_data in test_callbacks:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
        starts_with_donate_stars = callback_data.startswith("donate_stars_")
        is_excluded = callback_data in ["donate_stars_menu"]
        should_process_donation = starts_with_donate_stars and not is_excluded
        
        if should_process_donation:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ
            amount_str = callback_data.replace("donate_stars_", "")
            if amount_str.isdigit():
                logger.info(f"   ‚úÖ {callback_data} ‚Üí –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ {amount_str} Stars")
            else:
                logger.error(f"   ‚ùå {callback_data} ‚Üí –Ω–µ —á–∏—Å–ª–æ: '{amount_str}'")
        elif starts_with_donate_stars:
            logger.info(f"   ‚ö™ {callback_data} ‚Üí –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π")
    
    logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã...")
    
    for callback_data in test_callbacks:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
        starts_with_premium = callback_data.startswith("buy_premium_stars_")
        is_excluded = callback_data in ["buy_premium_stars"]
        should_process_premium = starts_with_premium and not is_excluded
        
        if should_process_premium:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –ø–∞–∫–µ—Ç
            requests_str = callback_data.replace("buy_premium_stars_", "")
            from config.ai_settings import STAR_PREMIUM_PACKAGES
            if requests_str in STAR_PREMIUM_PACKAGES:
                logger.info(f"   ‚úÖ {callback_data} ‚Üí –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç {requests_str}")
            else:
                logger.error(f"   ‚ùå {callback_data} ‚Üí –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç: '{requests_str}'")
        elif starts_with_premium:
            logger.info(f"   ‚ö™ {callback_data} ‚Üí –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    logger.info("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_callback_filtering()