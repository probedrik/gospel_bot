"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–∫–ª–∞–¥–∫–∞–º–∏.
"""
import time
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from keyboards.main import create_bookmarks_keyboard, get_main_keyboard
from utils.api_client import bible_api
from utils.bible_data import bible_data
from utils.text_utils import split_text
from middleware.state import (
    get_bookmarks, clear_bookmarks, remove_bookmark
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫
router = Router()


@router.message(F.text == "üìù –ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏")
async def show_bookmarks(message: Message, state: FSMContext, db=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–ª–∞–¥–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    start_time = time.time()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
    from database.db_manager import db_manager

    db_bookmarks = []
    state_bookmarks = {}
    combined_bookmarks = []

    # 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ –ë–î
    try:
        logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        db_bookmarks = await db_manager.get_bookmarks(user_id)

        if db_bookmarks is None:
            logger.error("get_bookmarks –≤–µ—Ä–Ω—É–ª None –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞")
            db_bookmarks = []

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(db_bookmarks)} –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ –ë–î")

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(
            f"–¢–∏–ø –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ –ë–î: {type(db_bookmarks).__name__}, –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(db_bookmarks)}")
        if db_bookmarks:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–∫–ª–∞–¥–∫–∏
            for i, bm in enumerate(db_bookmarks[:3]):
                logger.info(f"–ó–∞–∫–ª–∞–¥–∫–∞ {i+1} –∏–∑ –ë–î: {bm}")
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ –ë–î: {e}", exc_info=True)
        db_bookmarks = []

    # 2. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    try:
        logger.info("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM")
        state_bookmarks = await get_bookmarks(state)

        if state_bookmarks is None:
            logger.error("get_bookmarks (state) –≤–µ—Ä–Ω—É–ª None –≤–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞—Ä—è")
            state_bookmarks = {}

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(state_bookmarks)} –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(
            f"–¢–∏–ø –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {type(state_bookmarks).__name__}, –ö–ª—é—á–µ–π: {len(state_bookmarks)}")
        if state_bookmarks:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–∫–ª–∞–¥–∫–∏
            for i, (key, value) in enumerate(list(state_bookmarks.items())[:3]):
                logger.info(
                    f"–ó–∞–∫–ª–∞–¥–∫–∞ {i+1} –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –∫–ª—é—á={key}, –∑–Ω–∞—á–µ–Ω–∏–µ={value}")
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}", exc_info=True)
        state_bookmarks = {}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –ë–î)
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ (book_id, chapter)
        unique_bookmarks = {}

        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ –ë–î
        for bookmark in db_bookmarks:
            try:
                if bookmark and len(bookmark) >= 3:
                    book_id, chapter, display_text = bookmark[0], bookmark[1], bookmark[2]

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                    if not (isinstance(book_id, int) and isinstance(chapter, int) and isinstance(display_text, str)):
                        logger.warning(
                            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–∫–ª–∞–¥–∫–µ –∏–∑ –ë–î: {bookmark}")
                        continue

                    key = f"{book_id}_{chapter}"
                    unique_bookmarks[key] = (book_id, chapter, display_text)
                else:
                    logger.warning(
                        f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ –ë–î: {bookmark}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ –ë–î: {e}")

        # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –ë–î)
        for key, data in state_bookmarks.items():
            try:
                if key not in unique_bookmarks and isinstance(data, dict):
                    book_id = data.get('book_id')
                    chapter = data.get('chapter')
                    display_text = data.get('display_text')

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                    if (book_id is not None and chapter is not None and display_text is not None and
                            isinstance(book_id, int) and isinstance(chapter, int) and isinstance(display_text, str)):

                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ - —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É –∑–∞–∫–ª–∞–¥–∫—É –≤ –ë–î, —Ä–∞–∑ –æ–Ω–∞ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                        try:
                            logger.info(
                                f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–ª–∞–¥–∫—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î: {book_id}_{chapter}")
                            await db_manager.add_user(user_id, message.from_user.username or "", message.from_user.first_name or "")
                            await db_manager.add_bookmark(user_id, book_id, chapter, display_text)
                            logger.info(
                                f"–ó–∞–∫–ª–∞–¥–∫–∞ {display_text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ show_bookmarks")
                        except Exception as add_e:
                            logger.error(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏ –≤ –ë–î: {add_e}")

                        unique_bookmarks[key] = (
                            book_id, chapter, display_text)
                    else:
                        logger.warning(
                            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–∫–ª–∞–¥–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
                elif not isinstance(data, dict):
                    logger.warning(
                        f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {data}")
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
        combined_bookmarks = list(unique_bookmarks.values())
        logger.info(
            f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(combined_bookmarks)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–æ–∫")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–æ–∫: {e}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        combined_bookmarks = []
        try:
            for key, data in state_bookmarks.items():
                if isinstance(data, dict):
                    book_id = data.get('book_id')
                    chapter = data.get('chapter')
                    display_text = data.get('display_text')
                    if book_id and chapter and display_text:
                        combined_bookmarks.append(
                            (book_id, chapter, display_text))
            logger.info(
                f"–ü–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {len(combined_bookmarks)} –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        except Exception as e2:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–ª–∞–¥–æ–∫: {e2}")

    # 4. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–∫–ª–∞–¥–∫–∏
    try:
        if combined_bookmarks:
            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–∫–ª–∞–¥–æ–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            logger.info(f"–§–æ—Ä–º–∞—Ç—ã –∑–∞–∫–ª–∞–¥–æ–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–∫–ª–∞–¥–∫–∏
            for i, bm in enumerate(combined_bookmarks[:3]):
                logger.info(f"–ó–∞–∫–ª–∞–¥–∫–∞ {i+1} –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {bm}")

            await message.answer(
                "–í–∞—à–∏ –∑–∞–∫–ª–∞–¥–∫–∏:",
                reply_markup=create_bookmarks_keyboard(combined_bookmarks)
            )
            elapsed = time.time() - start_time
            logger.info(
                f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ {len(combined_bookmarks)} –∑–∞–∫–ª–∞–¥–æ–∫ –∑–∞ {elapsed:.2f} —Å–µ–∫")
        else:
            logger.info("–ó–∞–∫–ª–∞–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –ë–î, –Ω–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–æ–∫. "
                "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É, –æ—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤—É –∫–Ω–∏–≥–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É'.",
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–æ–∫: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )


@router.message(Command("clear_bookmarks"))
async def clear_all_bookmarks(message: Message, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await clear_bookmarks(state)
    await message.answer("–í—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
