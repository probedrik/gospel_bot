"""
–ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–ª–∞–¥–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
"""
import logging
import math
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from database.universal_manager import universal_db_manager as db_manager
from keyboards.bookmarks import (
    create_bookmarks_menu_keyboard,
    create_bookmarks_list_keyboard,
    create_bookmark_action_keyboard
)
from utils.bible_data import bible_data

logger = logging.getLogger(__name__)
router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOOKMARKS_PER_PAGE = 16


@router.message(F.text == "üìù –ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏")
async def show_bookmarks_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–∫–ª–∞–¥–æ–∫"""
    keyboard = create_bookmarks_menu_keyboard()
    await message.answer(
        "üìù **–ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–ª–∞–¥–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "bookmarks_menu")
async def show_bookmarks_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–∫–ª–∞–¥–æ–∫ —á–µ—Ä–µ–∑ callback"""
    keyboard = create_bookmarks_menu_keyboard()
    await callback.message.edit_text(
        "üìù **–ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–ª–∞–¥–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "bookmarks_bible")
async def show_bible_bookmarks(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∏–±–ª–µ–π—Å–∫–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏"""
    await show_bookmarks_page(callback, "bible", 0)


@router.callback_query(F.data == "bookmarks_commentaries")
async def show_commentary_bookmarks(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã"""
    await show_bookmarks_page(callback, "commentaries", 0)


@router.callback_query(F.data.regexp(r'^bookmarks_page_(bible|commentaries)_(\d+)$'))
async def show_bookmarks_page_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–∫–ª–∞–¥–æ–∫"""
    import re
    match = re.match(
        r'^bookmarks_page_(bible|commentaries)_(\d+)$', callback.data)
    if match:
        bookmark_type = match.group(1)
        page = int(match.group(2))
        await show_bookmarks_page(callback, bookmark_type, page)


async def show_bookmarks_page(callback: CallbackQuery, bookmark_type: str, page: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–ª–∞–¥–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞

    Args:
        callback: Callback query
        bookmark_type: –¢–∏–ø –∑–∞–∫–ª–∞–¥–æ–∫ ("bible" –∏–ª–∏ "commentaries")
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
    """
    user_id = callback.from_user.id

    try:
        if bookmark_type == "bible":
            # –ü–æ–ª—É—á–∞–µ–º –±–∏–±–ª–µ–π—Å–∫–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏
            raw_bookmarks = await db_manager.get_bookmarks(user_id)
            bookmarks = []

            for bookmark in raw_bookmarks:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (—Å–ª–æ–≤–∞—Ä—å –¥–ª—è Supabase/PostgreSQL –∏–ª–∏ –∫–æ—Ä—Ç–µ–∂ –¥–ª—è SQLite)
                if isinstance(bookmark, dict):
                    # Supabase/PostgreSQL —Ñ–æ—Ä–º–∞—Ç - —Å–ª–æ–≤–∞—Ä—å
                    book_id = bookmark.get('book_id')
                    chapter_start = bookmark.get('chapter_start')
                    chapter_end = bookmark.get('chapter_end')
                    verse_start = bookmark.get('verse_start')
                    verse_end = bookmark.get('verse_end')
                    display_text = bookmark.get('display_text')
                    note = bookmark.get('note')
                    created_at = bookmark.get('created_at')
                else:
                    # SQLite —Ñ–æ—Ä–º–∞—Ç - –∫–æ—Ä—Ç–µ–∂
                    if len(bookmark) >= 8:  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å chapter_start, chapter_end
                        book_id, chapter_start, chapter_end, display_text, verse_start, verse_end, note, created_at = bookmark
                    else:  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        book_id, chapter_start, display_text = bookmark[:3]
                        chapter_end = verse_start = verse_end = note = created_at = None

                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
                book_name = bible_data.get_book_name_by_id(book_id)

                bookmarks.append({
                    'book_id': book_id,
                    'book_name': book_name,
                    'chapter_start': chapter_start,
                    'chapter_end': chapter_end,
                    'verse_start': verse_start,
                    'verse_end': verse_end,
                    'display_text': display_text,
                    'note': note,
                    'created_at': created_at
                })

            title = "üìñ **–ó–∞–∫–ª–∞–¥–∫–∏ –ë–∏–±–ª–∏–∏**"
            empty_message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–æ–∫ –ë–∏–±–ª–∏–∏.\\n\\n" \
                "–î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≥–ª–∞–≤ –∏ —Å—Ç–∏—Ö–æ–≤!"

        elif bookmark_type == "commentaries":
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã
            raw_commentaries = await db_manager.get_saved_commentaries(user_id)
            bookmarks = []

            for commentary in raw_commentaries:
                bookmarks.append({
                    'id': commentary.get('id'),
                    'reference_text': commentary.get('reference_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'commentary_text': commentary.get('commentary_text', ''),
                    'commentary_type': commentary.get('commentary_type', 'ai'),
                    'created_at': commentary.get('created_at')
                })

            title = "üí¨ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã**"
            empty_message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–æ–≤.\n\n" \
                "–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏!"

        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–∫–ª–∞–¥–æ–∫")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–ª–∞–¥–∫–∏
        if not bookmarks:
            keyboard = create_bookmarks_menu_keyboard()
            await callback.message.edit_text(
                f"{title}\n\n{empty_message}",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        total_bookmarks = len(bookmarks)
        total_pages = math.ceil(total_bookmarks / BOOKMARKS_PER_PAGE)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 0 or page >= total_pages:
            page = 0

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_index = page * BOOKMARKS_PER_PAGE
        end_index = min(start_index + BOOKMARKS_PER_PAGE, total_bookmarks)
        page_bookmarks = bookmarks[start_index:end_index]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_bookmarks_list_keyboard(
            page_bookmarks, page, bookmark_type, total_pages
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"{title}\n\n"
        if total_pages > 1:
            message_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n"
            message_text += f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(page_bookmarks)} –∏–∑ {total_bookmarks} –∑–∞–∫–ª–∞–¥–æ–∫\n\n"
        else:
            message_text += f"–í—Å–µ–≥–æ –∑–∞–∫–ª–∞–¥–æ–∫: {total_bookmarks}\n\n"

        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–ª–∞–¥–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:"

        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–∫–ª–∞–¥–æ–∫: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–ª–∞–¥–æ–∫")


@router.callback_query(F.data.regexp(r'^open_bookmark_(bible|commentaries)_(\d+)$'))
async def open_bookmark(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–∫–ª–∞–¥–∫—É"""
    import re
    match = re.match(
        r'^open_bookmark_(bible|commentaries)_(\d+)$', callback.data)
    if not match:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–∫–∏")
        return

    bookmark_type = match.group(1)
    bookmark_index = int(match.group(2))
    user_id = callback.from_user.id

    try:
        if bookmark_type == "bible":
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∏–±–ª–µ–π—Å–∫—É—é –∑–∞–∫–ª–∞–¥–∫—É
            await open_bible_bookmark(callback, state, bookmark_index)
        elif bookmark_type == "commentaries":
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä
            await open_commentary_bookmark(callback, state, bookmark_index)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏")


async def open_bible_bookmark(callback: CallbackQuery, state: FSMContext, bookmark_index: int):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∏–±–ª–µ–π—Å–∫—É—é –∑–∞–∫–ª–∞–¥–∫—É"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏ –∏ –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é
    raw_bookmarks = await db_manager.get_bookmarks(user_id)

    if bookmark_index >= len(raw_bookmarks):
        await callback.answer("–ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    bookmark = raw_bookmarks[bookmark_index]

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–ª–∞–¥–∫–∏
    if isinstance(bookmark, dict):
        # Supabase/PostgreSQL —Ñ–æ—Ä–º–∞—Ç - —Å–ª–æ–≤–∞—Ä—å
        book_id = bookmark.get('book_id')
        chapter_start = bookmark.get('chapter_start')
        chapter_end = bookmark.get('chapter_end')
        verse_start = bookmark.get('verse_start')
        verse_end = bookmark.get('verse_end')
        display_text = bookmark.get('display_text')
        note = bookmark.get('note')
    else:
        # SQLite —Ñ–æ—Ä–º–∞—Ç - –∫–æ—Ä—Ç–µ–∂
        if len(bookmark) >= 8:
            book_id, chapter_start, chapter_end, display_text, verse_start, verse_end, note, created_at = bookmark
        else:
            book_id, chapter_start, display_text = bookmark[:3]
            chapter_end = verse_start = verse_end = note = None

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
    book_name = bible_data.get_book_name_by_id(book_id)

    if chapter_end and chapter_end != chapter_start:
        reference = f"{book_name} {chapter_start}-{chapter_end}"
    elif verse_start and verse_end and verse_start != verse_end:
        reference = f"{book_name} {chapter_start}:{verse_start}-{verse_end}"
    elif verse_start:
        reference = f"{book_name} {chapter_start}:{verse_start}"
    else:
        reference = f"{book_name} {chapter_start}"

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫
    from handlers.verse_reference import get_verse_by_reference
    try:
        text, info = await get_verse_by_reference(state, reference)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        page = bookmark_index // BOOKMARKS_PER_PAGE
        keyboard = create_bookmark_action_keyboard(
            bookmark_index, "bible", page, bookmark_data=bookmark)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ñ–æ—Ä–º–∞—Ç, –∫–∞–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        message_text = f"üìñ <b>{reference}</b>\n\n{text}"
        if note:
            message_text += f"\n\nüìù <i>–ó–∞–º–µ—Ç–∫–∞:</i> {note}"

        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∏–±–ª–µ–π—Å–∫–æ–π –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–µ–∫—Å—Ç–∞")


async def open_commentary_bookmark(callback: CallbackQuery, state: FSMContext, bookmark_index: int):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –∏ –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π
    commentaries = await db_manager.get_saved_commentaries(user_id)

    if bookmark_index >= len(commentaries):
        await callback.answer("–†–∞–∑–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    commentary = commentaries[bookmark_index]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    page = bookmark_index // BOOKMARKS_PER_PAGE
    keyboard = create_bookmark_action_keyboard(
        bookmark_index, "commentaries", page)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    reference = commentary.get('reference_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    commentary_text = commentary.get('commentary_text', '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
    commentary_type = commentary.get('commentary_type', 'ai')

    type_name = "ü§ñ –ò–ò —Ä–∞–∑–±–æ—Ä" if commentary_type == "ai" else "üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ò–ò —Ä–∞–∑–±–æ—Ä–µ
    clean_text = commentary_text.replace(
        '\\n\\n', '\n').replace('\\n', '\n').strip()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ –∏ –≤ format_ai_or_commentary
    import html
    import re

    # –°–ù–ê–ß–ê–õ–ê –æ—á–∏—â–∞–µ–º –æ—Ç HTML —Ç–µ–≥–æ–≤
    cleaned_text = re.sub(r'<[^>]*>', '', clean_text)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML —Ç–µ–≥–∏

    # –ó–ê–¢–ï–ú –æ—á–∏—â–∞–µ–º –æ—Ç markdown —Å–∏–º–≤–æ–ª–æ–≤
    # **–∂–∏—Ä–Ω—ã–π** ‚Üí –∂–∏—Ä–Ω—ã–π
    cleaned_text = re.sub(r'\*\*([^*]+)\*\*', r'\1', cleaned_text)
    cleaned_text = re.sub(r'\*([^*]+)\*', r'\1',
                          cleaned_text)  # *–∫—É—Ä—Å–∏–≤* ‚Üí –∫—É—Ä—Å–∏–≤
    cleaned_text = re.sub(r'`([^`]+)`', r'\1', cleaned_text)  # `–∫–æ–¥` ‚Üí –∫–æ–¥

    cleaned_text = cleaned_text.strip()
    escaped_text = html.escape(cleaned_text)
    message_text = f"<b>{reference}</b>\n\n<b>{type_name}</b>\n\n<blockquote>{escaped_text}</blockquote>"

    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.regexp(r'^delete_bookmark_(bible|commentaries)_(\d+)$'))
async def delete_bookmark(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–∫–ª–∞–¥–∫—É"""
    import re
    match = re.match(
        r'^delete_bookmark_(bible|commentaries)_(\d+)$', callback.data)
    if not match:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–∫–∏")
        return

    bookmark_type = match.group(1)
    bookmark_index = int(match.group(2))
    user_id = callback.from_user.id

    try:
        if bookmark_type == "bible":
            # –£–¥–∞–ª—è–µ–º –±–∏–±–ª–µ–π—Å–∫—É—é –∑–∞–∫–ª–∞–¥–∫—É
            raw_bookmarks = await db_manager.get_bookmarks(user_id)
            if bookmark_index < len(raw_bookmarks):
                bookmark = raw_bookmarks[bookmark_index]

                if isinstance(bookmark, dict):
                    # Supabase/PostgreSQL —Ñ–æ—Ä–º–∞—Ç - —Å–ª–æ–≤–∞—Ä—å
                    book_id = bookmark.get('book_id')
                    chapter_start = bookmark.get('chapter_start')
                    chapter_end = bookmark.get('chapter_end')
                    verse_start = bookmark.get('verse_start')
                    verse_end = bookmark.get('verse_end')
                else:
                    # SQLite —Ñ–æ—Ä–º–∞—Ç - –∫–æ—Ä—Ç–µ–∂
                    book_id = bookmark[0]
                    chapter_start = bookmark[1]
                    chapter_end = bookmark[2] if len(bookmark) > 2 else None
                    verse_start = bookmark[4] if len(bookmark) > 4 else None
                    verse_end = bookmark[5] if len(bookmark) > 5 else None

                await db_manager.remove_bookmark(user_id, book_id, chapter_start, chapter_end, verse_start, verse_end)
                await callback.answer("‚úÖ –ó–∞–∫–ª–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
            else:
                await callback.answer("–ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        elif bookmark_type == "commentaries":
            # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä
            commentaries = await db_manager.get_saved_commentaries(user_id)
            if bookmark_index < len(commentaries):
                commentary = commentaries[bookmark_index]
                commentary_id = commentary.get('id')
                if commentary_id:
                    await db_manager.delete_saved_commentary(user_id, commentary_id=commentary_id)
                    await callback.answer("‚úÖ –†–∞–∑–±–æ—Ä —É–¥–∞–ª–µ–Ω")
                else:
                    await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID —Ä–∞–∑–±–æ—Ä–∞")
            else:
                await callback.answer("–†–∞–∑–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–ª–∞–¥–æ–∫
        page = bookmark_index // BOOKMARKS_PER_PAGE
        await show_bookmarks_page(callback, bookmark_type, page)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")


@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from keyboards.main import get_main_keyboard

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=await get_main_keyboard()
    )
    await callback.answer()
