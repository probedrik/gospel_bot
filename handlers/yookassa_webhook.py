"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –ÆKassa
"""
import logging
import json
import hashlib
import hmac
from typing import Dict, Any, Optional

from aiohttp import web
from aiohttp.web_request import Request
from aiohttp.web_response import Response

from database.universal_manager import universal_db_manager as db_manager
from services.premium_manager import PremiumManager
from config.ai_settings import YOOKASSA_WEBHOOK_SECRET

logger = logging.getLogger(__name__)


class YooKassaWebhookHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –ÆKassa"""

    def __init__(self):
        self.premium_manager = PremiumManager()

    def verify_signature(self, body: bytes, signature: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞"""
        if not YOOKASSA_WEBHOOK_SECRET:
            logger.warning(
                "‚ö†Ô∏è YOOKASSA_WEBHOOK_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏")
            return True

        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–¥–ø–∏—Å–∏: –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å {signature[:20]}...")
        logger.info(f"üîç –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: {len(body)} –±–∞–π—Ç")
        logger.info("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
        return True

        # TODO: –í–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
        # try:
        #     # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å
        #     expected_signature = hmac.new(
        #         YOOKASSA_WEBHOOK_SECRET.encode('utf-8'),
        #         body,
        #         hashlib.sha256
        #     ).hexdigest()
        #
        #     # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
        #     return hmac.compare_digest(signature, expected_signature)
        # except Exception as e:
        #     logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        #     return False

    async def handle_webhook(self, request: Request) -> Response:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –æ—Ç –ÆKassa"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            body = await request.read()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
            signature = request.headers.get('X-Yookassa-Signature', '')
            if not self.verify_signature(body, signature):
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞")
                return web.Response(status=400, text="Invalid signature")

            # –ü–∞—Ä—Å–∏–º JSON
            try:
                data = json.loads(body.decode('utf-8'))
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                return web.Response(status=400, text="Invalid JSON")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            event_type = data.get('event')
            payment_data = data.get('object', {})

            logger.info(
                f"üì® –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: {event_type}, –ø–ª–∞—Ç–µ–∂ {payment_data.get('id')}")

            if event_type == 'payment.succeeded':
                await self.handle_payment_succeeded(payment_data)
            elif event_type == 'payment.canceled':
                await self.handle_payment_canceled(payment_data)
            elif event_type == 'payment.waiting_for_capture':
                await self.handle_payment_waiting_for_capture(payment_data)
            else:
                logger.info(f"‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")

            return web.Response(status=200, text="OK")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
            return web.Response(status=500, text="Internal server error")

    async def handle_payment_succeeded(self, payment_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
        try:
            payment_id = payment_data.get('id')
            amount = float(payment_data.get('amount', {}).get('value', 0))
            metadata = payment_data.get('metadata', {})

            logger.info(f"üîç –û—Ç–ª–∞–¥–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}:")
            logger.info(f"   Amount: {amount}")
            logger.info(f"   Metadata: {metadata}")

            user_id = int(metadata.get('user_id', 0))
            payment_type = metadata.get('type', '')

            if not user_id:
                logger.error(
                    f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω user_id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
                logger.error(f"   –ü–æ–ª–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")
                return

            logger.info(
                f"üí∞ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ {payment_id}: {amount}‚ÇΩ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∏–ø: {payment_type}")

            if payment_type == 'premium_requests':
                await self.process_premium_payment(payment_id, user_id, metadata, amount)
            elif payment_type == 'donation':
                await self.process_donation_payment(payment_id, user_id, metadata, amount)
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞: {payment_type}")
                logger.error(
                    f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {list(metadata.keys())}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            import traceback
            traceback.print_exc()

    async def process_premium_payment(self, payment_id: str, user_id: int, metadata: Dict, amount: float):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã"""
        try:
            requests_count = int(metadata.get('requests_count', 0))

            if requests_count <= 0:
                logger.error(
                    f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {requests_count}")
                return

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if db_manager.is_supabase:
                # –î–ª—è Supabase - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã
                purchase_result = db_manager.manager.client.table('premium_purchases').insert({
                    'user_id': user_id,
                    'requests_count': requests_count,
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ integer –∫–∞–∫ –≤ —Å—Ö–µ–º–µ
                    'amount_rub': int(amount),
                    'amount_stars': 0,
                    'payment_method': 'ruble',
                    'payment_id': payment_id,
                    'payment_status': 'completed',
                    'completed_at': 'now()',
                    'telegram_payment_charge_id': None  # –î–ª—è –ÆKassa —ç—Ç–æ null
                }).execute()

                if purchase_result.data:
                    purchase_id = purchase_result.data[0]['id']

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await self.premium_manager.add_premium_requests(user_id, requests_count)

                    logger.info(
                        f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, {requests_count} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {amount}‚ÇΩ")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω)
                    await self.send_payment_notification(user_id, 'premium', {
                        'requests_count': requests_count,
                        'amount': amount,
                        'payment_id': payment_id
                    })
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ –≤ –ë–î")
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –ë–î
                logger.warning(
                    "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –Ω–µ-Supabase –ë–î –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã: {e}")
            import traceback
            traceback.print_exc()

    async def process_donation_payment(self, payment_id: str, user_id: int, metadata: Dict, amount: float):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂-–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ"""
        try:
            message = metadata.get('message', '')

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if db_manager.is_supabase:
                # –î–ª—è Supabase - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã
                donation_result = db_manager.manager.client.table('donations').insert({
                    'user_id': user_id,
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ integer –∫–∞–∫ –≤ —Å—Ö–µ–º–µ
                    'amount_rub': int(amount),
                    'amount_stars': 0,
                    'payment_method': 'ruble',
                    'payment_id': payment_id,
                    'payment_status': 'completed',
                    'message': message,
                    'completed_at': 'now()',
                    'telegram_payment_charge_id': None  # –î–ª—è –ÆKassa —ç—Ç–æ null
                }).execute()

                if donation_result.data:
                    donation_id = donation_result.data[0]['id']
                    logger.info(
                        f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, {amount}‚ÇΩ, ID {donation_id}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await self.send_payment_notification(user_id, 'donation', {
                        'amount': amount,
                        'payment_id': payment_id,
                        'message': message
                    })
                else:
                    logger.error(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–∏ –≤ –ë–î")
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –ë–î
                logger.warning(
                    "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –¥–ª—è –Ω–µ-Supabase –ë–î –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()

    async def handle_payment_canceled(self, payment_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
        payment_id = payment_data.get('id')
        metadata = payment_data.get('metadata', {})
        user_id = int(metadata.get('user_id', 0))

        logger.info(f"‚ùå –ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–º–µ–Ω–µ
        if user_id:
            await self.send_payment_notification(user_id, 'canceled', {
                'payment_id': payment_id
            })

    async def handle_payment_waiting_for_capture(self, payment_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂, –æ–∂–∏–¥–∞—é—â–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        payment_id = payment_data.get('id')
        logger.info(f"‚è≥ –ü–ª–∞—Ç–µ–∂ {payment_id} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

        # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å capture=True –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        # –ò–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–¥–µ—Å—å —á–µ—Ä–µ–∑ API

    async def send_payment_notification(self, user_id: int, notification_type: str, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(
                f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {notification_type} - {data}")

            # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis/RabbitMQ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ò–ª–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Bot API –µ—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ç–æ–º –∂–µ –ø—Ä–æ—Ü–µ—Å—Å–µ

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
webhook_handler = YooKassaWebhookHandler()


async def yookassa_webhook_endpoint(request: Request) -> Response:
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –ÆKassa"""
    return await webhook_handler.handle_webhook(request)
