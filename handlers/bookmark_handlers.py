"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from database.universal_manager import universal_db_manager as db_manager
from utils.bookmark_utils import parse_bookmark_callback, format_bookmark_reference
from utils.bible_data import bible_data

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data.regexp(r'^bookmark_(add|remove)_\d+_\d+_\d+_\d+(_\d+)?$'))
async def handle_bookmark_action(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–æ–∫
    
    –§–æ—Ä–º–∞—Ç callback_data: bookmark_{action}_{book_id}_{chapter_start}_{chapter_end}_{verse_start}_{verse_end}
    –≥–¥–µ 0 –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    """
    user_id = callback.from_user.id
    
    # –ü–∞—Ä—Å–∏–º callback_data
    bookmark_data = parse_bookmark_callback(callback.data)
    if not bookmark_data:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–∫–∏")
        return
    
    action = bookmark_data['action']
    book_id = bookmark_data['book_id']
    chapter_start = bookmark_data['chapter_start']
    chapter_end = bookmark_data['chapter_end']
    verse_start = bookmark_data['verse_start']
    verse_end = bookmark_data['verse_end']
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
        book_name = bible_data.get_book_name_by_id(book_id)
        if not book_name:
            await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é —Å—Å—ã–ª–∫—É
        display_text = format_bookmark_reference(
            book_name, chapter_start, chapter_end, verse_start, verse_end
        )
        
        if action == "add":
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª–∞–¥–∫—É
            success = await db_manager.add_bookmark(
                user_id=user_id,
                book_id=book_id,
                chapter_start=chapter_start,
                chapter_end=chapter_end,
                verse_start=verse_start,
                verse_end=verse_end,
                display_text=display_text
            )
            
            if success:
                await callback.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–ª–∞–¥–∫–∏: {display_text}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                await update_bookmark_button_in_message(
                    callback, book_id, chapter_start, chapter_end, 
                    verse_start, verse_end, is_bookmarked=True
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏")
        
        elif action == "remove":
            # –£–¥–∞–ª—è–µ–º –∑–∞–∫–ª–∞–¥–∫—É
            success = await db_manager.remove_bookmark(
                user_id, book_id, chapter_start, chapter_end, verse_start, verse_end
            )
            
            if success:
                await callback.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫: {display_text}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                await update_bookmark_button_in_message(
                    callback, book_id, chapter_start, chapter_end, 
                    verse_start, verse_end, is_bookmarked=False
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–ª–∞–¥–∫–∏")


async def update_bookmark_button_in_message(callback: CallbackQuery, book_id: int, 
                                          chapter_start: int, chapter_end: int = None,
                                          verse_start: int = None, verse_end: int = None,
                                          is_bookmarked: bool = False):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –∑–∞–∫–ª–∞–¥–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    
    Args:
        callback: CallbackQuery –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        book_id: ID –∫–Ω–∏–≥–∏
        chapter_start: –ù–∞—á–∞–ª—å–Ω–∞—è –≥–ª–∞–≤–∞
        chapter_end: –ö–æ–Ω–µ—á–Ω–∞—è –≥–ª–∞–≤–∞
        verse_start: –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∏—Ö
        verse_end: –ö–æ–Ω–µ—á–Ω—ã–π —Å—Ç–∏—Ö
        is_bookmarked: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏
    """
    try:
        from utils.bookmark_utils import create_bookmark_button
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        current_markup = callback.message.reply_markup
        if not current_markup or not current_markup.inline_keyboard:
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –∑–∞–∫–ª–∞–¥–∫–∏
        new_bookmark_button = create_bookmark_button(
            book_id, chapter_start, chapter_end, verse_start, verse_end, is_bookmarked
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        new_buttons = []
        for row in current_markup.inline_keyboard:
            new_row = []
            for button in row:
                if button.callback_data and button.callback_data.startswith("bookmark_"):
                    # –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫–ª–∞–¥–∫–∏
                    new_row.append(new_bookmark_button)
                else:
                    new_row.append(button)
            new_buttons.append(new_row)
        
        from aiogram.types import InlineKeyboardMarkup
        new_markup = InlineKeyboardMarkup(inline_keyboard=new_buttons)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_reply_markup(reply_markup=new_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")


async def check_if_bookmarked(user_id: int, book_id: int, chapter_start: int,
                             chapter_end: int = None, verse_start: int = None, 
                             verse_end: int = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —Å—Å—ã–ª–∫–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        book_id: ID –∫–Ω–∏–≥–∏
        chapter_start: –ù–∞—á–∞–ª—å–Ω–∞—è –≥–ª–∞–≤–∞
        chapter_end: –ö–æ–Ω–µ—á–Ω–∞—è –≥–ª–∞–≤–∞
        verse_start: –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∏—Ö
        verse_end: –ö–æ–Ω–µ—á–Ω—ã–π —Å—Ç–∏—Ö
    
    Returns:
        bool: True –µ—Å–ª–∏ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    try:
        return await db_manager.is_bookmarked(
            user_id, book_id, chapter_start, chapter_end, verse_start, verse_end
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
        return False