"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –±–∏–±–ª–µ–π—Å–∫–∏—Ö –æ—Ç—Ä—ã–≤–∫–æ–≤ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""
import logging
import re
import html
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from handlers.text_messages import ai_check_and_increment_db, format_ai_or_commentary
from utils.api_client import bible_api, ask_gpt_bible_verses
from utils.bible_data import bible_data
from utils.text_utils import split_text, get_verses_parse_mode
from database.universal_manager import universal_db_manager as db_manager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞
router = Router()


class AIAssistantStates(StatesGroup):
    waiting_for_problem = State()
    showing_verses = State()


@router.callback_query(F.data == "ai_assistant")
async def start_ai_assistant(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–±–æ—Ä–∞ —Å—Ç–∏—Ö–æ–≤ —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–æ–º"""
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ò–ò
    if not await ai_check_and_increment_db(user_id):
        from config.ai_settings import AI_DAILY_LIMIT
        await callback.answer(
            f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤ ({AI_DAILY_LIMIT}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.",
            show_alert=True
        )
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    await state.set_state(AIAssistantStates.waiting_for_problem)

    await callback.message.answer(
        "ü§ñ <b>–ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –±–∏–±–ª–µ–π—Å–∫–∏—Ö –æ—Ç—Ä—ã–≤–∫–æ–≤</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å. "
        "–ò–ò –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å 3-5 –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–∏–±–ª–µ–π—Å–∫–∏—Ö –æ—Ç—Ä—ã–≤–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å "
        "–≤ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–∏ –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–∏ —ç—Ç–∏—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ß—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É –∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ\n"
        "‚Ä¢ –ü–µ—Ä–µ–∂–∏–≤–∞—é —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö\n"
        "‚Ä¢ –ò—â—É —É—Ç–µ—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ—Ç–µ—Ä–∏\n"
        "‚Ä¢ –ù—É–∂–Ω–∞ –º—É–¥—Ä–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        parse_mode="HTML"
    )

    await callback.answer()


@router.message(AIAssistantStates.waiting_for_problem)
async def process_problem_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–∏—Ö–∏ —É –ò–ò"""
    user_id = message.from_user.id
    problem_text = message.text.strip()

    if len(problem_text) < 10:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return

    if len(problem_text) > 500:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∫—Ä–∞—Ç–∫–æ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–æ—Ç—É –ò–ò –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
    try:
        from services.ai_quota_manager import ai_quota_manager
        can_use_ai = await ai_quota_manager.check_and_increment_usage(user_id)

        if not can_use_ai:
            quota_info = await ai_quota_manager.get_user_quota_info(user_id)
            await message.answer(
                f"‚ùå **–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ò–ò –∏—Å—á–µ—Ä–ø–∞–Ω**\n\n"
                f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {quota_info['used_today']}/{quota_info['daily_limit']}\n"
                f"‚è∞ –ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑: {quota_info['hours_until_reset']} —á.\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–º–∞–º –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã!",
                parse_mode="Markdown"
            )
            await state.clear()
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–æ—Ç—ã –ò–ò: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç—ã –Ω–µ —É–¥–∞–ª–∞—Å—å

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer("üîÑ –ò–ò –ø–æ–¥–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–∏–±–ª–µ–π—Å–∫–∏–µ –æ—Ç—Ä—ã–≤–∫–∏...")

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–∏—Ö–∏ —É –ò–ò
        verses_response = await ask_gpt_bible_verses(problem_text)

        if not verses_response or verses_response.startswith("–ò–∑–≤–∏–Ω–∏—Ç–µ"):
            await loading_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑–¥–µ–ª—É '–¢–µ–º—ã'."
            )
            return

        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –ò–ò –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∏—Ö–∏
        verse_references = parse_ai_response(verses_response)

        if not verse_references:
            await loading_msg.edit_text(
                "‚ùå –ò–ò –Ω–µ —Å–º–æ–≥ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–∏—Ö–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑–¥–µ–ª—É '–¢–µ–º—ã'."
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å—Ç–∏—Ö–∏
        buttons = []
        for verse_ref in verse_references[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å—Ç–∏—Ö–æ–≤
            buttons.append([
                InlineKeyboardButton(
                    text=verse_ref,
                    callback_data=f"ai_verse_{verse_ref}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        buttons.append([
            InlineKeyboardButton(
                text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –ü—Ä–∏–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –∫ —Ç–æ–º—É –∂–µ —Å—Ç–∏–ª—é, —á—Ç–æ –∏ —Ä–∞–∑–±–æ—Ä –≥–ª–∞–≤—ã: —Ü–∏—Ç–∞—Ç–∞ + –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        import re as _re
        cleaned_ai_text = _re.sub(r'<[^>]*>', '', verses_response).strip()
        formatted_text, opts = format_ai_or_commentary(
            cleaned_ai_text,
            title="ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò"
        )

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–±—Ä–µ–∑–∫–∏ Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
        text_parts = list(split_text(formatted_text))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏: –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å ‚Äî —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for idx, part in enumerate(text_parts):
            is_last = idx == len(text_parts) - 1
            if idx == 0:
                await loading_msg.edit_text(
                    part,
                    parse_mode=opts.get("parse_mode", "HTML"),
                    reply_markup=keyboard if is_last else None
                )
            else:
                await message.answer(
                    part,
                    parse_mode=opts.get("parse_mode", "HTML"),
                    reply_markup=keyboard if is_last else None
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        await state.set_state(AIAssistantStates.showing_verses)
        await state.update_data(
            problem_text=problem_text,
            verse_references=verse_references,
            verses_message_text=formatted_text
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò: {e}", exc_info=True)
        await loading_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.callback_query(F.data.startswith("ai_verse_"))
async def show_ai_recommended_verse(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –ò–ò —Å—Ç–∏—Ö"""
    verse_ref = callback.data[len("ai_verse_"):]

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∏—Ö–∞
        from handlers.verse_reference import get_verse_by_reference
        text, _ = await get_verse_by_reference(state, verse_ref)

        if text.startswith("–û—à–∏–±–∫–∞"):
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–∏—Ö")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∏—Ö–∞
        parse_mode = get_verses_parse_mode()
        for part in split_text(text):
            await callback.message.answer(part, parse_mode=parse_mode)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        buttons = await create_ai_verse_buttons(verse_ref, callback.from_user.id, from_ai_assistant=True)

        if buttons:
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∏—Ö–∞: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∏—Ö–∞")


async def create_ai_verse_buttons(verse_ref: str, user_id: int, from_ai_assistant: bool = False) -> list:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å—Ç–∏—Ö–æ–º, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º –ò–ò"""
    buttons = []

    # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∏—Ö
    import re
    match = re.match(
        r"([–ê-–Ø–∞-—è—ë–Å0-9\s]+)\s(\d+)(?::(\d+)(?:-(\d+))?)?", verse_ref)
    if not match:
        return buttons

    book_raw = match.group(1).strip().lower()
    chapter = int(match.group(2))
    verse_start = match.group(3)
    verse_end = match.group(4) if match.group(4) else verse_start

    book_abbr = bible_data.normalize_book_name(book_raw)
    book_id = bible_data.get_book_id(book_abbr)

    if not book_id:
        return buttons

    # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∏—Ä–∏–Ω—ã
    action_row = []

    # –ö–Ω–æ–ø–∫–∞ "–†–∞–∑–±–æ—Ä –ò–ò"
    from config.ai_settings import ENABLE_GPT_EXPLAIN
    if ENABLE_GPT_EXPLAIN:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
        saved_commentary = None
        try:
            verse_start_num = int(verse_start) if verse_start else 0
            verse_end_num = int(verse_end) if verse_end else verse_start_num
            saved_commentary = await db_manager.get_saved_commentary(
                user_id, book_id, chapter, chapter, verse_start_num, verse_end_num, "ai"
            )
        except:
            pass

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        ai_text = "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–±–æ—Ä –ò–ò" if saved_commentary else "ü§ñ –†–∞–∑–±–æ—Ä –æ—Ç –ò–ò"

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è callback
        en_to_ru = {
            "Gen": "–ë—ã—Ç", "Exod": "–ò—Å—Ö", "Lev": "–õ–µ–≤", "Num": "–ß–∏—Å", "Deut": "–í—Ç–æ—Ä",
            "Josh": "–ù–∞–≤", "Judg": "–°—É–¥", "Ruth": "–†—É—Ñ", "1Sam": "1–¶–∞—Ä", "2Sam": "2–¶–∞—Ä",
            "1Kgs": "3–¶–∞—Ä", "2Kgs": "4–¶–∞—Ä", "1Chr": "1–ü–∞—Ä", "2Chr": "2–ü–∞—Ä", "Ezra": "–ï–∑–¥",
            "Neh": "–ù–µ–µ–º", "Esth": "–ï—Å—Ñ", "Job": "–ò–æ–≤", "Ps": "–ü—Å", "Prov": "–ü—Ä–∏—Ç",
            "Eccl": "–ï–∫–∫–ª", "Song": "–ü–µ—Å–Ω", "Isa": "–ò—Å", "Jer": "–ò–µ—Ä", "Lam": "–ü–ª–∞—á",
            "Ezek": "–ò–µ–∑", "Dan": "–î–∞–Ω", "Hos": "–û—Å", "Joel": "–ò–æ–∏–ª", "Amos": "–ê–º",
            "Obad": "–ê–≤–¥", "Jonah": "–ò–æ–Ω", "Mic": "–ú–∏—Ö", "Naum": "–ù–∞—É–º", "Hab": "–ê–≤–≤",
            "Zeph": "–°–æ—Ñ", "Hag": "–ê–≥–≥", "Zech": "–ó–∞—Ö", "Mal": "–ú–∞–ª", "Matt": "–ú—Ñ",
            "Mark": "–ú–∫", "Luke": "–õ–∫", "John": "–ò–Ω", "Acts": "–î–µ—è–Ω", "Jas": "–ò–∞–∫",
            "1Pet": "1–ü–µ—Ç", "2Pet": "2–ü–µ—Ç", "1John": "1–ò–Ω", "2John": "2–ò–Ω", "3John": "3–ò–Ω",
            "Jude": "–ò—É–¥", "Rom": "–†–∏–º", "1Cor": "1–ö–æ—Ä", "2Cor": "2–ö–æ—Ä", "G–∞–ª": "–ì–∞–ª",
            "Eph": "–ï—Ñ", "Phil": "–§–ª–ø", "Col": "–ö–æ–ª", "1Thess": "1–§–µ—Å", "2Thess": "2–§–µ—Å",
            "1Tim": "1–¢–∏–º", "2Tim": "2–¢–∏–º", "Titus": "–¢–∏—Ç", "Phlm": "–§–ª–º", "Heb": "–ï–≤—Ä",
            "Rev": "–û—Ç–∫—Ä"
        }

        en_book = None
        for en, ru in en_to_ru.items():
            if ru == book_abbr:
                en_book = en
                break

        if en_book:
            # –§–æ—Ä–º–∏—Ä—É–µ–º callback –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç–∏—Ö–æ–≤
            if verse_start and verse_end and verse_start != verse_end:
                verse_callback = f"{verse_start}-{verse_end}"
            else:
                verse_callback = verse_start if verse_start else "0"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–∞–∑–±–æ—Ä –ò–ò" –≤ —Ä—è–¥
            action_row.append(
                InlineKeyboardButton(
                    text=ai_text,
                    callback_data=f"gpt_explain_{en_book}_{chapter}_{verse_callback}"
                )
            )

    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –≤—Å—é –≥–ª–∞–≤—É" –≤ —Ç–æ–º –∂–µ —Ä—è–¥—É
    action_row.append(
        InlineKeyboardButton(
            text="üìñ –û—Ç–∫—Ä—ã—Ç—å –≤—Å—é –≥–ª–∞–≤—É",
            callback_data=f"open_chapter_{book_abbr}_{chapter}"
        )
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    if action_row:
        buttons.append(action_row)

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è —Å—Ç–∏—Ö–∞/–¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç–∏—Ö–æ–≤
    from utils.bookmark_utils import create_bookmark_button
    from handlers.bookmark_handlers import check_if_bookmarked

    verse_start_num = int(verse_start) if verse_start else None
    verse_end_num = int(
        verse_end) if verse_end and verse_end != verse_start else None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Å—Ç–∏—Ö –≤ –∑–∞–∫–ª–∞–¥–∫–∏
    is_bookmarked = await check_if_bookmarked(
        user_id, book_id, chapter, None, verse_start_num, verse_end_num
    )

    bookmark_button = create_bookmark_button(
        book_id=book_id,
        chapter_start=chapter,
        verse_start=verse_start_num,
        verse_end=verse_end_num,
        is_bookmarked=is_bookmarked
    )

    buttons.append([bookmark_button])

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    if from_ai_assistant:
        buttons.append([
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç—Ä—ã–≤–∫–∞–º",
                callback_data="back_to_ai_verses"
            )
        ])
    else:
        buttons.append([
            InlineKeyboardButton(
                text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )
        ])

    return buttons


@router.callback_query(F.data == "back_to_ai_verses")
async def back_to_ai_verses(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –æ—Ç—Ä—ã–≤–∫–æ–≤ –æ—Ç –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        problem_text = data.get('problem_text')
        verse_references = data.get('verse_references')
        verses_message_text = data.get('verses_message_text')

        if not verse_references:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç—Ä—ã–≤–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å—Ç–∏—Ö–∏ –∑–∞–Ω–æ–≤–æ
        buttons = []
        for verse_ref in verse_references[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å—Ç–∏—Ö–æ–≤
            buttons.append([
                InlineKeyboardButton(
                    text=verse_ref,
                    callback_data=f"ai_verse_{verse_ref}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        buttons.append([
            InlineKeyboardButton(
                text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            verses_message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –æ—Ç—Ä—ã–≤–∫–∞–º: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def parse_ai_response(response: str) -> list:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∏–±–ª–µ–π—Å–∫–∏–µ —Å—Ç–∏—Ö–∏ –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –∏ –æ–¥–∏–Ω–æ—á–Ω—ã–º–∏ —Å—Ç–∏—Ö–∞–º–∏. –ò—â–µ—Ç –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É,
    –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º ';', —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏.
    """
    if not response or response.startswith("–ò–∑–≤–∏–Ω–∏—Ç–µ"):
        return []

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: –∑–∞–º–µ–Ω—è–µ–º —Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∏–µ —Ç–∏—Ä–µ –Ω–∞ –æ–±—ã—á–Ω—ã–π –¥–µ—Ñ–∏—Å
    text = response.replace("\u2013", "-").replace("\u2014", "-")
    # –£–ø—Ä–æ—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    import re as _re
    text = _re.sub(r"\s+", " ", text)

    # –†–µ–≥—É–ª—è—Ä–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ/—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ (—Ä—É—Å), –ø—Ä–æ–±–µ–ª, –≥–ª–∞–≤–∞:—Å—Ç–∏—Ö[-—Å—Ç–∏—Ö]
    # –ü—Ä–∏–º–µ—Ä—ã: "–ú—Ñ 6:25-34", "–ü—Å 22:1-6", "–ò–∞–∫ 1:5", "–†–∏–º 8:28"
    # –î–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—á–∫—É –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è—Ö (–Ω–∞–ø—Ä. "–ò–Ω.") –∏ —Ä–∞–∑–Ω—ã–µ —Ç–∏—Ä–µ
    pattern = r"([–ê-–Ø–∞-—è–Å—ë0-9][–ê-–Ø–∞-—è–Å—ë0-9\.\s]{0,30})\s(\d+):(\d+)(?:[-](\d+))?"
    matches = _re.findall(pattern, text)

    candidates = []
    for book, chapter, verse_start, verse_end in matches:
        book_clean = _re.sub(r"\s+", " ", book).strip().rstrip('.')
        if verse_end:
            ref = f"{book_clean} {chapter}:{verse_start}-{verse_end}"
        else:
            ref = f"{book_clean} {chapter}:{verse_start}"
        candidates.append(ref)

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    seen = set()
    valid_refs = []
    for ref in candidates:
        if ref not in seen:
            seen.add(ref)
            valid_refs.append(ref)

    logger.info(
        f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(valid_refs)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {valid_refs}")
    return valid_refs
