"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from keyboards.settings import (
    create_settings_keyboard,
    create_admin_settings_keyboard,
    create_ai_limits_keyboard,
    create_button_management_keyboard,
    create_premium_ai_keyboard,
    create_donation_keyboard,
    create_admin_ai_limits_keyboard,
    create_free_premium_users_keyboard
)
from keyboards.main import create_translations_keyboard, get_main_keyboard
from database.universal_manager import universal_db_manager as db_manager
from config.settings import ADMIN_USER_ID
from config.ai_settings import PREMIUM_AI_PACKAGE_PRICE, PREMIUM_AI_PACKAGE_REQUESTS, AI_DAILY_LIMIT

logger = logging.getLogger(__name__)
router = Router()


# –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–±—Ä–∞–Ω


async def get_premium_info_text() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–µ"""
    from services.ai_settings_manager import ai_settings_manager

    daily_limit = await ai_settings_manager.get_daily_limit()
    premium_price = await ai_settings_manager.get_premium_price()
    premium_requests = await ai_settings_manager.get_premium_requests()

    return (
        "‚≠ê **–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∫ –ò–ò**\n\n"
        "üéØ **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?**\n"
        "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º—É –ò–ò –ø–æ–º–æ—â–Ω–∏–∫—É —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –°–≤—è—â–µ–Ω–Ω–æ–≥–æ –ü–∏—Å–∞–Ω–∏—è.\n\n"
        "üß† **–ü—Ä–µ–º–∏—É–º –ò–ò –ø–æ–º–æ—â–Ω–∏–∫:**\n"
        "‚Ä¢ –ë–æ–ª–µ–µ –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –ò–ò (Claude 3.5 Sonnet)\n"
        "‚Ä¢ –ì–ª—É–±–æ–∫–∏–π –±–æ–≥–æ—Å–ª–æ–≤—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
        "‚Ä¢ –ó–Ω–∞–Ω–∏–µ –¥—Ä–µ–≤–Ω–∏—Ö —è–∑—ã–∫–æ–≤ (–≥—Ä–µ—á–µ—Å–∫–∏–π, –µ–≤—Ä–µ–π—Å–∫–∏–π)\n"
        "‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤—è—Ç–æ–æ—Ç–µ—á–µ—Å–∫–∏–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\n\n"
        "üíé **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
        f"‚Ä¢ +{premium_requests} –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {premium_price}‚ÇΩ\n"
        "‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç (–Ω–µ—Å–≥–æ—Ä–∞–µ–º—ã–µ)\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –ù–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è —Å –æ–±—ã—á–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏\n"
        "‚Ä¢ **–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò!**\n\n"
        "üîÑ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
        f"1. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –ò–ò\n"
        f"2. –°–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞—Ç—è—Ç—Å—è –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã ({daily_limit} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–µ–º–∏—É–º –ò–ò)\n"
        "3. –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã\n"
        "4. –ü—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–≥–æ—Ä–∞—é—Ç\n\n"
        "üí≥ **–û–ø–ª–∞—Ç–∞:** –ÆKassa (–∫–∞—Ä—Ç–∞, –°–ë–ü, –∫–æ—à–µ–ª—å–∫–∏)"
    )


async def get_premium_detailed_info_text() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–µ"""
    from services.ai_settings_manager import ai_settings_manager

    daily_limit = await ai_settings_manager.get_daily_limit()
    premium_price = await ai_settings_manager.get_premium_price()
    premium_requests = await ai_settings_manager.get_premium_requests()
    total_requests = daily_limit + premium_requests

    return (
        "‚ÑπÔ∏è **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø**\n\n"
        "üß† **–î–≤–∞ —É—Ä–æ–≤–Ω—è –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞:**\n"
        "‚Ä¢ **–û–±—ã—á–Ω—ã–π –ò–ò:** –ö—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤), –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å\n"
        "‚Ä¢ **–ü—Ä–µ–º–∏—É–º –ò–ò:** –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤), –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å\n\n"
        "üéØ **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:**\n"
        f"‚Ä¢ **–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–µ–º–∏—É–º –ò–ò!**\n"
        f"‚Ä¢ –°–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞—Ç—è—Ç—Å—è –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã ({daily_limit} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–µ–º–∏—É–º –ò–ò)\n"
        "‚Ä¢ –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ü—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–≥–æ—Ä–∞—é—Ç\n\n"
        "üìà **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
        f"‚Ä¢ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {daily_limit} –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø—Ä–µ–º–∏—É–º –ò–ò)\n"
        f"‚Ä¢ –ü—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã: {premium_requests} (–ø—Ä–µ–º–∏—É–º –ò–ò)\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {total_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
        f"‚Ä¢ –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å: {daily_limit} + {premium_requests} (–µ—Å–ª–∏ –Ω–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏)\n\n"
        "‚≠ê **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–µ–º–∏—É–º –ò–ò:**\n"
        "‚Ä¢ –ë–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π –±–æ–≥–æ—Å–ª–æ–≤—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
        "‚Ä¢ –ó–Ω–∞–Ω–∏–µ –¥—Ä–µ–≤–Ω–∏—Ö —è–∑—ã–∫–æ–≤ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
        "‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤—è—Ç–æ–æ—Ç–µ—á–µ—Å–∫–∏–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–ø—Ä–∞–≤–∫–∏\n\n"
        f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {premium_price}‚ÇΩ –∑–∞ {premium_requests} –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa"
    )


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = await create_settings_keyboard(message.from_user.id)
    await message.answer(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    keyboard = await create_settings_keyboard(callback.from_user.id)
    await callback.message.edit_text(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "settings_translation")
async def settings_translation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    keyboard = create_translations_keyboard()
    await callback.message.edit_text(
        "üîÑ **–°–º–µ–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ë–∏–±–ª–∏–∏:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "settings_ai_limits")
async def settings_ai_limits(callback: CallbackQuery, state: FSMContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –ò–ò"""
    keyboard = create_ai_limits_keyboard()
    await callback.message.edit_text(
        "ü§ñ **–õ–∏–º–∏—Ç—ã –ò–ò**\n\n"
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "ai_limits_my")
async def show_my_ai_limits(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–æ—Ç–∞—Ö –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        from services.ai_quota_manager import ai_quota_manager
        quota_info = await ai_quota_manager.get_user_quota_info(user_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_icon = "üëë" if quota_info['is_admin'] else "üë§"
        user_type = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if quota_info['is_admin'] else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        premium_text = ""
        if quota_info.get('premium_requests', 0) > 0:
            premium_text = f"\n‚≠ê **–ü—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã:** {quota_info['premium_requests']}"

        total_available = quota_info.get(
            'total_available', quota_info['remaining'])

        message_text = (
            f"üìä **–í–∞—à–∏ –ª–∏–º–∏—Ç—ã –ò–ò**\n\n"
            f"{status_icon} **–¢–∏–ø:** {user_type}\n"
            f"üóìÔ∏è **–°–µ–≥–æ–¥–Ω—è ({quota_info['date']}):**\n"
            f"‚Ä¢ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {quota_info['daily_limit']} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {quota_info['used_today']}\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {quota_info['remaining']}{premium_text}\n"
            f"‚Ä¢ **–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {total_available}**\n\n"
            f"‚è∞ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** —á–µ—Ä–µ–∑ {quota_info['hours_until_reset']} —á.\n"
            f"üîÑ –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –≤ 00:00 UTC\n"
            f"‚≠ê –ü—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
        if not quota_info['can_use_ai'] and not quota_info['is_admin']:
            message_text += f"\n\n‚ö†Ô∏è **–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!** –ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ {quota_info['hours_until_reset']} —á."

        keyboard = create_ai_limits_keyboard()
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –ò–ò: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö")


@router.callback_query(F.data == "ai_limits_info")
async def show_ai_limits_info(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏–º–∏—Ç—ã"""
    from services.ai_quota_manager import ai_quota_manager, DEFAULT_DAILY_LIMIT, ADMIN_DAILY_LIMIT, QUOTA_RESET_HOUR

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–≤–æ—Ç
    stats = await ai_quota_manager.get_quota_stats()

    message_text = (
        "‚ÑπÔ∏è **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏–º–∏—Ç—ã –ò–ò**\n\n"
        "üéØ **–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å–æ–º:**\n"
        "‚Ä¢ –†–∞–∑–±–æ—Ä —Å—Ç–∏—Ö–∞ –∏–ª–∏ –≥–ª–∞–≤—ã –ò–ò\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –±–∏–±–ª–µ–π—Å–∫–æ–π —Ç–µ–º—ã\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞\n\n"
        "‚è∞ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:**\n"
        f"‚Ä¢ –õ–∏–º–∏—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –≤ {QUOTA_RESET_HOUR:02d}:00 UTC\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        f"‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'üü¢ –∞–∫—Ç–∏–≤–µ–Ω' if stats.get('scheduler_running') else 'üî¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
        "üìà **–î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã:**\n"
        f"‚Ä¢ –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {DEFAULT_DAILY_LIMIT} –∑–∞–ø—Ä–æ—Å–∞\n"
        f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_DAILY_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
        "üí° **–°–æ–≤–µ—Ç—ã:**\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ä–∞–∑–±–æ—Ä—ã –≤ –∑–∞–∫–ª–∞–¥–∫–∏\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–º–∞–º\n"
        "‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞—Ä–∞–Ω–µ–µ"
    )

    keyboard = create_ai_limits_keyboard()
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "settings_help")
async def settings_help(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å"""
    help_text = (
        "‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**\n\n"
        "üìñ **–ß—Ç–µ–Ω–∏–µ –ë–∏–±–ª–∏–∏:**\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É ‚Üí –≥–ª–∞–≤—É ‚Üí —á–∏—Ç–∞–π—Ç–µ\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É: '–ò–Ω 3:16' –∏–ª–∏ '–ë—ã—Ç 1-3'\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω—ã: '–ú—Ñ 5:3-12'\n\n"
        "ü§ñ **–ò–ò –ø–æ–º–æ—â–Ω–∏–∫:**\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–†–∞–∑–±–æ—Ä –æ—Ç –ò–ò' –ø–æ–¥ —Å—Ç–∏—Ö–æ–º\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
        "üìù **–ó–∞–∫–ª–∞–¥–∫–∏:**\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ª—é–±—ã–µ —Å—Ç–∏—Ö–∏ –∏ –≥–ª–∞–≤—ã\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–∫–ª–∞–¥–∫–∞–º\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã\n\n"
        "üìö **–ü–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è:**\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –Ω–∞ –≥–æ–¥ –∏–ª–∏ –º–µ—Å—è—Ü\n"
        "‚Ä¢ –û—Ç–º–µ—á–∞–π—Ç–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n\n"
        "üéØ **–¢–µ–º—ã:**\n"
        "‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ –±–∏–±–ª–µ–π—Å–∫–∏–µ —Ç–µ–º—ã\n"
        "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç–µ —Å—Ç–∏—Ö–∏ –ø–æ —Ç–µ–º–∞–º\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–∞–∑–±–æ—Ä—ã –æ—Ç –ò–ò\n\n"
        "üí¨ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @your_support_username"
    )

    keyboard = await create_settings_keyboard(callback.from_user.id)
    await callback.message.edit_text(
        help_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


# –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
@router.callback_query(F.data == "settings_admin")
async def settings_admin(callback: CallbackQuery, state: FSMContext):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
        return

    keyboard = create_admin_settings_keyboard()
    await callback.message.edit_text(
        "üëë **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    keyboard = create_admin_settings_keyboard()
    await callback.message.edit_text(
        "üëë **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_buttons")
async def admin_buttons(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    keyboard = create_button_management_keyboard()
    await callback.message.edit_text(
        "üéõÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏**\n\n"
        "–í–∫–ª—é—á–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:\n"
        "‚úÖ - –∫–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞\n"
        "‚ùå - –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = (
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
        "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        "‚Ä¢ –í—Å–µ–≥–æ: 150\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: 25\n"
        "‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: 12\n\n"
        "ü§ñ **–ò–ò –∑–∞–ø—Ä–æ—Å—ã:**\n"
        "‚Ä¢ –°–µ–≥–æ–¥–Ω—è: 45\n"
        "‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: 320\n"
        "‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: 1,250\n\n"
        "üìù **–ó–∞–∫–ª–∞–¥–∫–∏:**\n"
        "‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: 890\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: 750\n\n"
        "üìö **–ü–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è:**\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: 35\n"
        "‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: 8"
    )

    keyboard = create_admin_settings_keyboard()
    await callback.message.edit_text(
        stats_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_ai_settings")
async def admin_ai_settings(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    ai_settings_text = (
        "ü§ñ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò**\n\n"
        "‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        "‚Ä¢ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –ú–æ–¥–µ–ª—å: GPT-3.5-turbo\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: 1000\n"
        "‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 0.7\n\n"
        "üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
        "‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: 45\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: 250 —Ç–æ–∫–µ–Ω–æ–≤\n"
        "‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: 98%\n\n"
        "üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:**\n"
        "‚Ä¢ –°–µ–≥–æ–¥–Ω—è: $2.15\n"
        "‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: $65.40"
    )

    keyboard = create_admin_settings_keyboard()
    await callback.message.edit_text(
        ai_settings_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


# –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∫ –ò–ò
@router.callback_query(F.data == "ai_premium_access")
async def ai_premium_access(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–µ –∫ –ò–ò"""
    keyboard = create_premium_ai_keyboard()
    premium_text = await get_premium_info_text()

    await callback.message.edit_text(
        premium_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "buy_premium_ai_50")
async def buy_premium_ai_50(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫—É–ø–∫–∞ 50 –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤"""
    # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ÆKassa
    await callback.answer(
        "üí≥ –û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        show_alert=True
    )


@router.callback_query(F.data == "my_premium_requests")
async def my_premium_requests(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
    from services.premium_manager import premium_manager
    stats = await premium_manager.get_user_premium_stats(user_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏
    first_purchase = ""
    if stats['created_at']:
        first_purchase = f"\nüìÖ **–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞:** {stats['created_at'].strftime('%d.%m.%Y')}"

    text = (
        f"üìä **–í–∞—à–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã**\n\n"
        f"‚≠ê **–î–æ—Å—Ç—É–ø–Ω–æ:** {stats['available']} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        f"üìà **–í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ:** {stats['total_purchased']}\n"
        f"üìâ **–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {stats['total_used']}{first_purchase}\n\n"
        f"‚ÑπÔ∏è **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
        f"‚Ä¢ –ù–µ —Å–≥–æ—Ä–∞—é—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ—Å–ª–µ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤\n"
        f"‚Ä¢ –ù–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ\n\n"
        f"üí° **–°–æ–≤ÔøΩÔøΩ—Ç:** –ü–æ–∫—É–ø–∞–π—Ç–µ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫—É!"
    )

    keyboard = create_premium_ai_keyboard()
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "premium_ai_info")
async def premium_ai_info(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–µ"""
    info_text = await get_premium_detailed_info_text()

    keyboard = create_premium_ai_keyboard()
    await callback.message.edit_text(
        info_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


# –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data == "settings_donation")
async def settings_donation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π"""
    keyboard = create_donation_keyboard()

    donation_text = (
        "ü™ô **–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ**\n\n"
        "üíù **–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç!**\n"
        "–í–∞—à–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
        "üéØ **–ù–∞ —á—Ç–æ –∏–¥—É—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞:**\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ —Ö–æ—Å—Ç–∏–Ω–≥–∞\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ API –±–∏–±–ª–µ–π—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "üôè **–õ—é–±–∞—è —Å—É–º–º–∞ –≤–∞–∂–Ω–∞!**\n"
        "–î–∞–∂–µ –Ω–µ–±–æ–ª—å—à–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.\n\n"
        "üí≥ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:** –ÆKassa (–∫–∞—Ä—Ç–∞, –°–ë–ü, –∫–æ—à–µ–ª—å–∫–∏)"
    )

    await callback.message.edit_text(
        donation_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("donate_") & ~F.data.in_(["donate_stars_menu"]))
async def process_donation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É–±–ª–µ–≤—ã—Ö –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π (–∏—Å–∫–ª—é—á–∞—è Stars)"""
    amount = callback.data.split("_")[1]

    if amount == "custom":
        # TODO: –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ —Å—É–º–º—ã
        await callback.answer(
            "üí∞ –í–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é —Å—É–º–º—É.",
            show_alert=True
        )
        return

    # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ÆKassa
    await callback.answer(
        f"üí≥ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ {amount}‚ÇΩ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        show_alert=True
    )


@router.callback_query(F.data == "donate_stars_menu")
async def show_stars_donation_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π Telegram Stars"""
    import logging
    logger = logging.getLogger(__name__)
    logger.info(
        f"üåü –£–°–ü–ï–®–ù–û: –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é Stars –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

    from keyboards.settings import create_stars_donation_keyboard

    stars_text = (
        "‚≠ê **–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars**\n\n"
        "üåü **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Telegram Stars:**\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø—Ä—è–º–æ –≤ Telegram\n"
        "‚Ä¢ –ù–µ –Ω—É–∂–Ω—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã\n"
        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤\n"
        "‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n\n"
        "üí´ **–ß—Ç–æ —Ç–∞–∫–æ–µ Stars?**\n"
        "Telegram Stars - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ Telegram –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        "üéØ **–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:**"
    )

    keyboard = create_stars_donation_keyboard()

    await callback.message.edit_text(
        stars_text,
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "donation_info")
async def donation_info(callback: CallbackQuery, state: FSMContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è—Ö"""
    info_text = (
        "‚ÑπÔ∏è **–û –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è—Ö**\n\n"
        "üéØ **–¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞:**\n"
        "–°–æ–∑–¥–∞—Ç—å –ª—É—á—à–µ–≥–æ –±–∏–±–ª–µ–π—Å–∫–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ —Å –ò–ò –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –°–≤—è—â–µ–Ω–Ω–æ–≥–æ –ü–∏—Å–∞–Ω–∏—è.\n\n"
        "üí∞ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**\n"
        "‚Ä¢ üåü **Telegram Stars** - –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ\n"
        "‚Ä¢ üí≥ **–ÆKassa** - –∫–∞—Ä—Ç—ã, –°–ë–ü, –∫–æ—à–µ–ª—å–∫–∏\n\n"
        "üí∞ **–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:**\n"
        "‚Ä¢ –í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–¥—É—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n"
        "‚Ä¢ –ù–∏–∫–∞–∫–æ–π –ª–∏—á–Ω–æ–π –≤—ã–≥–æ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\n"
        "‚Ä¢ –û—Ç—á–µ—Ç—ã –æ —Ç—Ä–∞—Ç–∞—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É\n\n"
        "üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞—â–∏—â–µ–Ω—ã\n"
        "‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ Stars\n\n"
        "üôè **–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å:**\n"
        "–ö–∞–∂–¥–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –¥—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n"
        "üìß **–°–≤—è–∑—å:** –í–æ–ø—Ä–æ—Å—ã –æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è—Ö –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ /feedback"
    )

    keyboard = create_donation_keyboard()
    await callback.message.edit_text(
        info_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Stars –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ handlers/payments.py


@router.callback_query(F.data == "buy_premium_stars")
async def show_premium_stars_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º–∞ –∑–∞ Stars"""
    from keyboards.settings import create_premium_stars_keyboard

    premium_stars_text = (
        "üåü **–ü—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã –∑–∞ Telegram Stars**\n\n"
        "‚≠ê **–ü–∞–∫–µ—Ç—ã –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
        "‚Ä¢ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ = 25 Stars (2.5 Stars –∑–∞ –∑–∞–ø—Ä–æ—Å)\n"
        "‚Ä¢ 25 –∑–∞–ø—Ä–æ—Å–æ–≤ = 50 Stars (2.0 Stars –∑–∞ –∑–∞–ø—Ä–æ—Å)\n"
        "‚Ä¢ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ = 100 Stars (2.0 Stars –∑–∞ –∑–∞–ø—Ä–æ—Å)\n"
        "‚Ä¢ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ = 180 Stars (1.8 Stars –∑–∞ –∑–∞–ø—Ä–æ—Å) üíé\n\n"
        "üéØ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –±–æ–ª—å—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤:**\n"
        "‚Ä¢ –ë–æ–ª—å—à–µ –≤—ã–≥–æ–¥–∞ –∑–∞ –∑–∞–ø—Ä–æ—Å\n"
        "‚Ä¢ –£–¥–æ–±–Ω–µ–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç\n\n"
        "üí´ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:**"
    )

    keyboard = create_premium_stars_keyboard()

    await callback.message.edit_text(
        premium_stars_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ premium_stars_ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ handlers/payments.py


# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ò–ò
@router.callback_query(F.data == "admin_ai_limits")
async def admin_ai_limits(callback: CallbackQuery, state: FSMContext):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏ –ò–ò"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    from services.ai_settings_manager import ai_settings_manager

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    daily_limit = await ai_settings_manager.get_daily_limit()
    premium_price = await ai_settings_manager.get_premium_price()
    premium_requests = await ai_settings_manager.get_premium_requests()
    admin_premium_mode = await ai_settings_manager.get_admin_premium_mode()
    free_premium_users = await ai_settings_manager.get_free_premium_users()

    admin_mode_text = "–ü—Ä–µ–º–∏—É–º –ò–ò" if admin_premium_mode else "–û–±—ã—á–Ω—ã–π –ò–ò"
    free_users_count = len(free_premium_users)

    text = (
        "‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏ –ò–ò**\n\n"
        "üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        f"‚Ä¢ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {daily_limit} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        f"‚Ä¢ –¶–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞: {premium_price}‚ÇΩ\n"
        f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ: {premium_requests}\n"
        f"‚Ä¢ –†–µ–∂–∏–º –ò–ò –¥–ª—è –∞–¥–º–∏–Ω–∞: {admin_mode_text}\n"
        f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø: {free_users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "üí° **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:**\n"
        "–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò."
    )

    keyboard = create_admin_ai_limits_keyboard()
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_change_daily_limit")
async def admin_change_daily_limit(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ò–ò"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.set_state("waiting_daily_limit")
    await callback.message.edit_text(
        "üìä **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ò–ò**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 3, 5, 10)\n\n"
        "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_change_package_price")
async def admin_change_package_price(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.set_state("waiting_package_price")
    await callback.message.edit_text(
        "üí∞ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 50, 100, 150)\n\n"
        "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_change_package_size")
async def admin_change_package_size(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.set_state("waiting_package_size")
    await callback.message.edit_text(
        "üì¶ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–µ:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 25, 50, 100)\n\n"
        "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_reset_ai_settings")
async def admin_reset_ai_settings(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    from services.ai_settings_manager import ai_settings_manager

    success = await ai_settings_manager.reset_to_defaults()

    if success:
        await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º", show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await admin_ai_limits(callback, state)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
@router.message(lambda message: message.text and not message.text.startswith('/'))
async def process_admin_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if message.from_user.id != ADMIN_USER_ID:
        return

    current_state = await state.get_state()

    if current_state == "waiting_daily_limit":
        try:
            new_limit = int(message.text.strip())
            if new_limit < 1 or new_limit > 100:
                await message.answer("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
                return

            from services.ai_settings_manager import ai_settings_manager
            success = await ai_settings_manager.set_setting('ai_daily_limit', new_limit)

            if success:
                await message.answer(f"‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_limit} –∑–∞–ø—Ä–æ—Å–æ–≤")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞")

            await state.clear()

        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    elif current_state == "waiting_package_price":
        try:
            new_price = int(message.text.strip())
            if new_price < 10 or new_price > 10000:
                await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 10000 —Ä—É–±–ª–µ–π")
                return

            from services.ai_settings_manager import ai_settings_manager
            success = await ai_settings_manager.set_setting('premium_package_price', new_price)

            if success:
                await message.answer(f"‚úÖ –¶–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price}‚ÇΩ")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã")

            await state.clear()

        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    elif current_state == "waiting_package_size":
        try:
            new_size = int(message.text.strip())
            if new_size < 1 or new_size > 1000:
                await message.answer("‚ùå –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤")
                return

            from services.ai_settings_manager import ai_settings_manager
            success = await ai_settings_manager.set_setting('premium_package_requests', new_size)

            if success:
                await message.answer(f"‚úÖ –†–∞–∑–º–µ—Ä –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_size} –∑–∞–ø—Ä–æ—Å–æ–≤")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–∫–µ—Ç–∞")

            await state.clear()

        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.callback_query(F.data == "admin_toggle_ai_mode")
async def admin_toggle_ai_mode(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ò–ò –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    from services.ai_settings_manager import ai_settings_manager

    current_mode = await ai_settings_manager.get_admin_premium_mode()
    new_mode = not current_mode

    success = await ai_settings_manager.set_admin_premium_mode(new_mode)

    if success:
        mode_text = "–ø—Ä–µ–º–∏—É–º –ò–ò" if new_mode else "–æ–±—ã—á–Ω—ã–π –ò–ò"
        await callback.answer(f"‚úÖ –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {mode_text}", show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await admin_ai_limits(callback, state)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞", show_alert=True)


@router.callback_query(F.data == "toggle_button_calendar")
async def toggle_calendar_button(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    from services.ai_settings_manager import ai_settings_manager

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_enabled = await ai_settings_manager.is_calendar_enabled()
    new_enabled = not current_enabled

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º
    success = await ai_settings_manager.set_calendar_enabled(new_enabled)

    if success:
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        await callback.answer(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è {status}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏
    await admin_buttons(callback, state)


@router.callback_query(F.data == "admin_free_premium_users")
async def admin_free_premium_users(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    from services.ai_settings_manager import ai_settings_manager

    free_users = await ai_settings_manager.get_free_premium_users()
    users_count = len(free_users)

    text = (
        "üë• **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø**\n\n"
        f"üìä **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º: {users_count}\n\n"
        "‚ÑπÔ∏è **–ß—Ç–æ —ç—Ç–æ –¥–∞–µ—Ç:**\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –ò–ò –≤ —Ä–∞–º–∫–∞—Ö –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤\n"
        "‚Ä¢ –ù–µ —Ç—Ä–∞—Ç—è—Ç—Å—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ - –¥–æ—Å—Ç—É–ø –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è\n\n"
        "‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**\n"
        "–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö Telegram ID"
    )

    keyboard = create_free_premium_users_keyboard()
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_add_free_premium_user")
async def admin_add_free_premium_user(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–µ–º–∏—É–º"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.set_state("waiting_add_free_premium_user")
    await callback.message.edit_text(
        "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–µ–º–∏—É–º**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n\n"
        "üí° **–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID:**\n"
        "‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start\n"
        "‚Ä¢ ID –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤ –ª–æ–≥–∞—Ö –±–æ—Ç–∞\n"
        "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @userinfobot\n\n"
        "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_remove_free_premium_user")
async def admin_remove_free_premium_user(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.set_state("waiting_remove_free_premium_user")
    await callback.message.edit_text(
        "‚ûñ **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n\n"
        "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_show_free_premium_users")
async def admin_show_free_premium_users(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    from services.ai_settings_manager import ai_settings_manager

    free_users = await ai_settings_manager.get_free_premium_users()

    if free_users:
        users_list = "\n".join(
            [f"‚Ä¢ {user_id}" for user_id in sorted(free_users)])
        text = (
            "üìã **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–æ–º**\n\n"
            f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(free_users)}\n\n"
            f"**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n{users_list}"
        )
    else:
        text = (
            "üìã **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–æ–º**\n\n"
            "üë• **–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç**\n\n"
            "–ü–æ–∫–∞ –Ω–∏–∫–æ–º—É –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –ò–ò."
        )

    keyboard = create_free_premium_users_keyboard()
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.message(lambda message: message.text and not message.text.startswith('/'))
async def process_admin_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if message.from_user.id != ADMIN_USER_ID:
        return

    current_state = await state.get_state()

    if current_state == "waiting_daily_limit":
        try:
            new_limit = int(message.text.strip())
            if new_limit < 1 or new_limit > 100:
                await message.answer("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
                return

            from services.ai_settings_manager import ai_settings_manager
            success = await ai_settings_manager.set_setting('ai_daily_limit', new_limit)

            if success:
                await message.answer(f"‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_limit} –∑–∞–ø—Ä–æ—Å–æ–≤")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞")

            await state.clear()

        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    elif current_state == "waiting_package_price":
        try:
            new_price = int(message.text.strip())
            if new_price < 10 or new_price > 10000:
                await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 10000 —Ä—É–±–ª–µ–π")
                return

            from services.ai_settings_manager import ai_settings_manager
            success = await ai_settings_manager.set_setting('premium_package_price', new_price)

            if success:
                await message.answer(f"‚úÖ –¶–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price}‚ÇΩ")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã")

            await state.clear()

        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    elif current_state == "waiting_package_size":
        try:
            new_size = int(message.text.strip())
            if new_size < 1 or new_size > 1000:
                await message.answer("‚ùå –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤")
                return

            from services.ai_settings_manager import ai_settings_manager
            success = await ai_settings_manager.set_setting('premium_package_requests', new_size)

            if success:
                await message.answer(f"‚úÖ –†–∞–∑–º–µ—Ä –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_size} –∑–∞–ø—Ä–æ—Å–æ–≤")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–∫–µ—Ç–∞")

            await state.clear()

        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

    elif current_state == "waiting_add_free_premium_user":
        try:
            user_id = int(message.text.strip())
            if user_id <= 0:
                await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return

            from services.ai_settings_manager import ai_settings_manager
            success = await ai_settings_manager.add_free_premium_user(user_id)

            if success:
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            await state.clear()

        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)")

    elif current_state == "waiting_remove_free_premium_user":
        try:
            user_id = int(message.text.strip())

            from services.ai_settings_manager import ai_settings_manager
            free_users = await ai_settings_manager.get_free_premium_users()

            if user_id not in free_users:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞")
                return

            success = await ai_settings_manager.remove_free_premium_user(user_id)

            if success:
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            await state.clear()

        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)")


@router.message(F.text == "/cancel")
async def cancel_admin_input(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if message.from_user.id != ADMIN_USER_ID:
        return

    await state.clear()
    await message.answer("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")


@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=await get_main_keyboard()
    )
    await callback.answer()
