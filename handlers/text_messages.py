"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.
"""
import logging
import re
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext

from keyboards.main import (
    get_main_keyboard,
    create_book_keyboard,
    create_navigation_keyboard,
)
from utils.api_client import bible_api
from utils.bible_data import bible_data
from utils.text_utils import split_text
from middleware.state import (
    get_chosen_book, set_chosen_book,
    get_current_chapter, set_current_chapter,
    get_current_translation, set_current_translation,
    get_page, set_page,
    get_translation_from_db
)
from config.settings import ENABLE_WORD_SEARCH

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞
user_search_state = {}


@router.message(F.text == "üìñ –í—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É")
async def select_book(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    await set_page(state, 0)
    page = await get_page(state)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:",
        reply_markup=create_book_keyboard(page)
    )


@router.message(F.text == "üìä –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö")
async def random_verse(message: Message, state: FSMContext, db=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏—Ö–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ –ë–î
        user_id = message.from_user.id

        translation = None

        # –ï—Å–ª–∏ db –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä
        if db:
            translation = await db.get_user_translation(user_id)
            logger.debug(f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ db –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {translation}")

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if not translation:
            translation = await get_current_translation(state)
            logger.debug(f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {translation}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö
        text = await bible_api.get_random_verse(translation)
        await message.answer(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏—Ö–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏—Ö–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏"""
    help_text = (
        "üìö <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å\n"
        "‚Ä¢ /books - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥\n"
        "‚Ä¢ /random - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö\n"
        "‚Ä¢ /bookmarks - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞–∫–ª–∞–¥–∫–∏\n\n"
        "–ü–æ–∏—Å–∫ –æ—Ç—Ä—ã–≤–∫–∞:\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ö–Ω–∏–≥–∞ –≥–ª–∞–≤–∞:—Å—Ç–∏—Ö], –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "–ë—ã—Ç 1:1 - –ü–µ—Ä–≤—ã–π —Å—Ç–∏—Ö –ë—ã—Ç–∏—è\n"
        "–ò–Ω 3:16 - 16-–π —Å—Ç–∏—Ö 3-–π –≥–ª–∞–≤—ã –ò–æ–∞–Ω–Ω–∞\n\n"
        "–î–ª—è —á—Ç–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏ –≥–ª–∞–≤—É –≤ –º–µ–Ω—é –±–æ—Ç–∞."
    )

    await message.answer(help_text)


@router.message(F.text == "üìù –ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏")
async def show_bookmarks_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–∫–ª–∞–¥–æ–∫ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"""
    from handlers.bookmarks import show_bookmarks
    await show_bookmarks(message, state)


@router.message(F.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥")
async def change_translation_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"""
    from keyboards.main import create_translations_keyboard
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ë–∏–±–ª–∏–∏:",
        reply_markup=create_translations_keyboard()
    )


async def is_chapter_bookmarked(user_id: int, book_id: int, chapter: int, db) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ –≥–ª–∞–≤–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∏

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        book_id: ID –∫–Ω–∏–≥–∏
        chapter: –ù–æ–º–µ—Ä –≥–ª–∞–≤—ã
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Returns:
        True, –µ—Å–ª–∏ –≥–ª–∞–≤–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö, –∏–Ω–∞—á–µ False
    """
    if not db:
        logger.warning("–û–±—ä–µ–∫—Ç db –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–ª–∞–¥–∫–∏")
        return False

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bookmarks = await db.get_bookmarks(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –Ω—É–∂–Ω–∞—è
        for bm_book_id, bm_chapter, _ in bookmarks:
            if bm_book_id == book_id and bm_chapter == chapter:
                logger.info(
                    f"–ì–ª–∞–≤–∞ {book_id}:{chapter} –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True

        logger.info(
            f"–ì–ª–∞–≤–∞ {book_id}:{chapter} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
        return False


@router.message(F.text.regexp(r'^\d+$'))
async def chapter_input(message: Message, state: FSMContext, db=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤—ã"""
    book_id = await get_chosen_book(state)
    if not book_id:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üìñ –í—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É'",
            reply_markup=get_main_keyboard()
        )
        return

    chapter = int(message.text)

    # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≥–ª–∞–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
    max_chapters = bible_data.max_chapters.get(book_id, 1)

    if chapter < 1 or chapter > max_chapters:
        await message.answer(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –æ—Ç 1 –¥–æ {max_chapters}",
            reply_markup=get_main_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–ª–∞–≤—É
    await set_current_chapter(state, chapter)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥
    book_name = bible_data.get_book_name(book_id)
    translation = await get_current_translation(state)

    try:
        text = await bible_api.get_formatted_chapter(book_id, chapter, translation)

        if text.startswith("–û—à–∏–±–∫–∞:"):
            await message.answer(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤—ã {chapter} –∫–Ω–∏–≥–∏ {book_name}.",
                reply_markup=get_main_keyboard()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ –≥–ª–∞–≤–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∏
        is_bookmarked = False
        if db:
            is_bookmarked = await is_chapter_bookmarked(message.from_user.id, book_id, chapter, db)
            logger.info(
                f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è –≥–ª–∞–≤—ã {book_id}:{chapter}: {is_bookmarked}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ/—Å–ª–µ–¥—É—é—â–∏–µ –≥–ª–∞–≤—ã
        has_previous = chapter > 1
        has_next = chapter < max_chapters

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π
        for part in split_text(text):
            await message.answer(part)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await message.answer(
            f"{book_name}, –≥–ª–∞–≤–∞ {chapter}",
            reply_markup=create_navigation_keyboard(
                has_previous, has_next, is_bookmarked)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≥–ª–∞–≤—ã: {e}")
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤—ã {chapter} –∫–Ω–∏–≥–∏ {book_name}. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )


@router.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å—Ç–∏—Ö")
async def search_verse(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å—Ç–∏—Ö–æ–≤"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–ö–Ω–∏–≥–∞ –≥–ª–∞–≤–∞:—Å—Ç–∏—Ö</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ë—ã—Ç 1:1</code> –∏–ª–∏ <code>–ò–Ω 3:16</code>"
    )


@router.message(
    lambda msg: re.match(r'^[–∞-—è–ê-–Ø0-9]+\s+\d+[:]\d+', msg.text) is not None
)
async def verse_reference(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç–∏—Ö–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ö–Ω–∏–≥–∞ –≥–ª–∞–≤–∞:—Å—Ç–∏—Ö'"""
    try:
        # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É
        match = re.match(r'^([–∞-—è–ê-–Ø0-9]+)\s+(\d+)[:](\d+)', message.text)
        if not match:
            return

        book_code, chapter_str, verse_str = match.groups()
        book_id = bible_data.get_book_id(book_code)

        if not book_id:
            await message.answer(f"–ö–Ω–∏–≥–∞ '{book_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        chapter = int(chapter_str)
        verse = int(verse_str)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –≥–ª–∞–≤—ã
        max_chapter = bible_data.max_chapters.get(book_id, 0)

        logger.info(
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∏—Ö: {book_code} (ID: {book_id}) {chapter}:{verse}, –º–∞–∫—Å. –≥–ª–∞–≤: {max_chapter}")

        if chapter < 1 or chapter > max_chapter:
            book_name = bible_data.get_book_name(book_id)
            await message.answer(
                f"–ö–Ω–∏–≥–∞ ¬´{book_name}¬ª —Å–æ–¥–µ—Ä–∂–∏—Ç {max_chapter} –≥–ª–∞–≤.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –æ—Ç 1 –¥–æ {max_chapter}."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∏—Ö–∞/–≥–ª–∞–≤—ã
        try:
            translation = await get_current_translation(state)
            text = await bible_api.get_formatted_chapter(
                book_id, chapter, translation
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
            if text.startswith("–û—à–∏–±–∫–∞:"):
                await message.answer(f"–ì–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –≥–ª–∞–≤—É.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–Ω–∏–≥—É –∏ –≥–ª–∞–≤—É
            await set_chosen_book(state, book_id)
            await set_current_chapter(state, chapter)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π
            for part in split_text(text):
                await message.answer(part)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            has_previous = chapter > 1
            has_next = chapter < max_chapter
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_navigation_keyboard(has_previous, has_next)
            )
        except Exception as e:
            logger.error(f"API error: {e}", exc_info=True)
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∏—Ö: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –æ—Ç—Ä—ã–≤–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ–≤—É (–∞–∫—Ç–∏–≤–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
if ENABLE_WORD_SEARCH:
    @router.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É")
    async def search_word_command(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –ë–∏–±–ª–∏–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        await state.set_state("waiting_for_search_query")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ –ë–∏–±–ª–∏–∏ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞):",
            reply_markup=kb
        )

    @router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞")
    async def cancel_search(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞"""
        current_state = await state.get_state()
        if current_state == "waiting_for_search_query":
            await state.clear()

        await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())

    @router.message(lambda message: message.text and not message.text.startswith('/'))
    async def process_search_query(message: Message, state: FSMContext, db=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        current_state = await state.get_state()

        if current_state != "waiting_for_search_query":
            return

        search_query = message.text.strip()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        await message.answer(f"–ò—â—É '{search_query}' –≤ —Ç–µ–∫—Å—Ç–µ –ë–∏–±–ª–∏–∏...", reply_markup=get_main_keyboard())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
        if len(search_query) < 3:
            await message.answer("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        translation = None

        # –ï—Å–ª–∏ db –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä
        if db:
            translation = await db.get_user_translation(message.from_user.id)
            logger.debug(f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ db –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {translation}")

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if not translation:
            translation = await get_current_translation(state)
            logger.debug(f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {translation}")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            results = await bible_api.search_bible_text(search_query, translation)

            if not results:
                await message.answer(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(
                f"Search results structure: {type(results)} - First item: {results[0] if results else None}")

            result_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{search_query}' ({len(results)} –Ω–∞–π–¥–µ–Ω–æ):\n\n"

            for i, item in enumerate(results, 1):
                if i > 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –ø–µ—Ä–≤—ã–º–∏ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    result_text += f"\n... –∏ –µ—â–µ {len(results) - 20} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                    break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                if isinstance(item, dict):
                    if 'reference' in item and 'text' in item:
                        result_text += f"{i}. {item['reference']}: {item['text']}\n\n"
                    else:
                        # –ï—Å–ª–∏ –∫–ª—é—á–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏
                        reference = item.get('info', '') or item.get(
                            'reference', '') or ''
                        text = item.get('verse', '') or item.get(
                            'text', '') or str(item)
                        result_text += f"{i}. {reference}: {text}\n\n"
                else:
                    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤—ã–≤–æ–¥–∏–º –∏—Ö –∫–∞–∫ –µ—Å—Ç—å
                    result_text += f"{i}. {item}\n\n"

            # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            for part in split_text(result_text):
                await message.answer(part)

        except Exception as e:
            logging.error(f"Search error: {e}", exc_info=True)
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text)
async def other_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
        reply_markup=get_main_keyboard()
    )
