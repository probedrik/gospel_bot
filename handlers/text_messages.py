"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.
"""
from config.settings import MARKDOWN_ENABLED, MARKDOWN_MODE, MARKDOWN_BOLD_TITLE, MARKDOWN_QUOTE, MARKDOWN_ESCAPE, ENABLE_VERSE_NUMBERS, BIBLE_MARKDOWN_ENABLED, BIBLE_MARKDOWN_MODE
import logging
import re
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.enums.parse_mode import ParseMode
from config.ai_settings import ENABLE_GPT_EXPLAIN, AI_OWNER_ID, AI_UNLIMITED_USERS, AI_DAILY_LIMIT
from config.settings import ENABLE_DELETE_RELATED_MESSAGES_DEFAULT

from keyboards.main import (
    get_main_keyboard,
    create_book_keyboard,
    create_navigation_keyboard,
)
from utils.api_client import bible_api, ask_gpt_explain
from utils.bible_data import bible_data
from utils.text_utils import split_text
from middleware.state import (
    get_chosen_book, set_chosen_book,
    get_current_chapter, set_current_chapter,
    get_current_translation, set_current_translation,
    get_page, set_page,
    get_translation_from_db
)
from config.settings import ENABLE_WORD_SEARCH
from handlers.verse_reference import get_verse_by_reference
from utils.topics import get_topics_list, get_verses_for_topic
from utils.lopukhin_commentary import lopukhin_commentary
from database.universal_manager import universal_db_manager as db_manager

import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞
user_search_state = {}

# –°—á–µ—Ç—á–∏–∫ –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤: user_id -> {'count': int, 'date': date}
_ai_daily_counter = {}


def ai_check_and_increment(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, –∏–Ω–∞—á–µ False.
    """
    today = datetime.date.today()
    if user_id in AI_UNLIMITED_USERS:
        return True
    rec = _ai_daily_counter.get(user_id)
    if rec and rec['date'] == today:
        if rec['count'] >= AI_DAILY_LIMIT:
            return False
        rec['count'] += 1
    else:
        _ai_daily_counter[user_id] = {'count': 1, 'date': today}
    return True


async def ai_check_and_increment_db(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, –∏–Ω–∞—á–µ False.
    """
    from config.ai_settings import AI_UNLIMITED_USERS, AI_DAILY_LIMIT
    if user_id in AI_UNLIMITED_USERS:
        return True
    today = datetime.date.today().isoformat()
    count = await db_manager.get_ai_limit(user_id, today)
    if count >= AI_DAILY_LIMIT:
        return False
    await db_manager.increment_ai_limit(user_id, today)
    return True


@router.message(F.text == "üìñ –í—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É")
async def select_book(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    await set_page(state, 0)
    page = await get_page(state)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:",
        reply_markup=create_book_keyboard(page)
    )


@router.message(F.text == "üìä –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö")
async def random_verse(message: Message, state: FSMContext, db=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏—Ö–∞"""
    try:
        user_id = message.from_user.id
        translation = None
        if db:
            translation = await db.get_user_translation(user_id)
            logger.debug(f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ db –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {translation}")
        if not translation:
            translation = await get_current_translation(state)
            logger.debug(f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {translation}")
        text = await bible_api.get_random_verse(translation)
        await message.answer(text)
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å book –∏ chapter –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å –≤—Å—é –≥–ª–∞–≤—É"
        import re
        match = re.search(r"([–ê-–Ø–∞-—è—ë–Å\s]+)\s(\d+):\d+", text)
        if match:
            book_raw = match.group(1).strip().lower()
            chapter = match.group(2)
            book_abbr = bible_data.normalize_book_name(book_raw)
            if bible_data.get_book_id(book_abbr):
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text="–û—Ç–∫—Ä—ã—Ç—å –≤—Å—é –≥–ª–∞–≤—É", callback_data=f"open_chapter_{book_abbr}_{chapter}")]
                    ]
                )
                await message.answer("–•–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤—Å—é –≥–ª–∞–≤—É?", reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏—Ö–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏—Ö–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏"""
    help_text = (
        "<b>üìö –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ üìñ –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –∏ –≥–ª–∞–≤—ã\n"
        "‚Ä¢ üîç –ü–æ–∏—Å–∫ —Å—Ç–∏—Ö–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>–ò–Ω 3:16</code>)\n"
        "‚Ä¢ üìù –ó–∞–∫–ª–∞–¥–∫–∏ –Ω–∞ –ª—é–±–∏–º—ã–µ –≥–ª–∞–≤—ã –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∏–º\n"
        "‚Ä¢ üìö –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏ —Å—Ç–∏—Ö–æ–≤ (–∫–Ω–æ–ø–∫–∞ 'üìö –¢–µ–º—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)\n"
        "‚Ä¢ üí¨ –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)\n"
        "‚Ä¢ üìä –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö\n"
        "‚Ä¢ üßë‚Äçüè´ –¢–æ–ª–∫–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ. –õ–æ–ø—É—Ö–∏–Ω–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–∏—Ö—É –∏ –≥–ª–∞–≤–µ (–ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ, —Å –∫–Ω–æ–ø–∫–∞–º–∏)\n"
        "‚Ä¢ ü§ñ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–º—ã—Å–ª–∞ –≥–ª–∞–≤—ã –∏–ª–∏ —Å—Ç–∏—Ö–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò (–∫–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –ª–∏–º–∏—Ç 5 –≤ —Å—É—Ç–∫–∏)\n"
        "‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ò–ò-–æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ª–∏–º–∏—Ç–∞\n"
        "‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: /clean_on –∏ /clean_off\n"
        "\n"
        "<b>–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ë–∏–±–ª–∏–∏?</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>üîÑ –°–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥</b> –≤ —á–∞—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ —ç—Ç–æ–º –º–µ–Ω—é.\n"
        "\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "- –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏ –≥–ª–∞–≤—É —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>–ò–Ω 3</code>, <code>–ë—ã—Ç 1:1</code>)\n"
        "- –î–ª—è –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏: '–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ. –õ–æ–ø—É—Ö–∏–Ω–∞' –∏ 'ü§ñ –†–∞–∑–±–æ—Ä –æ—Ç –ò–ò'\n"
        "- –ù–∞–≤–∏–≥–∏—Ä—É–π—Ç–µ –ø–æ –≥–ª–∞–≤–∞–º —Å –ø–æ–º–æ—â—å—é —Å—Ç—Ä–µ–ª–æ–∫\n"
        "- –î–æ–±–∞–≤–ª—è–π—Ç–µ –∏ —É–¥–∞–ª—è–π—Ç–µ –∑–∞–∫–ª–∞–¥–∫–∏\n"
        "- –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ò–ò –≤ –æ–¥–∏–Ω –∫–ª–∏–∫\n"
        "\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:</b>\n"
        "‚Ä¢ /start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /books ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥\n"
        "‚Ä¢ /random ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö\n"
        "‚Ä¢ /bookmarks ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞–∫–ª–∞–¥–∫–∏\n"
        "‚Ä¢ /clean_on ‚Äî –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ /clean_off ‚Äî –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    )
    await message.answer(help_text, parse_mode="HTML")


@router.message(F.text == "üìù –ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏")
async def show_bookmarks_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–∫–ª–∞–¥–æ–∫ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"""
    from handlers.bookmarks import show_bookmarks
    await show_bookmarks(message, state)


@router.message(F.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥")
async def change_translation_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (—Å–∫—Ä—ã—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ —Å–ø—Ä–∞–≤–∫—É)"""
    from keyboards.main import create_translations_keyboard
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ë–∏–±–ª–∏–∏:",
        reply_markup=create_translations_keyboard()
    )


async def is_chapter_bookmarked(user_id: int, book_id: int, chapter: int, db) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ –≥–ª–∞–≤–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∏

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        book_id: ID –∫–Ω–∏–≥–∏
        chapter: –ù–æ–º–µ—Ä –≥–ª–∞–≤—ã
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Returns:
        True, –µ—Å–ª–∏ –≥–ª–∞–≤–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö, –∏–Ω–∞—á–µ False
    """
    if not db:
        logger.warning("–û–±—ä–µ–∫—Ç db –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–ª–∞–¥–∫–∏")
        return False

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bookmarks = await db.get_bookmarks(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –Ω—É–∂–Ω–∞—è
        for bm_book_id, bm_chapter, _ in bookmarks:
            if bm_book_id == book_id and bm_chapter == chapter:
                logger.info(
                    f"–ì–ª–∞–≤–∞ {book_id}:{chapter} –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True

        logger.info(
            f"–ì–ª–∞–≤–∞ {book_id}:{chapter} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
        return False


@router.message(F.text.regexp(r'^\d+$'))
async def chapter_input(message: Message, state: FSMContext, db=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤—ã"""
    book_id = await get_chosen_book(state)
    if not book_id:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üìñ –í—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É'",
            reply_markup=get_main_keyboard()
        )
        return

    chapter = int(message.text)

    # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≥–ª–∞–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
    max_chapters = bible_data.max_chapters.get(book_id, 1)

    if chapter < 1 or chapter > max_chapters:
        await message.answer(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –æ—Ç 1 –¥–æ {max_chapters}",
            reply_markup=get_main_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–ª–∞–≤—É
    await set_current_chapter(state, chapter)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥
    book_name = bible_data.get_book_name(book_id)
    book_abbr = None
    for abbr, id_ in bible_data.book_abbr_dict.items():
        if id_ == book_id:
            book_abbr = abbr
            break
    translation = await get_current_translation(state)

    try:
        text = await bible_api.get_formatted_chapter(book_id, chapter, translation)

        if text.startswith("–û—à–∏–±–∫–∞:"):
            await message.answer(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤—ã {chapter} –∫–Ω–∏–≥–∏ {book_name}.",
                reply_markup=get_main_keyboard()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ –≥–ª–∞–≤–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∏
        is_bookmarked = False
        if db:
            is_bookmarked = await is_chapter_bookmarked(message.from_user.id, book_id, chapter, db)
            logger.info(
                f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è –≥–ª–∞–≤—ã {book_id}:{chapter}: {is_bookmarked}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ/—Å–ª–µ–¥—É—é—â–∏–µ –≥–ª–∞–≤—ã
        has_previous = chapter > 1
        has_next = chapter < max_chapters

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π
        from utils.text_utils import get_verses_parse_mode
        parse_mode = get_verses_parse_mode()

        for part in split_text(text):
            await message.answer(part, parse_mode=parse_mode)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≥–ª–∞–≤—ã
        from utils.bible_data import create_chapter_action_buttons
        extra_buttons = create_chapter_action_buttons(book_id, chapter)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_navigation_keyboard(
                has_previous, has_next, is_bookmarked, extra_buttons)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≥–ª–∞–≤—ã: {e}")
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤—ã {chapter} –∫–Ω–∏–≥–∏ {book_name}. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )


@router.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å—Ç–∏—Ö")
async def search_verse(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å—Ç–∏—Ö–æ–≤"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∏—Ö –∏–ª–∏ –æ—Ç—Ä—ã–≤–æ–∫ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
        "<b>–ö–Ω–∏–≥–∞ –≥–ª–∞–≤–∞</b> ‚Äî –≤—Å—è –≥–ª–∞–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>–ò–Ω 3</code>)\n"
        "<b>–ö–Ω–∏–≥–∞ –≥–ª–∞–≤–∞:—Å—Ç–∏—Ö</b> ‚Äî –æ–¥–∏–Ω —Å—Ç–∏—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>–ò–Ω 3:16</code>)\n"
        "<b>–ö–Ω–∏–≥–∞ –≥–ª–∞–≤–∞:—Å—Ç–∏—Ö-—Å—Ç–∏—Ö</b> ‚Äî –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∏—Ö–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>–ò–Ω 3:16-18</code>)"
    )


@router.message(
    lambda msg: re.match(
        r'^([–∞-—è–ê-–Ø—ë–Å0-9\s]+)\s+(\d+)(?::(\d+)(?:-(\d+))?)?$', msg.text.strip(), re.IGNORECASE) is not None
)
async def verse_reference(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç–∏—Ö–∏, –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ –≥–ª–∞–≤—ã: '–ö–Ω–∏–≥–∞ –≥–ª–∞–≤–∞', '–ö–Ω–∏–≥–∞ –≥–ª–∞–≤–∞:—Å—Ç–∏—Ö', '–ö–Ω–∏–≥–∞ –≥–ª–∞–≤–∞:—Å—Ç–∏—Ö-—Å—Ç–∏—Ö'"""
    try:
        text, meta = await get_verse_by_reference(state, message.text)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–∏–±–ª–µ–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        from utils.text_utils import get_verses_parse_mode
        parse_mode = get_verses_parse_mode()

        for part in split_text(text):
            await message.answer(part, parse_mode=parse_mode)
        match = re.match(
            r'^([–∞-—è–ê-–Ø—ë–Å0-9\s]+)\s+(\d+)(?::(\d+)(?:-(\d+))?)?$', message.text.strip(), re.IGNORECASE)
        if match:
            book_raw = match.group(1).strip()
            chapter = int(match.group(2))
            verse = match.group(3)
            book_abbr = bible_data.normalize_book_name(book_raw)
            book_id = bible_data.get_book_id(book_abbr)
            en_book = None
            en_to_ru = {
                "Gen": "–ë—ã—Ç", "Exod": "–ò—Å—Ö", "Lev": "–õ–µ–≤", "Num": "–ß–∏—Å", "Deut": "–í—Ç–æ—Ä", "Josh": "–ù–∞–≤", "Judg": "–°—É–¥", "Ruth": "–†—É—Ñ",
                "1Sam": "1–¶–∞—Ä", "2Sam": "2–¶–∞—Ä", "1Kgs": "3–¶–∞—Ä", "2Kgs": "4–¶–∞—Ä", "1Chr": "1–ü–∞—Ä", "2Chr": "2–ü–∞—Ä", "Ezra": "–ï–∑–¥", "Neh": "–ù–µ–µ–º",
                "Esth": "–ï—Å—Ñ", "Job": "–ò–æ–≤", "Ps": "–ü—Å", "Prov": "–ü—Ä–∏—Ç", "Eccl": "–ï–∫–∫–ª", "Song": "–ü–µ—Å–Ω", "Isa": "–ò—Å", "Jer": "–ò–µ—Ä",
                "Lam": "–ü–ª–∞—á", "Ezek": "–ò–µ–∑", "Dan": "–î–∞–Ω", "Hos": "–û—Å", "Joel": "–ò–æ–∏–ª", "Amos": "–ê–º", "Obad": "–ê–≤–¥", "Jonah": "–ò–æ–Ω",
                "Mic": "–ú–∏—Ö", "Nah": "–ù–∞—É–º", "Hab": "–ê–≤–≤", "Zeph": "–°–æ—Ñ", "Hag": "–ê–≥–≥", "Zech": "–ó–∞—Ö", "Mal": "–ú–∞–ª",
                "Matt": "–ú—Ñ", "Mark": "–ú–∫", "Luke": "–õ–∫", "John": "–ò–Ω", "Acts": "–î–µ—è–Ω", "Jas": "–ò–∞–∫", "1Pet": "1–ü–µ—Ç", "2Pet": "2–ü–µ—Ç",
                "1John": "1–ò–Ω", "2John": "2–ò–Ω", "3John": "3–ò–Ω", "Jude": "–ò—É–¥", "Rom": "–†–∏–º", "1Cor": "1–ö–æ—Ä", "2Cor": "2–ö–æ—Ä",
                "Gal": "–ì–∞–ª", "Eph": "–ï—Ñ", "Phil": "–§–ª–ø", "Col": "–ö–æ–ª", "1Thess": "1–§–µ—Å", "2Thess": "2–§–µ—Å", "1Tim": "1–¢–∏–º",
                "2Tim": "2–¢–∏–º", "Titus": "–¢–∏—Ç", "Phlm": "–§–ª–º", "Heb": "–ï–≤—Ä", "Rev": "–û—Ç–∫—Ä"
            }
            for en, ru in en_to_ru.items():
                if ru == book_abbr:
                    en_book = en
                    break
            buttons = []
            max_chapters = bible_data.max_chapters.get(book_id, 1)
            has_previous = chapter > 1
            has_next = chapter < max_chapters
            is_bookmarked = False
            # –î–ª—è –≥–ª–∞–≤—ã (–µ—Å–ª–∏ verse –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ == 0): –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∫–Ω–æ–ø–∫–∏
            if not verse or verse == '0' or verse == 0:
                # –ö–Ω–æ–ø–∫–∏ "–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ. –õ–æ–ø—É—Ö–∏–Ω–∞" –∏ "ü§ñ –†–∞–∑–±–æ—Ä –æ—Ç –ò–ò"
                extra_buttons = []
                # –ö–Ω–æ–ø–∫–∞ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –õ–æ–ø—É—Ö–∏–Ω–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É)
                from config.settings import ENABLE_LOPUKHIN_COMMENTARY
                if ENABLE_LOPUKHIN_COMMENTARY and en_book:
                    extra_buttons.append([
                        InlineKeyboardButton(
                            text="–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ. –õ–æ–ø—É—Ö–∏–Ω–∞",
                            callback_data=f"open_commentary_{en_book}_{chapter}_0"
                        )
                    ])
                if ENABLE_GPT_EXPLAIN:
                    extra_buttons.append([
                        InlineKeyboardButton(
                            text="ü§ñ –†–∞–∑–±–æ—Ä –æ—Ç –ò–ò",
                            callback_data=f"gpt_explain_{en_book}_{chapter}_0"
                        )
                    ])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=create_navigation_keyboard(
                        has_previous, has_next, is_bookmarked, extra_buttons)
                )
            else:
                # –î–ª—è —Å—Ç–∏—Ö–∞ ‚Äî –∫–∞–∫ –±—ã–ª–æ
                if book_id:
                    buttons.append([
                        InlineKeyboardButton(
                            text="–û—Ç–∫—Ä—ã—Ç—å –≤—Å—é –≥–ª–∞–≤—É",
                            callback_data=f"open_chapter_{book_abbr}_{chapter}"
                        )
                    ])
                # –ö–Ω–æ–ø–∫–∞ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –õ–æ–ø—É—Ö–∏–Ω–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É)
                from config.settings import ENABLE_LOPUKHIN_COMMENTARY
                if ENABLE_LOPUKHIN_COMMENTARY and en_book:
                    commentary = None
                    if verse:
                        commentary = lopukhin_commentary.get_commentary(
                            en_book, chapter, int(verse))
                    if not commentary:
                        commentary = lopukhin_commentary.get_commentary(
                            en_book, chapter, 0)
                    if commentary:
                        cb_data = f"open_commentary_{en_book}_{chapter}_{verse}"
                        buttons.append([
                            InlineKeyboardButton(
                                text="–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ. –õ–æ–ø—É—Ö–∏–Ω–∞",
                                callback_data=cb_data
                            )
                        ])
                if ENABLE_GPT_EXPLAIN:
                    cb_data = f"gpt_explain_{en_book}_{chapter}_{verse}"
                    buttons.append([
                        InlineKeyboardButton(
                            text="ü§ñ –†–∞–∑–±–æ—Ä –æ—Ç –ò–ò",
                            callback_data=cb_data
                        )
                    ])
                if buttons:
                    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∏—Ö: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –æ—Ç—Ä—ã–≤–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ–≤—É (–∞–∫—Ç–∏–≤–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
if ENABLE_WORD_SEARCH:
    @router.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É")
    async def search_word_command(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –ë–∏–±–ª–∏–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        await state.set_state("waiting_for_search_query")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ –ë–∏–±–ª–∏–∏ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞):",
            reply_markup=kb
        )

    @router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞")
    async def cancel_search(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞"""
        current_state = await state.get_state()
        if current_state == "waiting_for_search_query":
            await state.clear()

        await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())

    @router.message(lambda message: message.text and not message.text.startswith('/'))
    async def process_search_query(message: Message, state: FSMContext, db=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        current_state = await state.get_state()

        if current_state != "waiting_for_search_query":
            return

        search_query = message.text.strip()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        await message.answer(f"–ò—â—É '{search_query}' –≤ —Ç–µ–∫—Å—Ç–µ –ë–∏–±–ª–∏–∏...", reply_markup=get_main_keyboard())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
        if len(search_query) < 3:
            await message.answer("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        translation = None

        # –ï—Å–ª–∏ db –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä
        if db:
            translation = await db.get_user_translation(message.from_user.id)
            logger.debug(f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ db –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {translation}")

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if not translation:
            translation = await get_current_translation(state)
            logger.debug(f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {translation}")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            results = await bible_api.search_bible_text(search_query, translation)

            if not results:
                await message.answer(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(
                f"Search results structure: {type(results)} - First item: {results[0] if results else None}")

            result_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{search_query}' ({len(results)} –Ω–∞–π–¥–µ–Ω–æ):\n\n"

            for i, item in enumerate(results, 1):
                if i > 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –ø–µ—Ä–≤—ã–º–∏ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    result_text += f"\n... –∏ –µ—â–µ {len(results) - 20} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                    break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                if isinstance(item, dict):
                    if 'reference' in item and 'text' in item:
                        result_text += f"{i}. {item['reference']}: {item['text']}\n\n"
                    else:
                        # –ï—Å–ª–∏ –∫–ª—é—á–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏
                        reference = item.get('info', '') or item.get(
                            'reference', '') or ''
                        text = item.get('verse', '') or item.get(
                            'text', '') or str(item)
                        result_text += f"{i}. {reference}: {text}\n\n"
                else:
                    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤—ã–≤–æ–¥–∏–º –∏—Ö –∫–∞–∫ –µ—Å—Ç—å
                    result_text += f"{i}. {item}\n\n"

            # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            for part in split_text(result_text):
                await message.answer(part)

        except Exception as e:
            logging.error(f"Search error: {e}", exc_info=True)
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")


@router.message(F.text == "üìö –¢–µ–º—ã")
async def show_topics_menu(message: Message):
    from utils.topics import get_topics_list
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    topics = get_topics_list()
    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ 2 –≤ —Ä—è–¥
    buttons = []
    row = []
    for i, topic in enumerate(topics):
        row.append(InlineKeyboardButton(
            text=topic, callback_data=f"topic_{i}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=kb)


@router.callback_query(F.data.regexp(r'^topic_(\d+)$'))
async def show_topic_verses(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∏—Ö–æ–≤ –∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ
    data = await state.get_data() if state else {}
    prev_topic_msg_id = data.get('last_topic_msg_id')
    prev_verse_msg_id = data.get('last_topic_verse_msg_id')
    prev_commentary_msg_id = data.get('last_topic_commentary_msg_id')
    prev_ai_msg_id = data.get('last_topic_ai_msg_id')
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–≥–æ (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∏—Ö–æ–≤, —Å—Ç–∏—Ö, —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–±–æ—Ä—ã)
    for msg_id in [prev_topic_msg_id, prev_verse_msg_id, prev_commentary_msg_id, prev_ai_msg_id]:
        if msg_id:
            try:
                await callback.bot.delete_message(callback.message.chat.id, msg_id)
            except Exception:
                pass
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∏—Ö–æ–≤
    topics = get_topics_list()
    idx = int(callback.data.split('_')[1])
    topic = topics[idx]
    verses = get_verses_for_topic(topic)
    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ 2 –≤ —Ä—è–¥
    buttons = []
    row = []
    for i, v in enumerate(verses):
        row.append(InlineKeyboardButton(text=v, callback_data=f"verse_{v}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    sent = await callback.message.answer(f'<b>{topic}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏—Ö:', reply_markup=kb, parse_mode="HTML")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∏—Ö–æ–≤
    if state and sent:
        await state.update_data(last_topic_msg_id=sent.message_id,
                                last_topic_verse_msg_id=None,
                                last_topic_commentary_msg_id=None,
                                last_topic_ai_msg_id=None)
    await callback.answer()


@router.callback_query(F.data.regexp(r'^verse_(.+)$'))
async def topic_verse_callback(callback: CallbackQuery, state: FSMContext):
    verse_ref = callback.data[len('verse_'):]
    from handlers.verse_reference import get_verse_by_reference
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∏—Ö –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–±–æ—Ä –æ—Ç –ò–ò)
    data = await state.get_data() if state else {}
    prev_verse_msg_id = data.get('last_topic_verse_msg_id')
    prev_commentary_msg_id = data.get('last_topic_commentary_msg_id')
    prev_ai_msg_id = data.get('last_topic_ai_msg_id')
    for msg_id in [prev_verse_msg_id, prev_commentary_msg_id, prev_ai_msg_id]:
        if msg_id:
            try:
                await callback.bot.delete_message(callback.message.chat.id, msg_id)
            except Exception:
                pass
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏—Ö
    text, _ = await get_verse_by_reference(state, verse_ref)
    sent = None
    for part in split_text(text):
        sent = await callback.message.answer(part)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∏—Ö–æ–º
    if sent and state is not None:
        try:
            await state.update_data(last_topic_verse_msg_id=sent.message_id,
                                    last_topic_commentary_msg_id=None,
                                    last_topic_ai_msg_id=None)
        except Exception:
            pass
    # –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç–∏—Ö–æ–º
    import re
    match = re.match(r"([–ê-–Ø–∞-—è—ë–Å0-9\s]+)\s(\d+)(?::(\d+)(-\d+)?)?", verse_ref)
    if match:
        book_raw = match.group(1).strip().lower()
        chapter = int(match.group(2))
        verse = match.group(3)
        book_abbr = bible_data.normalize_book_name(book_raw)
        book_id = bible_data.get_book_id(book_abbr)
        en_book = None
        en_to_ru = {
            "Gen": "–ë—ã—Ç", "Exod": "–ò—Å—Ö", "Lev": "–õ–µ–≤", "Num": "–ß–∏—Å", "Deut": "–í—Ç–æ—Ä", "Josh": "–ù–∞–≤", "Judg": "–°—É–¥", "Ruth": "–†—É—Ñ",
            "1Sam": "1–¶–∞—Ä", "2Sam": "2–¶–∞—Ä", "1Kgs": "3–¶–∞—Ä", "2Kgs": "4–¶–∞—Ä", "1Chr": "1–ü–∞—Ä", "2Chr": "2–ü–∞—Ä", "Ezra": "–ï–∑–¥", "Neh": "–ù–µ–µ–º",
            "Esth": "–ï—Å—Ñ", "Job": "–ò–æ–≤", "Ps": "–ü—Å", "Prov": "–ü—Ä–∏—Ç", "Eccl": "–ï–∫–∫–ª", "Song": "–ü–µ—Å–Ω", "Isa": "–ò—Å", "Jer": "–ò–µ—Ä",
            "Lam": "–ü–ª–∞—á", "Ezek": "–ò–µ–∑", "Dan": "–î–∞–Ω", "Hos": "–û—Å", "Joel": "–ò–æ–∏–ª", "Amos": "–ê–º", "Obad": "–ê–≤–¥", "Jonah": "–ò–æ–Ω",
            "Mic": "–ú–∏—Ö", "Nah": "–ù–∞—É–º", "Hab": "–ê–≤–≤", "Zeph": "–°–æ—Ñ", "Hag": "–ê–≥–≥", "Zech": "–ó–∞—Ö", "Mal": "–ú–∞–ª",
            "Matt": "–ú—Ñ", "Mark": "–ú–∫", "Luke": "–õ–∫", "John": "–ò–Ω", "Acts": "–î–µ—è–Ω", "Jas": "–ò–∞–∫", "1Pet": "1–ü–µ—Ç", "2Pet": "2–ü–µ—Ç",
            "1John": "1–ò–Ω", "2John": "2–ò–Ω", "3John": "3–ò–Ω", "Jude": "–ò—É–¥", "Rom": "–†–∏–º", "1Cor": "1–ö–æ—Ä", "2Cor": "2–ö–æ—Ä",
            "Gal": "–ì–∞–ª", "Eph": "–ï—Ñ", "Phil": "–§–ª–ø", "Col": "–ö–æ–ª", "1Thess": "1–§–µ—Å", "2Thess": "2–§–µ—Å", "1Tim": "1–¢–∏–º",
            "2Tim": "2–¢–∏–º", "Titus": "–¢–∏—Ç", "Phlm": "–§–ª–º", "Heb": "–ï–≤—Ä", "Rev": "–û—Ç–∫—Ä"
        }
        for en, ru in en_to_ru.items():
            if ru == book_abbr:
                en_book = en
                break

        buttons = []
        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –≤—Å—é –≥–ª–∞–≤—É"
        if book_id:
            buttons.append([
                InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –≤—Å—é –≥–ª–∞–≤—É",
                    callback_data=f"open_chapter_{book_abbr}_{chapter}"
                )
            ])

        # –ö–Ω–æ–ø–∫–∞ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –õ–æ–ø—É—Ö–∏–Ω–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É)
        from config.settings import ENABLE_LOPUKHIN_COMMENTARY
        if ENABLE_LOPUKHIN_COMMENTARY and en_book:
            commentary = None
            if verse:
                commentary = lopukhin_commentary.get_commentary(
                    en_book, chapter, int(verse))
            if not commentary:
                commentary = lopukhin_commentary.get_commentary(
                    en_book, chapter, 0)
            if commentary:
                if not verse or verse == '0' or verse == 0:
                    cb_data = f"open_commentary_{en_book}_{chapter}_0"
                else:
                    cb_data = f"open_commentary_{en_book}_{chapter}_{verse}"
                buttons.append([
                    InlineKeyboardButton(
                        text="–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ. –õ–æ–ø—É—Ö–∏–Ω–∞",
                        callback_data=cb_data
                    )
                ])

        # –ö–Ω–æ–ø–∫–∞ –ò–ò-—Ä–∞–∑–±–æ—Ä–∞
        if ENABLE_GPT_EXPLAIN:
            if verse is not None:
                cb_data = f"gpt_explain_{en_book}_{chapter}_{verse}"
            else:
                cb_data = f"gpt_explain_{en_book}_{chapter}_0"
            buttons.append([
                InlineKeyboardButton(
                    text="ü§ñ –†–∞–∑–±–æ—Ä –æ—Ç –ò–ò",
                    callback_data=cb_data
                )
            ])

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        if buttons and sent:
            kb = InlineKeyboardMarkup(inline_keyboard=buttons)
            await sent.edit_reply_markup(reply_markup=kb)
    await callback.answer()


# --- –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∏ –ò–ò-—Ä–∞–∑–±–æ—Ä: —Å–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è ---
@router.callback_query(F.data.regexp(r'^open_commentary_([A-Za-z0-9]+)_(\d+)_(\d+)$'))
async def open_commentary_callback(callback: CallbackQuery, state: FSMContext):
    match = re.match(
        r'^open_commentary_([A-Za-z0-9]+)_(\d+)_(\d+)$', callback.data)
    if not match:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
        return
    book = match.group(1)
    chapter = int(match.group(2))
    verse = int(match.group(3))
    from utils.lopukhin_commentary import lopukhin_commentary
    if verse == 0:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        await open_commentary_chapter_paginated(callback)
        return
    commentary = lopukhin_commentary.get_commentary(book, chapter, verse)
    if not commentary:
        commentary = lopukhin_commentary.get_commentary(book, chapter, 0)
    if commentary:
        formatted, opts = format_ai_or_commentary(commentary)
        msg = await callback.message.answer(formatted, **opts)
        if state:
            await state.update_data(last_topic_commentary_msg_id=msg.message_id)
    else:
        await callback.message.answer("–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await callback.answer()


@router.callback_query(F.data.regexp(r'^open_commentary_([A-Za-z0-9]+)_(\d+)_0$'))
async def open_commentary_chapter_paginated(callback: CallbackQuery, state: FSMContext = None):
    match = re.match(
        r'^open_commentary_([A-Za-z0-9]+)_(\d+)_0$', callback.data)
    if not match:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
        return
    book = match.group(1)
    chapter = int(match.group(2))
    from utils.lopukhin_commentary import lopukhin_commentary
    all_comments = lopukhin_commentary.get_all_commentaries_for_chapter(
        book, chapter)
    if not all_comments:
        await callback.message.answer("–¢–æ–ª–∫–æ–≤–∞–Ω–∏—è –Ω–∞ –≥–ª–∞–≤—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return
    # –ù–µ —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–≤–∏–≥–∞—Ü–∏—è –æ—Å—Ç–∞–ª–∞—Å—å
    await show_commentary_page(callback, book, chapter, all_comments, 0, state)
    await callback.answer()


@router.callback_query(F.data.regexp(r'^commentary_page_([A-Za-z0-9]+)_(\d+)_(\d+)$'))
async def commentary_page_callback(callback: CallbackQuery, state: FSMContext = None):
    match = re.match(
        r'^commentary_page_([A-Za-z0-9]+)_(\d+)_(\d+)$', callback.data)
    if not match:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
        return
    book = match.group(1)
    chapter = int(match.group(2))
    idx = int(match.group(3))
    from utils.lopukhin_commentary import lopukhin_commentary
    all_comments = lopukhin_commentary.get_all_commentaries_for_chapter(
        book, chapter)
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ–º –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await show_commentary_page(callback, book, chapter, all_comments, idx, state, edit_message=True)
    await callback.answer()


async def show_commentary_page(callback, book, chapter, all_comments, idx, state=None, edit_message=False):
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç–∏—Ö–∞ (verse): —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
    seen = set()
    filtered_comments = []
    for v, text in all_comments:
        if v not in seen:
            filtered_comments.append((v, text))
            seen.add(v)
    total = len(filtered_comments)
    v, text = filtered_comments[idx]
    if v == 0:
        title = f"–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤—É {chapter} (–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ):"
    else:
        title = f"{chapter}:{v}:"
    nav_kb = []
    if idx > 0:
        nav_kb.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                           callback_data=f"commentary_page_{book}_{chapter}_{idx-1}"))
    if idx < total - 1:
        nav_kb.append(InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è",
                                           callback_data=f"commentary_page_{book}_{chapter}_{idx+1}"))
    # –ö–Ω–æ–ø–∫–∏ "–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ. –õ–æ–ø—É—Ö–∏–Ω–∞" –∏ "–†–∞–∑–±–æ—Ä –æ—Ç –ò–ò" –¥–ª—è –≤—Å–µ–π –≥–ª–∞–≤—ã
    extra_kb = []
    if idx == 0:
        # –ö–Ω–æ–ø–∫–∞ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –õ–æ–ø—É—Ö–∏–Ω–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É)
        from config.settings import ENABLE_LOPUKHIN_COMMENTARY
        if ENABLE_LOPUKHIN_COMMENTARY:
            extra_kb.append(InlineKeyboardButton(
                text="–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ. –õ–æ–ø—É—Ö–∏–Ω–∞",
                callback_data=f"open_commentary_{book}_{chapter}_0"
            ))
        from config.ai_settings import ENABLE_GPT_EXPLAIN
        if ENABLE_GPT_EXPLAIN:
            extra_kb.append(InlineKeyboardButton(
                text="ü§ñ –†–∞–∑–±–æ—Ä –æ—Ç –ò–ò",
                callback_data=f"gpt_explain_{book}_{chapter}_0"
            ))
    markup = InlineKeyboardMarkup(
        inline_keyboard=[nav_kb] if nav_kb else [] +
        ([extra_kb] if extra_kb else [])
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatted, opts = format_ai_or_commentary(text, title)

    if edit_message:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º)
        try:
            await callback.message.edit_text(formatted, reply_markup=markup, **opts)
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await callback.message.answer(formatted, reply_markup=markup, **opts)
            if state:
                await state.update_data(last_topic_commentary_msg_id=msg.message_id)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è)
        msg = await callback.message.answer(formatted, reply_markup=markup, **opts)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ–º
        if state:
            await state.update_data(last_topic_commentary_msg_id=msg.message_id)


@router.callback_query(F.data.regexp(r'^gpt_explain_([A-Za-z0-9]+)_(\d+)_(\d+)$'))
async def gpt_explain_callback(callback: CallbackQuery, state: FSMContext = None):
    import re
    # --- AI LIMIT CHECK ---
    user_id = callback.from_user.id if hasattr(
        callback, "from_user") else callback.message.from_user.id
    from handlers.text_messages import ai_check_and_increment_db
    if not await ai_check_and_increment_db(user_id):
        await callback.message.answer("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        await callback.answer()
        return
    match = re.match(
        r'^gpt_explain_([A-Za-z0-9]+)_(\d+)_(\d+)$', callback.data)
    if not match:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò")
        return
    book = match.group(1)
    chapter = int(match.group(2))
    verse = int(match.group(3))
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã –∏–ª–∏ —Å—Ç–∏—Ö–∞
    text = ""
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è get_verse_by_reference —Å —Ä—É—Å—Å–∫–∏–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º
    from utils.bible_data import bible_data
    ru_book = bible_data.book_synonyms.get(book.lower(), book)
    book_id = bible_data.get_book_id(ru_book)
    reference = f"{ru_book} {chapter}:{verse}" if verse != 0 else f"{ru_book} {chapter}"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if book_id and state:
        from middleware.state import set_chosen_book, set_current_chapter
        await set_chosen_book(state, book_id)
        await set_current_chapter(state, chapter)
    if verse == 0:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–µ—Ä–µ–¥–∞—ë–º —á–∏—Å–ª–æ–≤–æ–π ID –∫–Ω–∏–≥–∏, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
        if not book_id:
            await callback.message.answer(f"–ö–Ω–∏–≥–∞ '{ru_book}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await callback.answer()
            return
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å–∏–Ω–æ–¥–∞–ª—å–Ω–æ–≥–æ (rst)
        text = await bible_api.get_formatted_chapter(book_id, chapter, "rst")
    else:
        from handlers.verse_reference import get_verse_by_reference
        st = state if state is not None else None
        try:
            text, _ = await get_verse_by_reference(st, reference)
        except Exception:
            text, _ = await get_verse_by_reference(None, reference)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É —Ñ–æ—Ä–º–∞—Ç–∞
    if text.startswith("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏") or text.startswith("–ö–Ω–∏–≥–∞ '"):
        await callback.message.answer(text)
        await callback.answer()
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
    prompt = f"–û–±—ä—è—Å–Ω–∏ —Å–º—ã—Å–ª —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n\n{text}\n\n–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
    try:
        response = await ask_gpt_explain(prompt)
        formatted, opts = format_ai_or_commentary(
            response, title="ü§ñ –†–∞–∑–±–æ—Ä –æ—Ç –ò–ò")

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        text_parts = list(split_text(formatted))
        for idx, part in enumerate(text_parts):
            if idx == len(text_parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ AI (exclude_ai=True)
                from utils.bible_data import create_chapter_action_buttons
                action_buttons = create_chapter_action_buttons(
                    book_id, chapter, book, exclude_ai=True)

                if verse == 0:  # –î–ª—è –≥–ª–∞–≤—ã - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –≥–ª–∞–≤–∞–º–∏
                    has_previous = chapter > 1
                    max_chapter = bible_data.max_chapters.get(book_id, 0)
                    has_next = chapter < max_chapter

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–ª–∞–¥–∫–∏
                    from middleware.state import get_bookmarks
                    bookmarks = await get_bookmarks(state)
                    book_name = bible_data.get_book_name(book_id)
                    bookmark_key = f"{book_name} {chapter}"
                    is_bookmarked = bookmark_key in bookmarks

                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                    from keyboards.main import create_navigation_keyboard
                    keyboard = create_navigation_keyboard(
                        has_previous, has_next, is_bookmarked, action_buttons)

                    msg = await callback.message.answer(part, reply_markup=keyboard, **opts)
                else:  # –î–ª—è —Å—Ç–∏—Ö–∞ - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                    if action_buttons:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –≤—Å—é –≥–ª–∞–≤—É"
                        ru_book_abbr = bible_data.get_book_name(book_id)
                        action_buttons.insert(0, [
                            InlineKeyboardButton(
                                text="–û—Ç–∫—Ä—ã—Ç—å –≤—Å—é –≥–ª–∞–≤—É",
                                callback_data=f"open_chapter_{ru_book_abbr}_{chapter}"
                            )
                        ])
                        keyboard = InlineKeyboardMarkup(
                            inline_keyboard=action_buttons)
                        msg = await callback.message.answer(part, reply_markup=keyboard, **opts)
                    else:
                        msg = await callback.message.answer(part, **opts)
            else:
                msg = await callback.message.answer(part, **opts)

            if state:
                await state.update_data(last_topic_ai_msg_id=msg.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()


@router.message(F.text.in_(get_topics_list()))
async def topic_selected(message: Message):
    from utils.topics import get_verses_for_topic
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    topic = message.text.strip()
    verses = get_verses_for_topic(topic)
    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ 2 –≤ —Ä—è–¥
    buttons = []
    row = []
    for i, v in enumerate(verses):
        row.append(InlineKeyboardButton(text=v, callback_data=f"verse_{v}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(f'<b>{topic}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏—Ö:', reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data.regexp(r'^open_chapter_([–∞-—è–ê-–Ø0-9]+)_(\d+)$'))
async def open_full_chapter_callback(callback: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥–ª–∞–≤—É –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è, –ò–ò-—Ä–∞–∑–±–æ—Ä—ã)
    data = await state.get_data() if state else {}
    prev_chapter_msg_id = data.get('last_chapter_msg_id')
    prev_commentary_msg_id = data.get('last_topic_commentary_msg_id')
    prev_ai_msg_id = data.get('last_topic_ai_msg_id')
    for msg_id in [prev_chapter_msg_id, prev_commentary_msg_id, prev_ai_msg_id]:
        if msg_id:
            try:
                await callback.bot.delete_message(callback.message.chat.id, msg_id)
            except Exception:
                pass
    match = re.match(r'^open_chapter_([–∞-—è–ê-–Ø0-9]+)_(\d+)$', callback.data)
    if not match:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
        return
    book_abbr = match.group(1)
    chapter = int(match.group(2))
    # –í—Å–µ–≥–¥–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ
    book_abbr = bible_data.normalize_book_name(book_abbr)
    book_id = bible_data.get_book_id(book_abbr)
    if not book_id:
        await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    translation = await get_current_translation(state)
    text = await bible_api.get_formatted_chapter(book_id, chapter, translation)
    sent = None
    from utils.text_utils import get_verses_parse_mode
    parse_mode = get_verses_parse_mode()

    for part in split_text(text):
        sent = await callback.message.answer(part, parse_mode=parse_mode)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–ª–∞–≤–æ–π –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if state and sent:
        await state.update_data(
            last_chapter_msg_id=sent.message_id,
            last_topic_verse_msg_id=None,
            last_topic_commentary_msg_id=None,
            last_topic_ai_msg_id=None,
            last_topic_msg_id=None
        )
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–ª–∞–≤–∞–º
    max_chapters = bible_data.max_chapters.get(book_id, 1)
    has_previous = chapter > 1
    has_next = chapter < max_chapters
    is_bookmarked = False
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤—ã: –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –õ–æ–ø—É—Ö–∏–Ω–∞ –∏ —Ä–∞–∑–±–æ—Ä –æ—Ç –ò–ò (–≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è)
    en_book = None
    en_to_ru = {
        "Gen": "–ë—ã—Ç", "Exod": "–ò—Å—Ö", "Lev": "–õ–µ–≤", "Num": "–ß–∏—Å", "Deut": "–í—Ç–æ—Ä", "Josh": "–ù–∞–≤", "Judg": "–°—É–¥", "Ruth": "–†—É—Ñ",
        "1Sam": "1–¶–∞—Ä", "2Sam": "2–¶–∞—Ä", "1Kgs": "3–¶–∞—Ä", "2Kgs": "4–¶–∞—Ä", "1Chr": "1–ü–∞—Ä", "2Chr": "2–ü–∞—Ä", "Ezra": "–ï–∑–¥", "Neh": "–ù–µ–µ–º",
        "Esth": "–ï—Å—Ñ", "Job": "–ò–æ–≤", "Ps": "–ü—Å", "Prov": "–ü—Ä–∏—Ç", "Eccl": "–ï–∫–∫–ª", "Song": "–ü–µ—Å–Ω", "Isa": "–ò—Å", "Jer": "–ò–µ—Ä",
        "Lam": "–ü–ª–∞—á", "Ezek": "–ò–µ–∑", "Dan": "–î–∞–Ω", "Hos": "–û—Å", "Joel": "–ò–æ–∏–ª", "Amos": "–ê–º", "Obad": "–ê–≤–¥", "Jonah": "–ò–æ–Ω",
        "Mic": "–ú–∏—Ö", "Nah": "–ù–∞—É–º", "Hab": "–ê–≤–≤", "Zeph": "–°–æ—Ñ", "Hag": "–ê–≥–≥", "Zech": "–ó–∞—Ö", "Mal": "–ú–∞–ª",
        "Matt": "–ú—Ñ", "Mark": "–ú–∫", "Luke": "–õ–∫", "John": "–ò–Ω", "Acts": "–î–µ—è–Ω", "Jas": "–ò–∞–∫", "1Pet": "1–ü–µ—Ç", "2Pet": "2–ü–µ—Ç",
        "1John": "1–ò–Ω", "2John": "2–ò–Ω", "3John": "3–ò–Ω", "Jude": "–ò—É–¥", "Rom": "–†–∏–º", "1Cor": "1–ö–æ—Ä", "2Cor": "2–ö–æ—Ä",
        "Gal": "–ì–∞–ª", "Eph": "–ï—Ñ", "Phil": "–§–ª–ø", "Col": "–ö–æ–ª", "1Thess": "1–§–µ—Å", "2Thess": "2–§–µ—Å", "1Tim": "1–¢–∏–º",
        "2Tim": "2–¢–∏–º", "Titus": "–¢–∏—Ç", "Phlm": "–§–ª–º", "Heb": "–ï–≤—Ä", "Rev": "–û—Ç–∫—Ä"
    }
    for en, ru in en_to_ru.items():
        if ru == book_abbr:
            en_book = en
            break
    extra_buttons = []
    # –ö–Ω–æ–ø–∫–∞ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –õ–æ–ø—É—Ö–∏–Ω–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É)
    from config.settings import ENABLE_LOPUKHIN_COMMENTARY
    if ENABLE_LOPUKHIN_COMMENTARY and en_book:
        extra_buttons.append([
            InlineKeyboardButton(
                text="–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ. –õ–æ–ø—É—Ö–∏–Ω–∞",
                callback_data=f"open_commentary_{en_book}_{chapter}_0"
            )
        ])
    if ENABLE_GPT_EXPLAIN:
        extra_buttons.append([
            InlineKeyboardButton(
                text="ü§ñ –†–∞–∑–±–æ—Ä –æ—Ç –ò–ò",
                callback_data=f"gpt_explain_{en_book}_{chapter}_0"
            )
        ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_navigation_keyboard(
            has_previous, has_next, is_bookmarked, extra_buttons)
    )
    await callback.answer()


@router.message(F.text == "/clean_on")
async def enable_cleaning(message: Message, state: FSMContext):
    """–í–∫–ª—é—á–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await state.update_data(enable_delete_related_messages=True)
    await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–ø–µ—Ä—å –í–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –≤–∞—Å.")


@router.message(F.text == "/clean_off")
async def disable_cleaning(message: Message, state: FSMContext):
    """–û—Ç–∫–ª—é—á–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await state.update_data(enable_delete_related_messages=False)
    await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–ø–µ—Ä—å –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –≤–∞—Å.")


async def get_user_cleaning_setting(state: FSMContext) -> bool:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not state:
        return ENABLE_DELETE_RELATED_MESSAGES_DEFAULT
    data = await state.get_data()
    return data.get("enable_delete_related_messages", ENABLE_DELETE_RELATED_MESSAGES_DEFAULT)


async def delete_related_messages(callback, state: FSMContext):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –≥–ª–∞–≤—É, —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ, –ò–ò-—Ä–∞–∑–±–æ—Ä (–∏ –¥–ª—è —Ç–µ–º ‚Äî —Å–ø–∏—Å–æ–∫ —Å—Ç–∏—Ö–æ–≤), –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ state.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not await get_user_cleaning_setting(state):
        return
    if not state:
        return
    data = await state.get_data()
    msg_keys = [
        'last_chapter_msg_id',
        'last_topic_verse_msg_id',
        'last_topic_commentary_msg_id',
        'last_topic_ai_msg_id',
        'last_topic_msg_id',
    ]
    for key in msg_keys:
        msg_id = data.get(key)
        if msg_id:
            try:
                await callback.bot.delete_message(callback.message.chat.id, msg_id)
            except Exception:
                pass


def format_ai_or_commentary(text, title=None):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram —Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ Markdown/MarkdownV2/HTML.
    title: –µ—Å–ª–∏ –∑–∞–¥–∞–Ω, –±—É–¥–µ—Ç –≤—ã–¥–µ–ª–µ–Ω –∂–∏—Ä–Ω—ã–º (–∏–ª–∏ –∫–∞–∫ —Ü–∏—Ç–∞—Ç–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    """
    from config.settings import COMMENTARY_MARKDOWN_ENABLED, COMMENTARY_MARKDOWN_MODE, MARKDOWN_QUOTE

    if not COMMENTARY_MARKDOWN_ENABLED:
        return f"{title}\n\n{text}" if title else text, {}

    mode = COMMENTARY_MARKDOWN_MODE
    result = text

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    if mode.lower() == "markdownv2":
        def escape_md(s):
            # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã!
            s = s.replace('\\', '\\\\')
            chars = r'_ * [ ] ( ) ~ ` > # + - = | { } . !'
            for c in chars.split():
                s = s.replace(c, f'\\{c}')
            return s
        result = escape_md(result)
        if title:
            title = escape_md(title)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º
    if title:
        if mode.lower() == "markdownv2":
            title = f"*{title}*"
        elif mode.lower() == "markdown":
            title = f"**{title}**"
        elif mode.lower() == "html":
            title = f"<b>{title}</b>"

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º —Ü–∏—Ç–∞—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    if MARKDOWN_QUOTE:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –≤–∏–∑—É–∞–ª—å–Ω—É—é —Ü–∏—Ç–∞—Ç—É
        result = f"<blockquote>{result}</blockquote>"
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ä–µ–∂–∏–º –¥–ª—è —Ü–∏—Ç–∞—Ç
        mode = "HTML"

    if title:
        result = f"{title}\n\n{result}"

    return result, {"parse_mode": mode}


@router.message(F.text == "üìö –ü–ª–∞–Ω —á—Ç–µ–Ω–∏—è")
async def reading_plan_menu(message: Message, state: FSMContext):
    from services.reading_plans import ReadingPlansService
    plans_service = ReadingPlansService()
    plans = plans_service.get_all_plans()
    if not plans:
        await message.answer("–ü–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∏–∑ state
    user_data = await state.get_data()
    current_plan_id = user_data.get('current_reading_plan')
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=(f"üëâ {plan.title}" if plan.plan_id ==
                      current_plan_id else plan.title),
                callback_data=f"readingplan_{plan.plan_id}")]
            for plan in plans
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω —á—Ç–µ–Ω–∏—è:", reply_markup=kb)


@router.callback_query(F.data.regexp(r'^readingplan_(.+?)(?:_page_(\d+))?$'))
async def reading_plan_days(callback: CallbackQuery, state: FSMContext):
    from services.reading_plans import ReadingPlansService

    # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data
    callback_parts = callback.data.split('_')
    if len(callback_parts) >= 2:
        if callback_parts[-2] == 'page' and callback_parts[-1].isdigit():
            # –§–æ—Ä–º–∞—Ç: readingplan_planX_page_Y
            page = int(callback_parts[-1])
            plan_id = '_'.join(callback_parts[1:-2])
        else:
            # –§–æ—Ä–º–∞—Ç: readingplan_planX
            page = 0
            plan_id = '_'.join(callback_parts[1:])
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è
    plans_service = ReadingPlansService()
    plan = plans_service.get_plan(plan_id)
    if not plan:
        await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await state.update_data(current_reading_plan=plan_id)
    user_id = callback.from_user.id
    from database.universal_manager import universal_db_manager as db_manager
    completed_days = set(await db_manager.get_reading_progress(user_id, plan_id))
    total = len(plan.days)
    done = len(completed_days)
    header = f"<b>–ü–ª–∞–Ω:</b> {plan.title}\n<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {done} –∏–∑ {total} –¥–Ω–µ–π"

    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    per_page = 5

    # –ï—Å–ª–∏ –ø–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–ª–æ –¥–Ω–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if total <= per_page:
        start = 0
        end = total
    else:
        if page == 0 and completed_days:
            # –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–º–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é:
            # –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –¥–µ–Ω—å + —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
            last_completed = max(completed_days) if completed_days else 0

            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
            last_completed_idx = -1
            for i, (day_num, _) in enumerate(plan.days):
                if day_num == last_completed:
                    last_completed_idx = i
                    break

            if last_completed_idx >= 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π + 4 —Å–ª–µ–¥—É—é—â–∏—Ö
                start = last_completed_idx
                end = min(start + per_page, len(plan.days))
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –Ω–∞—á–∞–ª–∞
                start = 0
                end = min(per_page, len(plan.days))
        else:
            # –û–±—ã—á–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            start = page * per_page
            end = min(start + per_page, len(plan.days))

    days_slice = plan.days[start:end]
    buttons = []
    for day_num, reading_text in days_slice:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–∞—Å—Ç–µ–π –¥–Ω—è
        parts = [p.strip() for p in reading_text.split(';') if p.strip()]
        total_parts = len(parts)
        completed_parts = set(
            db_manager.get_reading_parts_progress(user_id, plan_id, day_num))
        completed_parts_count = len(completed_parts)

        if completed_parts_count == total_parts and total_parts > 0:
            mark = "‚úÖ"  # –í—Å–µ —á–∞—Å—Ç–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã
        elif completed_parts_count > 0:
            mark = "üìñ"  # –ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
        else:
            mark = ""    # –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ

        short = reading_text
        short = re.sub(r'–ï–≤–∞–Ω–≥–µ–ª–∏–µ –æ—Ç ', '', short)
        short = re.sub(r'–ü–æ—Å–ª–∞–Ω–∏–µ –∫ ', '', short)
        short = re.sub(r'–ö–Ω–∏–≥–∞ ', '', short)
        short = re.sub(r'–ü—Ä–∏—Ç—á–∏ –°–æ–ª–æ–º–æ–Ω–æ–≤—ã', '–ü—Ä–∏—Ç—á–∏', short)
        short = re.sub(r'–ü—Å–∞–ª—Ç—ã—Ä—å', '–ü—Å', short)
        short = re.sub(r'–î–µ—è–Ω–∏—è –∞–ø–æ—Å—Ç–æ–ª–æ–≤', '–î–µ—è–Ω', short)
        short = re.sub(r'–ú–∞—Ç—Ñ–µ—è', '–ú—Ñ', short)
        short = re.sub(r'–ú–∞—Ä–∫–∞', '–ú–∫', short)
        short = re.sub(r'–õ—É–∫–∏', '–õ–∫', short)
        short = re.sub(r'–ò–æ–∞–Ω–Ω–∞', '–ò–Ω', short)
        btn_text = f"{mark} –î–µ–Ω—å {day_num} - {short}" if mark else f"–î–µ–Ω—å {day_num} - {short}"
        buttons.append([
            InlineKeyboardButton(
                text=btn_text,
                callback_data=f"readingday_{plan_id}_{day_num}"
            )
        ])
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if start > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"readingplan_{plan_id}_page_{page-1}"))
    if end < total:
        nav_buttons.append(InlineKeyboardButton(
            text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"readingplan_{plan_id}_page_{page+1}"))
    if nav_buttons:
        buttons.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–ª–∞–Ω–æ–≤
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø–ª–∞–Ω–æ–≤",
        callback_data="back_to_reading_plans"
    )])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(header, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.regexp(r'^readingday_(.+)_(\d+)$'))
async def reading_plan_day(callback: CallbackQuery, state: FSMContext):
    from services.reading_plans import ReadingPlansService
    m = re.match(r'^readingday_(.+)_(\d+)$', callback.data)
    plan_id, day = m.group(1), int(m.group(2))

    plans_service = ReadingPlansService()
    plan = plans_service.get_plan(plan_id)
    if not plan:
        await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ù–∞—Ö–æ–¥–∏–º —á—Ç–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
    reading_text = None
    for day_num, reading in plan.days:
        if day_num == day:
            reading_text = reading
            break

    if not reading_text:
        await callback.answer("–î–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    user_id = callback.from_user.id
    from database.universal_manager import universal_db_manager as db_manager
    completed = await db_manager.is_reading_day_completed(user_id, plan_id, day)

    # –†–∞–∑–±–∏–≤–∞–µ–º —á—Ç–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É ";"
    parts = [p.strip() for p in reading_text.split(';') if p.strip()]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π
    completed_parts = set(
        db_manager.get_reading_parts_progress(user_id, plan_id, day))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
    entry_buttons = []
    for i, part in enumerate(parts):
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –¥–ª—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
        part_text = f"‚úÖ {part}" if i in completed_parts else part
        entry_buttons.append([
            InlineKeyboardButton(
                text=part_text,
                callback_data=f"readingtext_{plan_id}_{day}_{i}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = [
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –¥–Ω–µ–π",
            callback_data=f"readingplan_{plan_id}"
        )]
    ]

    kb = InlineKeyboardMarkup(
        inline_keyboard=entry_buttons + control_buttons
    )
    await callback.message.edit_text(
        f"<b>–ü–ª–∞–Ω:</b> {plan.title}\n<b>–î–µ–Ω—å {day}:</b>\n{reading_text}",
        reply_markup=kb, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.regexp(r'^readingtext_'))
async def reading_plan_text(callback: CallbackQuery, state: FSMContext):
    import logging
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω–∞—á–∞–ª–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnboundLocalError
    from utils.text_utils import split_text
    from handlers.verse_reference import get_verse_by_reference
    from services.reading_plans import ReadingPlansService

    parts = callback.data.split('_')
    if len(parts) == 4:  # readingtext_{plan_id}_{day}_{part_idx}
        _, *plan_id_parts, day, part_idx = parts
        plan_id = '_'.join(plan_id_parts)
        day = int(day)
        part_idx = int(part_idx)

        logging.warning(
            f"[reading_plan_text] callback_data={callback.data} plan_id={plan_id} day={day} part_idx={part_idx}")

        plans_service = ReadingPlansService()
        plan = plans_service.get_plan(plan_id)
        if not plan:
            await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ù–∞—Ö–æ–¥–∏–º —á—Ç–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        reading_text = None
        for day_num, reading in plan.days:
            if day_num == day:
                reading_text = reading
                break

        if not reading_text:
            await callback.answer("–î–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º —á—Ç–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É ";"
        reading_parts = [p.strip()
                         for p in reading_text.split(';') if p.strip()]

        if part_idx >= len(reading_parts):
            await callback.answer("–û—Ç—Ä—ã–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å —á—Ç–µ–Ω–∏—è
        reading_part = reading_parts[part_idx]
        logging.warning(f"[reading_plan_text] reading_part={reading_part}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã/—Å—Ç–∏—Ö–∞
        text, meta = await get_verse_by_reference(state, reading_part)
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—á–∏—Ç–∞–Ω–∞ –ª–∏ —ç—Ç–∞ —á–∞—Å—Ç—å
        from database.universal_manager import universal_db_manager as db_manager
        part_completed = db_manager.is_reading_part_completed(
            user_id, plan_id, day, part_idx)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –≥–ª–∞–≤—ã
        action_buttons = [
            [InlineKeyboardButton(
                text="‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ" if not part_completed else "–£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ",
                callback_data=f"readingpartdone_{plan_id}_{day}_{part_idx}" if not part_completed else "noop"
            )],
            [InlineKeyboardButton(
                text="ü§ñ –†–∞–∑–±–æ—Ä –æ—Ç –ò–ò",
                callback_data=f"readingai_{plan_id}_{day}_{part_idx}"
            )],
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–Ω—é",
                callback_data=f"readingday_{plan_id}_{day}"
            )]
        ]

        kb = InlineKeyboardMarkup(inline_keyboard=action_buttons)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –±–∏–±–ª–µ–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        from utils.text_utils import get_verses_parse_mode
        parse_mode = get_verses_parse_mode()

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        text_parts = list(split_text(text))
        for idx, text_part in enumerate(text_parts):
            if idx == len(text_parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                await callback.message.answer(text_part, parse_mode=parse_mode, reply_markup=kb)
            else:
                await callback.message.answer(text_part, parse_mode=parse_mode)
        await callback.answer()


@router.callback_query(F.data == "back_to_reading_plans")
async def back_to_reading_plans(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è"""
    from services.reading_plans import ReadingPlansService
    plans_service = ReadingPlansService()
    plans = plans_service.get_all_plans()
    if not plans:
        await callback.message.edit_text("–ü–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∏–∑ state
    user_data = await state.get_data()
    current_plan_id = user_data.get('current_reading_plan')
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=(f"üëâ {plan.title}" if plan.plan_id ==
                      current_plan_id else plan.title),
                callback_data=f"readingplan_{plan.plan_id}")]
            for plan in plans
        ]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω —á—Ç–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data.regexp(r'^readingdone_(.+)_(\d+)$'))
async def mark_reading_done(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π"""
    import re
    from database.universal_manager import universal_db_manager as db_manager

    m = re.match(r'^readingdone_(.+)_(\d+)$', callback.data)
    if not m:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    plan_id = m.group(1)
    day = int(m.group(2))
    user_id = callback.from_user.id

    # –û—Ç–º–µ—á–∞–µ–º –¥–µ–Ω—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db_manager.mark_reading_day_completed(user_id, plan_id, day)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    await callback.answer("‚úÖ –î–µ–Ω—å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π!")

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–Ω–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    from services.reading_plans import ReadingPlansService
    plans_service = ReadingPlansService()
    plan = plans_service.get_plan(plan_id)
    if not plan:
        return

    # –ù–∞—Ö–æ–¥–∏–º —á—Ç–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
    reading_text = None
    for day_num, reading in plan.days:
        if day_num == day:
            reading_text = reading
            break

    if not reading_text:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    completed = await db_manager.is_reading_day_completed(user_id, plan_id, day)

    # –†–∞–∑–±–∏–≤–∞–µ–º —á—Ç–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É ";"
    parts = [p.strip() for p in reading_text.split(';') if p.strip()]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
    entry_buttons = []
    for i, part in enumerate(parts):
        entry_buttons.append([
            InlineKeyboardButton(
                text=part,
                callback_data=f"readingtext_{plan_id}_{day}_{i}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = [
        [InlineKeyboardButton(
            text="‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ" if not completed else "–£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ",
            callback_data=f"readingdone_{plan_id}_{day}" if not completed else "noop"
        )],
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –¥–Ω–µ–π",
            callback_data=f"readingplan_{plan_id}"
        )]
    ]

    kb = InlineKeyboardMarkup(
        inline_keyboard=entry_buttons + control_buttons
    )
    await callback.message.edit_reply_markup(reply_markup=kb)


@router.callback_query(F.data.regexp(r'^readingpartdone_(.+)_(\d+)_(\d+)$'))
async def mark_reading_part_done(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å —á–∞—Å—Ç—å –¥–Ω—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é"""
    import re
    from database.universal_manager import universal_db_manager as db_manager

    m = re.match(r'^readingpartdone_(.+)_(\d+)_(\d+)$', callback.data)
    if not m:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    plan_id = m.group(1)
    day = int(m.group(2))
    part_idx = int(m.group(3))
    user_id = callback.from_user.id

    # –û—Ç–º–µ—á–∞–µ–º —á–∞—Å—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db_manager.mark_reading_part_completed(user_id, plan_id, day, part_idx)

    await callback.answer("‚úÖ –ß–∞—Å—Ç—å –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è!")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    part_completed = True  # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
    action_buttons = [
        [InlineKeyboardButton(
            text="‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ" if not part_completed else "–£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ",
            callback_data=f"readingpartdone_{plan_id}_{day}_{part_idx}" if not part_completed else "noop"
        )],
        [InlineKeyboardButton(
            text="ü§ñ –†–∞–∑–±–æ—Ä –æ—Ç –ò–ò",
            callback_data=f"readingai_{plan_id}_{day}_{part_idx}"
        )],
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–Ω—é",
            callback_data=f"readingday_{plan_id}_{day}"
        )]
    ]

    kb = InlineKeyboardMarkup(inline_keyboard=action_buttons)
    await callback.message.edit_reply_markup(reply_markup=kb)


@router.callback_query(F.data.regexp(r'^readingai_(.+)_(\d+)_(\d+)$'))
async def reading_ai_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ò–ò-—Ä–∞–∑–±–æ—Ä –¥–ª—è —á–∞—Å—Ç–∏ –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è"""
    import re
    from services.reading_plans import ReadingPlansService

    # --- AI LIMIT CHECK ---
    user_id = callback.from_user.id
    if not await ai_check_and_increment_db(user_id):
        await callback.message.answer("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        await callback.answer()
        return

    m = re.match(r'^readingai_(.+)_(\d+)_(\d+)$', callback.data)
    if not m:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    plan_id = m.group(1)
    day = int(m.group(2))
    part_idx = int(m.group(3))

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏ —á—Ç–µ–Ω–∏—è
    plans_service = ReadingPlansService()
    plan = plans_service.get_plan(plan_id)
    if not plan:
        await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ù–∞—Ö–æ–¥–∏–º —á—Ç–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
    reading_text = None
    for day_num, reading in plan.days:
        if day_num == day:
            reading_text = reading
            break

    if not reading_text:
        await callback.answer("–î–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å —á—Ç–µ–Ω–∏—è
    reading_parts = [p.strip() for p in reading_text.split(';') if p.strip()]
    if part_idx >= len(reading_parts):
        await callback.answer("–û—Ç—Ä—ã–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    reading_part = reading_parts[part_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò –Ω–∞–ø—Ä—è–º—É—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —á–∞—Å—Ç–∏
    prompt = f"–û–±—ä—è—Å–Ω–∏ —Å–º—ã—Å–ª –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∏–±–ª–µ–π—Å–∫–æ–≥–æ –æ—Ç—Ä—ã–≤–∫–∞: {reading_part}\n\n–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö –∏ –¥—É—Ö–æ–≤–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏."

    try:
        response = await ask_gpt_explain(prompt)
        formatted, opts = format_ai_or_commentary(
            response, title="ü§ñ –†–∞–∑–±–æ—Ä –æ—Ç –ò–ò")

        from utils.text_utils import split_text
        text_parts = list(split_text(formatted))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        for idx, part in enumerate(text_parts):
            if idx == len(text_parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—á–∏—Ç–∞–Ω–∞ –ª–∏ —ç—Ç–∞ —á–∞—Å—Ç—å
                from database.universal_manager import universal_db_manager as db_manager
                user_id = callback.from_user.id
                part_completed = db_manager.is_reading_part_completed(
                    user_id, plan_id, day, part_idx)

                # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –ò–ò-—Ä–∞–∑–±–æ—Ä–æ–º
                ai_buttons = [
                    [InlineKeyboardButton(
                        text="‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ" if not part_completed else "–£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ",
                        callback_data=f"readingpartdone_{plan_id}_{day}_{part_idx}" if not part_completed else "noop"
                    )],
                    [InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–Ω—é",
                        callback_data=f"readingday_{plan_id}_{day}"
                    )]
                ]

                kb = InlineKeyboardMarkup(inline_keyboard=ai_buttons)
                msg = await callback.message.answer(part, reply_markup=kb, **opts)
            else:
                msg = await callback.message.answer(part, **opts)

            if state:
                await state.update_data(last_topic_ai_msg_id=msg.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await callback.answer()


@router.callback_query(F.data == "noop")
async def noop_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏ ---
@router.message(F.text == "/debug")
async def debug_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = message.from_user.id
    await message.answer(f"–í–∞—à ID: {user_id}\n\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:\n{await state.get_data()}")
