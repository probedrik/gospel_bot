"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è –ë–∏–±–ª–∏–∏.
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from keyboards.main import (
    create_reading_plans_keyboard,
    create_plan_overview_keyboard,
    create_plan_day_keyboard,
    create_user_plans_keyboard,
    create_reading_navigation_keyboard,
    get_main_keyboard
)
from services.reading_plans import reading_plans_service
from database.db_manager import db_manager
from utils.api_client import bible_api
from utils.bible_data import bible_data
from middleware.state import get_current_translation

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è
router = Router()


@router.message(F.text == "üìÖ –ü–ª–∞–Ω —á—Ç–µ–Ω–∏—è")
async def show_reading_plans(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è"""
    try:
        await message.answer(
            "üìÖ <b>–ü–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è –ë–∏–±–ª–∏–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω —á—Ç–µ–Ω–∏—è –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã:",
            reply_markup=create_reading_plans_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è.")


@router.callback_query(F.data == "reading_plans")
async def callback_reading_plans(callback: CallbackQuery, state: FSMContext):
    """Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è"""
    try:
        await callback.message.edit_text(
            "üìÖ <b>–ü–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è –ë–∏–±–ª–∏–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω —á—Ç–µ–Ω–∏—è –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã:",
            reply_markup=create_reading_plans_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è.")


@router.callback_query(F.data.startswith("select_plan_"))
async def select_reading_plan(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è"""
    try:
        plan_id = callback.data.replace("select_plan_", "")
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        plan = reading_plans_service.get_plan(plan_id)
        if not plan:
            await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–ª–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_plan = await db_manager.get_user_reading_plan(user_id, plan_id)

        if existing_plan:
            # –ü–ª–∞–Ω —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            current_day = existing_plan['current_day']
            await callback.message.edit_text(
                f"üìã <b>{plan.title}</b>\n\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –¥–µ–Ω—å {current_day} –∏–∑ {plan.total_days}\n"
                f"üìÖ –í—Å–µ–≥–æ –¥–Ω–µ–π: {plan.total_days}\n\n"
                "–≠—Ç–æ—Ç –ø–ª–∞–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã.",
                reply_markup=create_plan_overview_keyboard(
                    plan_id, current_day)
            )
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
            await db_manager.set_user_reading_plan(user_id, plan_id, 1)

            await callback.message.edit_text(
                f"‚úÖ <b>–ü–ª–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üìã {plan.title}\n"
                f"üìÖ –í—Å–µ–≥–æ –¥–Ω–µ–π: {plan.total_days}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è.",
                reply_markup=create_plan_overview_keyboard(plan_id, 1)
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞.")


@router.callback_query(F.data == "my_reading_plans")
async def show_user_plans(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        user_plans = await db_manager.get_user_reading_plans(user_id)

        if user_plans:
            text = f"üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã ({len(user_plans)})</b>\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è:"
        else:
            text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è."

        await callback.message.edit_text(
            text,
            reply_markup=create_user_plans_keyboard(user_plans)
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–ª–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –ø–ª–∞–Ω–æ–≤.")


@router.callback_query(F.data.startswith("view_plan_"))
async def view_plan(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    try:
        plan_id = callback.data.replace("view_plan_", "")
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        plan = reading_plans_service.get_plan(plan_id)
        user_plan = await db_manager.get_user_reading_plan(user_id, plan_id)

        if not plan or not user_plan:
            await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        current_day = user_plan['current_day']

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        completed_days = await db_manager.get_reading_progress_async(user_id, plan_id)
        progress_percent = round(
            (len(completed_days) / plan.total_days) * 100, 1)

        text = (
            f"üìã <b>{plan.title}</b>\n\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {len(completed_days)}/{plan.total_days} –¥–Ω–µ–π ({progress_percent}%)\n"
            f"üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {current_day}\n"
            f"üìñ –í—Å–µ–≥–æ –¥–Ω–µ–π: {plan.total_days}\n\n"
        )

        if completed_days:
            text += f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –¥–Ω–µ–π: {len(completed_days)}\n"

        await callback.message.edit_text(
            text,
            reply_markup=create_plan_overview_keyboard(plan_id, current_day)
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–ª–∞–Ω–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞.")


@router.callback_query(F.data.startswith("plan_day_"))
async def show_plan_day(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –ø–ª–∞–Ω–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: plan_day_{plan_id}_{day}
        # plan_id –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –±–µ—Ä–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –∫–∞–∫ plan_id
        parts = callback.data.split("_")
        day = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –≤—Å–µ–≥–¥–∞ –¥–µ–Ω—å
        # –í—Å–µ –º–µ–∂–¥—É "plan_day" –∏ –¥–Ω–µ–º - —ç—Ç–æ plan_id
        plan_id = "_".join(parts[2:-1])
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –∏ –¥–Ω–µ
        plan = reading_plans_service.get_plan(plan_id)
        if not plan:
            await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        reading = reading_plans_service.get_plan_day(plan_id, day)
        if not reading:
            await callback.answer("–î–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—á–∏—Ç–∞–Ω –ª–∏ –¥–µ–Ω—å
        is_completed = await db_manager.is_reading_day_completed_async(user_id, plan_id, day)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        has_previous = reading_plans_service.get_previous_day(
            plan_id, day) is not None
        has_next = reading_plans_service.get_next_day(plan_id, day) is not None

        # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è
        references = reading_plans_service.parse_reading_references(reading)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        status_icon = "‚úÖ" if is_completed else "üìñ"
        text = (
            f"{status_icon} <b>–î–µ–Ω—å {day}</b> - {plan.title}\n\n"
            f"üìñ <b>–ß—Ç–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({len(references)} –æ—Ç—Ä—ã–≤–∫–æ–≤):</b>\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        for i, ref in enumerate(references, 1):
            text += f"{i}. {ref}\n"

        if is_completed:
            text += f"\n‚úÖ <i>–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ</i>"

        text += f"\nüí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ—Ç—Ä—ã–≤–æ–∫ –Ω–∏–∂–µ –¥–ª—è —á—Ç–µ–Ω–∏—è</i>"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db_manager.update_reading_plan_day(user_id, plan_id, day)

        await callback.message.edit_text(
            text,
            reply_markup=create_plan_day_keyboard(
                plan_id, day, is_completed, has_previous, has_next, references
            )
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–Ω—è –ø–ª–∞–Ω–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–Ω—è.")


@router.callback_query(F.data.startswith("mark_day_"))
async def mark_day_completed(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ—á–∞–µ—Ç –¥–µ–Ω—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π"""
    try:
        parts = callback.data.split("_")
        day = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –≤—Å–µ–≥–¥–∞ –¥–µ–Ω—å
        # –í—Å–µ –º–µ–∂–¥—É "mark_day" –∏ –¥–Ω–µ–º - —ç—Ç–æ plan_id
        plan_id = "_".join(parts[2:-1])
        user_id = callback.from_user.id

        # –û—Ç–º–µ—á–∞–µ–º –¥–µ–Ω—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
        await db_manager.mark_reading_day_completed_async(user_id, plan_id, day)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await show_plan_day(callback, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –¥–Ω—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –¥–Ω—è.")


@router.callback_query(F.data.startswith("unmark_day_"))
async def unmark_day_completed(callback: CallbackQuery, state: FSMContext):
    """–°–Ω–∏–º–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É —Å –¥–Ω—è"""
    try:
        parts = callback.data.split("_")
        day = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –≤—Å–µ–≥–¥–∞ –¥–µ–Ω—å
        # –í—Å–µ –º–µ–∂–¥—É "unmark_day" –∏ –¥–Ω–µ–º - —ç—Ç–æ plan_id
        plan_id = "_".join(parts[2:-1])
        user_id = callback.from_user.id

        # –£–¥–∞–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º completed = 0)
        def _execute():
            import sqlite3
            conn = sqlite3.connect(db_manager.db_file)
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE reading_progress 
                SET completed = 0 
                WHERE user_id=? AND plan_id=? AND day=?
            ''', (user_id, plan_id, day))
            conn.commit()
            conn.close()

        import asyncio
        await asyncio.to_thread(_execute)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await show_plan_day(callback, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –æ—Ç–º–µ—Ç–∫–∏ –¥–Ω—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –æ—Ç–º–µ—Ç–∫–∏.")


@router.callback_query(F.data.startswith("clear_progress_"))
async def clear_plan_progress(callback: CallbackQuery, state: FSMContext):
    """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–ª–∞–Ω—É"""
    try:
        plan_id = callback.data.replace("clear_progress_", "")
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        plan = reading_plans_service.get_plan(plan_id)
        if not plan:
            await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (—É–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–º–µ—Ç–∫–∏ –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–Ω—è—Ö)
        def _execute():
            import sqlite3
            conn = sqlite3.connect(db_manager.db_file)
            cursor = conn.cursor()
            cursor.execute('''
                DELETE FROM reading_progress 
                WHERE user_id=? AND plan_id=?
            ''', (user_id, plan_id))
            conn.commit()
            conn.close()

        import asyncio
        await asyncio.to_thread(_execute)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–∞ 1
        await db_manager.update_reading_plan_day(user_id, plan_id, 1)

        await callback.message.edit_text(
            f"üóëÔ∏è <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ—á–∏—â–µ–Ω</b>\n\n"
            f"–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–ª–∞–Ω—É \"{plan.title}\" –±—ã–ª –æ—á–∏—â–µ–Ω.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è.",
            reply_markup=create_plan_overview_keyboard(plan_id, 1)
        )
        await callback.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –æ—á–∏—â–µ–Ω.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")


@router.callback_query(F.data.startswith("plan_progress_"))
async def show_plan_progress(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–ª–∞–Ω—É"""
    try:
        plan_id = callback.data.replace("plan_progress_", "")
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        plan = reading_plans_service.get_plan(plan_id)
        if not plan:
            await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        completed_days = await db_manager.get_reading_progress_async(user_id, plan_id)
        progress_percent = round(
            (len(completed_days) / plan.total_days) * 100, 1)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        text = (
            f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–ª–∞–Ω—É</b>\n"
            f"üìã {plan.title}\n\n"
            f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {len(completed_days)} –∏–∑ {plan.total_days} –¥–Ω–µ–π\n"
            f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent}%\n\n"
        )

        if completed_days:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–Ω–∏
            recent_days = sorted(completed_days, reverse=True)[:10]
            text += "üìñ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–Ω–∏:</b>\n"
            for day in recent_days:
                text += f"‚Ä¢ –î–µ–Ω—å {day}\n"

            if len(completed_days) > 10:
                text += f"... –∏ –µ—â–µ {len(completed_days) - 10} –¥–Ω–µ–π\n"
        else:
            text += "–ü–æ–∫–∞ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è."

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        user_plan = await db_manager.get_user_reading_plan(user_id, plan_id)
        current_day = user_plan['current_day'] if user_plan else 1

        await callback.message.edit_text(
            text,
            reply_markup=create_plan_overview_keyboard(plan_id, current_day)
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ –ø–ª–∞–Ω–∞
@router.callback_query(F.data.startswith("plan_select_day_"))
async def select_plan_day(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –ø–ª–∞–Ω–∞"""
    try:
        plan_id = callback.data.replace("plan_select_day_", "")
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        plan = reading_plans_service.get_plan(plan_id)
        if not plan:
            await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_plan = await db_manager.get_user_reading_plan(user_id, plan_id)
        current_day = user_plan['current_day'] if user_plan else 1

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        completed_days = await db_manager.get_reading_progress_async(user_id, plan_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è
        text = (
            f"üìÖ <b>–í—ã–±–æ—Ä –¥–Ω—è –ø–ª–∞–Ω–∞</b>\n"
            f"üìã {plan.title}\n\n"
            f"üìñ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {current_day}\n"
            f"üìä –í—Å–µ–≥–æ –¥–Ω–µ–π: {plan.total_days}\n"
            f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {len(completed_days)} –¥–Ω–µ–π\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–Ω—è (–æ—Ç 1 –¥–æ {}) –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:".format(
                plan.total_days)
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(selecting_day_for_plan=plan_id)

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=f"view_plan_{plan_id}"
                )]
            ])
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–Ω—è –ø–ª–∞–Ω–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–Ω—è.")


@router.message(F.text.regexp(r'^\d+$'))
async def handle_day_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –¥–Ω—è –¥–ª—è –ø–ª–∞–Ω–∞"""
    try:
        data = await state.get_data()
        plan_id = data.get('selecting_day_for_plan')

        if not plan_id:
            return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞ –¥–Ω—è

        day = int(message.text)
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        plan = reading_plans_service.get_plan(plan_id)
        if not plan:
            await message.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–Ω—è
        if day < 1 or day > plan.total_days:
            await message.answer(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {plan.total_days}."
            )
            return

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(selecting_day_for_plan=None)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db_manager.update_reading_plan_day(user_id, plan_id, day)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        reading = reading_plans_service.get_plan_day(plan_id, day)
        if not reading:
            await message.answer("–î–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—á–∏—Ç–∞–Ω –ª–∏ –¥–µ–Ω—å
        is_completed = await db_manager.is_reading_day_completed_async(user_id, plan_id, day)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        has_previous = reading_plans_service.get_previous_day(
            plan_id, day) is not None
        has_next = reading_plans_service.get_next_day(plan_id, day) is not None

        # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è
        references = reading_plans_service.parse_reading_references(reading)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        status_icon = "‚úÖ" if is_completed else "üìñ"
        text = (
            f"{status_icon} <b>–î–µ–Ω—å {day}</b> - {plan.title}\n\n"
            f"üìñ <b>–ß—Ç–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({len(references)} –æ—Ç—Ä—ã–≤–∫–æ–≤):</b>\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        for i, ref in enumerate(references, 1):
            text += f"{i}. {ref}\n"

        if is_completed:
            text += f"\n‚úÖ <i>–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ</i>"

        text += f"\nüí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ—Ç—Ä—ã–≤–æ–∫ –Ω–∏–∂–µ –¥–ª—è —á—Ç–µ–Ω–∏—è</i>"

        await message.answer(
            text,
            reply_markup=create_plan_day_keyboard(
                plan_id, day, is_completed, has_previous, has_next, references
            )
        )

    except ValueError:
        # –ù–µ —á–∏—Å–ª–æ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –¥–Ω—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–Ω—è.")


@router.callback_query(F.data.startswith("reading_ref_"))
async def show_reading_reference(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –¥–Ω—è –ø–ª–∞–Ω–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: reading_ref_{plan_id}_{day}_{ref_index}
        parts = callback.data.split("_")
        ref_index = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –∏–Ω–¥–µ–∫—Å —Å—Å—ã–ª–∫–∏
        day = int(parts[-2])  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –¥–µ–Ω—å
        # –í—Å–µ –º–µ–∂–¥—É "reading_ref" –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–≤—É–º—è —á–∞—Å—Ç—è–º–∏
        plan_id = "_".join(parts[2:-2])

        # –ü–æ–ª—É—á–∞–µ–º —á—Ç–µ–Ω–∏–µ –¥–Ω—è
        reading = reading_plans_service.get_plan_day(plan_id, day)
        if not reading:
            await callback.answer("–ß—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏
        references = reading_plans_service.parse_reading_references(reading)
        if ref_index >= len(references):
            await callback.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        current_ref = references[ref_index]
        translation = await get_current_translation(state)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ API
        try:
            text = await bible_api.get_verse_by_reference(current_ref, translation)
            if not text:
                text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è: {current_ref}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {current_ref}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ –≤ –∑–∞–∫–ª–∞–¥–∫–∏
        user_id = callback.from_user.id
        try:
            from utils.reference_parser import parse_reference
            parsed_ref = parse_reference(current_ref)
            is_bookmarked = False

            if parsed_ref:
                book_name = parsed_ref['book']
                chapter = parsed_ref['chapter']
                verse_start = parsed_ref.get('verse_start', 1)
                verse_end = parsed_ref.get('verse_end', verse_start)
                book_id = bible_data.get_book_id(book_name)

                if book_id:
                    is_bookmarked = await db_manager.is_bookmark_exists_detailed(
                        user_id, book_id, chapter, verse_start, verse_end
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
            is_bookmarked = False

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"üìñ <b>–î–µ–Ω—å {day}</b> - –ß—Ç–µ–Ω–∏–µ {ref_index + 1}/{len(references)}\n"
            f"üìù <b>{current_ref}</b>\n\n"
            f"{text}"
        )

        await callback.message.edit_text(
            message_text,
            reply_markup=create_reading_navigation_keyboard(
                references, ref_index, plan_id, day, is_bookmarked
            )
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á—Ç–µ–Ω–∏—è.")


@router.callback_query(F.data.startswith("lopukhin_reading_"))
async def show_lopukhin_commentary_reading(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –õ–æ–ø—É—Ö–∏–Ω–∞ –¥–ª—è –æ—Ç—Ä—ã–≤–∫–∞ –∏–∑ –ø–ª–∞–Ω–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: lopukhin_reading_{plan_id}_{day}_{ref_index}
        parts = callback.data.split("_")
        ref_index = int(parts[-1])
        day = int(parts[-2])
        plan_id = "_".join(parts[2:-2])

        # –ü–æ–ª—É—á–∞–µ–º —á—Ç–µ–Ω–∏–µ –¥–Ω—è
        reading = reading_plans_service.get_plan_day(plan_id, day)
        if not reading:
            await callback.answer("–ß—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏
        references = reading_plans_service.parse_reading_references(reading)
        if ref_index >= len(references):
            await callback.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        current_ref = references[ref_index]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ...")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –õ–æ–ø—É—Ö–∏–Ω–∞ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API
        try:
            # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –∏ –≥–ª–∞–≤—ã
            from utils.reference_parser import parse_reference
            parsed_ref = parse_reference(current_ref)

            if parsed_ref:
                book_name = parsed_ref['book']
                chapter = parsed_ref['chapter']

                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API
                commentary = await bible_api.get_lopukhin_commentary(book_name, chapter)

                if commentary:
                    commentary_text = (
                        f"üìù <b>–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –õ–æ–ø—É—Ö–∏–Ω–∞</b>\n\n"
                        f"üìñ <b>{current_ref}</b>\n\n"
                        f"{commentary}"
                    )
                else:
                    commentary_text = (
                        f"üìù <b>–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –õ–æ–ø—É—Ö–∏–Ω–∞</b>\n\n"
                        f"üìñ <b>{current_ref}</b>\n\n"
                        "–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç—Ä—ã–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                    )
            else:
                commentary_text = (
                    f"üìù <b>–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –õ–æ–ø—É—Ö–∏–Ω–∞</b>\n\n"
                    f"üìñ <b>{current_ref}</b>\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –õ–æ–ø—É—Ö–∏–Ω–∞: {e}")
            commentary_text = (
                f"üìù <b>–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –õ–æ–ø—É—Ö–∏–Ω–∞</b>\n\n"
                f"üìñ <b>{current_ref}</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è."
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ –≤ –∑–∞–∫–ª–∞–¥–∫–∏
        user_id = callback.from_user.id
        is_bookmarked = await db_manager.is_bookmark_exists(user_id, current_ref)

        await callback.message.edit_text(
            commentary_text,
            reply_markup=create_reading_navigation_keyboard(
                references, ref_index, plan_id, day, is_bookmarked
            )
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è.")


@router.callback_query(F.data.startswith("ai_reading_"))
async def show_ai_analysis_reading(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ò–ò-—Ä–∞–∑–±–æ—Ä –¥–ª—è –æ—Ç—Ä—ã–≤–∫–∞ –∏–∑ –ø–ª–∞–Ω–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: ai_reading_{plan_id}_{day}_{ref_index}
        parts = callback.data.split("_")
        ref_index = int(parts[-1])
        day = int(parts[-2])
        plan_id = "_".join(parts[2:-2])

        # –ü–æ–ª—É—á–∞–µ–º —á—Ç–µ–Ω–∏–µ –¥–Ω—è
        reading = reading_plans_service.get_plan_day(plan_id, day)
        if not reading:
            await callback.answer("–ß—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏
        references = reading_plans_service.parse_reading_references(reading)
        if ref_index >= len(references):
            await callback.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        current_ref = references[ref_index]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ò–ò-–∞–Ω–∞–ª–∏–∑...")

        # –ü–æ–ª—É—á–∞–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—Ä—ã–≤–∫–∞
            translation = await get_current_translation(state)
            verse_text = await bible_api.get_verse_by_reference(current_ref, translation)

            if verse_text:
                # –ü–æ–ª—É—á–∞–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
                from services.ai_service import ai_service
                analysis = await ai_service.analyze_verse(verse_text, current_ref)

                if analysis:
                    ai_text = (
                        f"ü§ñ <b>–ò–ò-—Ä–∞–∑–±–æ—Ä</b>\n\n"
                        f"üìñ <b>{current_ref}</b>\n\n"
                        f"{analysis}"
                    )
                else:
                    ai_text = (
                        f"ü§ñ <b>–ò–ò-—Ä–∞–∑–±–æ—Ä</b>\n\n"
                        f"üìñ <b>{current_ref}</b>\n\n"
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ò–ò-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç—Ä—ã–≤–∫–∞."
                    )
            else:
                ai_text = (
                    f"ü§ñ <b>–ò–ò-—Ä–∞–∑–±–æ—Ä</b>\n\n"
                    f"üìñ <b>{current_ref}</b>\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç—Ä—ã–≤–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: {e}")
            ai_text = (
                f"ü§ñ <b>–ò–ò-—Ä–∞–∑–±–æ—Ä</b>\n\n"
                f"üìñ <b>{current_ref}</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞."
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ –≤ –∑–∞–∫–ª–∞–¥–∫–∏
        user_id = callback.from_user.id
        is_bookmarked = await db_manager.is_bookmark_exists(user_id, current_ref)

        await callback.message.edit_text(
            ai_text,
            reply_markup=create_reading_navigation_keyboard(
                references, ref_index, plan_id, day, is_bookmarked
            )
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞.")


@router.callback_query(F.data.startswith("add_bookmark_reading_"))
async def add_bookmark_reading(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ –ø–ª–∞–Ω–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: add_bookmark_reading_{plan_id}_{day}_{ref_index}
        parts = callback.data.split("_")
        ref_index = int(parts[-1])
        day = int(parts[-2])
        plan_id = "_".join(parts[3:-2])

        # –ü–æ–ª—É—á–∞–µ–º —á—Ç–µ–Ω–∏–µ –¥–Ω—è
        reading = reading_plans_service.get_plan_day(plan_id, day)
        if not reading:
            await callback.answer("–ß—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏
        references = reading_plans_service.parse_reading_references(reading)
        if ref_index >= len(references):
            await callback.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        current_ref = references[ref_index]
        user_id = callback.from_user.id

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–∫–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
        try:
            # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            from utils.reference_parser import parse_reference
            parsed_ref = parse_reference(current_ref)

            if parsed_ref:
                book_name = parsed_ref['book']
                chapter = parsed_ref['chapter']
                verse_start = parsed_ref.get('verse_start', 1)
                verse_end = parsed_ref.get('verse_end', verse_start)

                # –ü–æ–ª—É—á–∞–µ–º book_id –∏–∑ bible_data
                book_id = bible_data.get_book_id(book_name)

                if book_id:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª–∞–¥–∫—É
                    await db_manager.add_bookmark_detailed(
                        user_id=user_id,
                        book_id=book_id,
                        chapter=chapter,
                        verse_start=verse_start,
                        verse_end=verse_end,
                        note=f"–ò–∑ –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è: {plan_id}, –¥–µ–Ω—å {day}"
                    )
                    await callback.answer("üìå –ó–∞–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    is_bookmarked = True
                else:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏.")
                    is_bookmarked = False
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏.")
                is_bookmarked = False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏.")
            is_bookmarked = False

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_reply_markup(
            reply_markup=create_reading_navigation_keyboard(
                references, ref_index, plan_id, day, is_bookmarked
            )
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏.")


@router.callback_query(F.data.startswith("remove_bookmark_reading_"))
async def remove_bookmark_reading(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ –ø–ª–∞–Ω–∞ –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: remove_bookmark_reading_{plan_id}_{day}_{ref_index}
        parts = callback.data.split("_")
        ref_index = int(parts[-1])
        day = int(parts[-2])
        plan_id = "_".join(parts[3:-2])

        # –ü–æ–ª—É—á–∞–µ–º —á—Ç–µ–Ω–∏–µ –¥–Ω—è
        reading = reading_plans_service.get_plan_day(plan_id, day)
        if not reading:
            await callback.answer("–ß—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫–∏
        references = reading_plans_service.parse_reading_references(reading)
        if ref_index >= len(references):
            await callback.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        current_ref = references[ref_index]
        user_id = callback.from_user.id

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
        try:
            # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            from utils.reference_parser import parse_reference
            parsed_ref = parse_reference(current_ref)

            if parsed_ref:
                book_name = parsed_ref['book']
                chapter = parsed_ref['chapter']
                verse_start = parsed_ref.get('verse_start', 1)
                verse_end = parsed_ref.get('verse_end', verse_start)

                # –ü–æ–ª—É—á–∞–µ–º book_id –∏–∑ bible_data
                book_id = bible_data.get_book_id(book_name)

                if book_id:
                    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–ª–∞–¥–∫—É
                    await db_manager.remove_bookmark_detailed(
                        user_id=user_id,
                        book_id=book_id,
                        chapter=chapter,
                        verse_start=verse_start,
                        verse_end=verse_end
                    )
                    await callback.answer("üóëÔ∏è –ó–∞–∫–ª–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
                    is_bookmarked = False
                else:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏.")
                    is_bookmarked = True
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏.")
                is_bookmarked = True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏.")
            is_bookmarked = True

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_reply_markup(
            reply_markup=create_reading_navigation_keyboard(
                references, ref_index, plan_id, day, is_bookmarked
            )
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏.")
