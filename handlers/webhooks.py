"""
Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""
import logging
import json
from typing import Dict, Any
from services.payment_service import payment_service

logger = logging.getLogger(__name__)


async def handle_yookassa_webhook(webhook_data: Dict[str, Any]) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç –ÆKassa
    
    Args:
        webhook_data: –î–∞–Ω–Ω—ã–µ webhook –æ—Ç –ÆKassa
        
    Returns:
        True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        event_type = webhook_data.get("event", "")
        
        if event_type != "payment.succeeded":
            logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –ÆKassa —Å —Ç–∏–ø–æ–º {event_type}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        payment_object = webhook_data.get("object", {})
        payment_id = payment_object.get("id", "")
        
        if not payment_id:
            logger.error("‚ùå Webhook –ÆKassa: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç payment_id")
            return False
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω webhook –ÆKassa –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API
        payment_data = await payment_service.check_payment_status(payment_id)
        
        if not payment_data:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å–ø–µ—à–µ–Ω
        if not payment_data.get("paid", False):
            logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –æ–ø–ª–∞—á–µ–Ω, —Å—Ç–∞—Ç—É—Å: {payment_data.get('status')}")
            return True
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        success = await payment_service.process_successful_payment(payment_data)
        
        if success:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_payment_notification(payment_data)
            
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ÆKassa: {e}")
        return False


async def send_payment_notification(payment_data: Dict[str, Any]):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
    
    Args:
        payment_data: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    """
    try:
        from bot import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
        
        metadata = payment_data.get("metadata", {})
        user_id = int(metadata.get("user_id", 0))
        payment_type = metadata.get("type", "")
        amount = payment_data.get("amount", 0)
        
        if not user_id:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω user_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
        
        if payment_type == "premium_requests":
            requests_count = int(metadata.get("requests_count", 0))
            
            message = (
                f"‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"
                f"üí∞ **–°—É–º–º–∞:** {amount}‚ÇΩ\n"
                f"üß† **–ü–æ–ª—É—á–µ–Ω–æ:** {requests_count} –ø—Ä–µ–º–∏—É–º –ò–ò –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                f"üéâ **–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞!**\n"
                f"–ü—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–≥–æ—Ä–∞—é—Ç –∏ –¥–∞—é—Ç –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.\n\n"
                f"üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å: /settings ‚Üí –ü—Ä–µ–º–∏—É–º –ò–ò"
            )
            
        elif payment_type == "donation":
            message = (
                f"üíù **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ!**\n\n"
                f"üí∞ **–°—É–º–º–∞:** {amount}‚ÇΩ\n\n"
                f"üôè **–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –±–æ—Ç–∞!**\n"
                f"–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞:\n"
                f"‚Ä¢ –û–ø–ª–∞—Ç—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ —Ö–æ—Å—Ç–∏–Ω–≥–∞\n"
                f"‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞\n"
                f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n\n"
                f"‚ù§Ô∏è **–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à—É —â–µ–¥—Ä–æ—Å—Ç—å!**"
            )
            
        else:
            message = f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"
        
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode="Markdown"
        )
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook —Å–µ–∫—Ä–µ—Ç–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
def verify_webhook_signature(webhook_data: str, signature: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å webhook (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω WEBHOOK_SECRET)
    
    Args:
        webhook_data: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ webhook
        signature: –ü–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        
    Returns:
        True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
    """
    from config.ai_settings import YOOKASSA_WEBHOOK_SECRET
    
    # –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if not YOOKASSA_WEBHOOK_SECRET:
        logger.info("YOOKASSA_WEBHOOK_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏")
        return True
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # –î–ª—è –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    return True