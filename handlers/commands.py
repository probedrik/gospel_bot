"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
"""
import logging
from datetime import datetime
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from keyboards.main import get_main_keyboard, create_book_keyboard
from utils.api_client import bible_api
from utils.bible_data import bible_data
from middleware.state import set_page, get_current_translation, get_chosen_book, get_current_chapter, get_bookmarks

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
router = Router()


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext, db=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    try:
        # –í aiogram 3.x –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–µ—Ä–µ–¥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if db:
            await db.add_user(user_id, username, first_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")

    welcome_text = (
        f"üôè –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
        "üìñ –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏ –ë–∏–±–ª–∏–∏\n"
        "‚ú® –ü–æ–ª—É—á–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∏—Ö–∏\n"
        "üìå –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
        "üîç –ò—Å–∫–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ë—ã—Ç 1:1')\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )

    await message.answer(welcome_text, reply_markup=get_main_keyboard())


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìö <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å\n"
        "‚Ä¢ /books - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥\n"
        "‚Ä¢ /random - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö\n"
        "‚Ä¢ /bookmarks - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞–∫–ª–∞–¥–∫–∏\n\n"
        "–ü–æ–∏—Å–∫ –æ—Ç—Ä—ã–≤–∫–∞:\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ö–Ω–∏–≥–∞ –≥–ª–∞–≤–∞:—Å—Ç–∏—Ö], –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "–ë—ã—Ç 1:1 - –ü–µ—Ä–≤—ã–π —Å—Ç–∏—Ö –ë—ã—Ç–∏—è\n"
        "–ò–Ω 3:16 - 16-–π —Å—Ç–∏—Ö 3-–π –≥–ª–∞–≤—ã –ò–æ–∞–Ω–Ω–∞\n\n"
        "–î–ª—è —á—Ç–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏ –≥–ª–∞–≤—É –≤ –º–µ–Ω—é –±–æ—Ç–∞."
    )

    await message.answer(help_text)


@router.message(Command("books"))
async def cmd_books(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /books"""
    await set_page(state, 0)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:",
        reply_markup=create_book_keyboard(0)
    )


@router.message(Command("random"))
async def cmd_random(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random"""
    translation = await get_current_translation(state)
    text = await bible_api.get_random_verse(translation)
    await message.answer(text)


@router.message(Command("about"))
async def cmd_about(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about"""
    about_text = (
        "üì± <b>–û –±–æ—Ç–µ</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –ë–∏–±–ª–∏–∏ —Å —É–¥–æ–±–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ API:\n"
        "‚Ä¢ JustBible API - https://justbible.ru/\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã:\n"
        "‚Ä¢ –°–∏–Ω–æ–¥–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ (RST)\n"
        "‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –†–ë–û (RBO)\n\n"
        "–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–ª—É—á—à–∞–µ—Ç—Å—è. "
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º."
    )

    await message.answer(about_text)


@router.message(Command("test_db"))
async def test_db_command(message: Message, state: FSMContext, db=None):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ –ë–î"""
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test_db")

    result = [
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î:",
        f"- –û–±—ä–µ–∫—Ç db –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {'–î–∞' if db else '–ù–µ—Ç'}"
    ]

    if db:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –º–µ—Ç–æ–¥ get_user
            result.append(f"- –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î: {db.db_file}")

            # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.add_user(
                message.from_user.id,
                message.from_user.username or "",
                message.from_user.first_name or "test_user"
            )
            result.append("- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –£—Å–ø–µ—à–Ω–æ")

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await db.get_user(message.from_user.id)
            if user:
                result.append(
                    f"- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: –£—Å–ø–µ—à–Ω–æ (ID: {user.get('user_id')})")
            else:
                result.append(
                    "- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: –û—à–∏–±–∫–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)")

            # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–∫–ª–∞–¥–∫—É
            await db.add_bookmark(
                message.from_user.id,
                1,  # Genesis/–ë—ã—Ç–∏–µ
                1,  # Chapter 1
                "Test Bookmark"
            )
            result.append("- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–∫–ª–∞–¥–∫–∏: –£—Å–ø–µ—à–Ω–æ")

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏
            bookmarks = await db.get_bookmarks(message.from_user.id)
            result.append(
                f"- –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ –ë–î: {len(bookmarks)} –∑–∞–∫–ª–∞–¥–æ–∫")
        except Exception as e:
            result.append(f"- –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ë–î: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer("\n".join(result))


@router.message(Command("test_db_write"))
async def test_db_write(message: Message):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î"""
    user_id = message.from_user.id
    try:
        from database.db_manager import db_manager

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î
        db_file = db_manager.db_file
        logger.info(f"–ü—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î: {db_file}")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        db_manager._create_tables()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db_manager.add_user(user_id, message.from_user.username or "", message.from_user.first_name or "")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–∫–ª–∞–¥–∫—É
        book_id = 1  # –ë—ã—Ç–∏–µ
        chapter = 1
        display_text = "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–∫–ª–∞–¥–∫–∞: –ë—ã—Ç–∏–µ 1"

        result = await db_manager.add_bookmark(user_id, book_id, chapter, display_text)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–∫–ª–∞–¥–∫–∏: {result}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        bookmarks = await db_manager.get_bookmarks(user_id)
        logger.info(f"–ó–∞–∫–ª–∞–¥–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {bookmarks}")

        if bookmarks and len(bookmarks) > 0:
            await message.answer(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–∫–ª–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î: {display_text}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–∫–ª–∞–¥–∫—É –≤ –ë–î")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {str(e)[:100]}")


@router.message(Command("direct_bookmark"))
async def direct_bookmark(message: Message, state: FSMContext):
    """–ù–∞–ø—Ä—è–º—É—é –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –≥–ª–∞–≤—É –≤ –∑–∞–∫–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ db_manager"""
    user_id = message.from_user.id
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î –Ω–∞–ø—Ä—è–º—É—é
        from database.db_manager import db_manager

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É –∏ –≥–ª–∞–≤—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        # –¢–µ–ø–µ—Ä—å state –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏
        book_id = await get_chosen_book(state)
        chapter = await get_current_chapter(state)

        logger.info(
            f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏: user_id={user_id}, book_id={book_id}, chapter={chapter}")

        if not book_id or not chapter:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏ –≥–ª–∞–≤—É")
            return

        from utils.bible_data import bible_data
        book_name = bible_data.get_book_name(book_id)
        display_text = f"{book_name} {chapter}"

        # –§–æ—Ä—Å–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        db_manager._create_tables()
        logger.info("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø—Ä—è–º—ã–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–∫–ª–∞–¥–∫–∏")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        await db_manager.add_user(user_id, message.from_user.username or "", message.from_user.first_name or "")
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î –ø–µ—Ä–µ–¥ –ø—Ä—è–º—ã–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–∫–ª–∞–¥–∫–∏")

        # –ù–∞–ø—Ä—è–º—É—é –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î, –º–∏–Ω—É—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        result = await db_manager.add_bookmark(user_id, book_id, chapter, display_text)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏: {result}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∞—Å—å –ª–∏ –∑–∞–∫–ª–∞–¥–∫–∞
        bookmarks = await db_manager.get_bookmarks(user_id)
        bookmark_in_db = any(bm[0] == book_id and bm[1]
                             == chapter for bm in bookmarks)
        logger.info(
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–∫–ª–∞–¥–∫–∏ –≤ –ë–î –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {'–Ω–∞–π–¥–µ–Ω–∞' if bookmark_in_db else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")

        if result:
            await message.answer(f"‚úÖ –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î: {display_text}")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É –≤ –ë–î: {display_text}")

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")


@router.message(Command("check_db"))
async def check_db(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç"""
    try:
        from database.db_manager import db_manager

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        result = await db_manager.check_db_access()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = [f"üìä –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–î: {result['db_file']}"]

        if result['success']:
            report.append("‚úÖ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            report.append("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ë–î:")

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
        if 'dir_exists' in result:
            report.append(
                f"- –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if result['dir_exists'] else '–ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}")
        if 'dir_writable' in result:
            report.append(
                f"- –ó–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {'–¥–æ—Å—Ç—É–ø–Ω–∞' if result['dir_writable'] else '–ù–ï –¥–æ—Å—Ç—É–ø–Ω–∞'}")
        if 'file_exists' in result:
            report.append(
                f"- –§–∞–π–ª –ë–î: {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if result['file_exists'] else '–ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}")
        if 'file_size' in result:
            report.append(f"- –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {result['file_size']} –±–∞–π—Ç")
        if 'file_writable' in result:
            report.append(
                f"- –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {'–¥–æ—Å—Ç—É–ø–Ω–∞' if result['file_writable'] else '–ù–ï –¥–æ—Å—Ç—É–ø–Ω–∞'}")
        if 'sqlite_access' in result:
            report.append(
                f"- –î–æ—Å—Ç—É–ø SQLite: {'—É—Å–ø–µ—à–Ω—ã–π' if result['sqlite_access'] else '–û–®–ò–ë–ö–ê'}")
        if 'tables' in result:
            report.append(f"- –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î: {', '.join(result['tables'])}")

        # –û—à–∏–±–∫–∏
        if result['errors']:
            report.append("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:")
            for err in result['errors']:
                report.append(f"  - {err}")

        await message.answer("\n".join(report))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}", exc_info=True)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {str(e)[:100]}")


@router.message(Command("repair_db"))
async def repair_db_command(message: Message):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î"""
    try:
        from database.db_manager import db_manager

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        check_result = await db_manager.check_db_access()

        # –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if check_result['success'] and not check_result['errors']:
            await message.answer("‚úÖ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ë–î
        repair_result = await db_manager.repair_db()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = ["üîß –û—Ç—á–µ—Ç –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î:"]

        if repair_result['success']:
            report.append("‚úÖ –ë–î —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            report.append("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –Ω–µ —É–¥–∞–ª–æ—Å—å")

        # –î–µ–π—Å—Ç–≤–∏—è
        if repair_result['actions']:
            report.append("\n–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
            for action in repair_result['actions']:
                report.append(f"  - {action}")

        # –û—à–∏–±–∫–∏
        if repair_result['errors']:
            report.append("\n‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:")
            for err in repair_result['errors']:
                report.append(f"  - {err}")

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        check_result = await db_manager.check_db_access()
        if check_result['success']:
            report.append("\n‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        else:
            report.append("\n‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ë–î –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã")

        await message.answer("\n".join(report))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {e}", exc_info=True)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {str(e)[:100]}")


@router.message(Command("save_bookmarks_to_db"))
async def save_bookmarks_to_db(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î"""
    user_id = message.from_user.id
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
        from database.db_manager import db_manager

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_bookmarks = await get_bookmarks(state)
        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω–æ {len(state_bookmarks)} –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")

        if not state_bookmarks:
            await message.answer("–í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ—Ç –∑–∞–∫–ª–∞–¥–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        await db_manager.add_user(user_id, message.from_user.username or "", message.from_user.first_name or "")

        # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
            check_result = await db_manager.check_db_access()
            if not check_result['success']:
                errors = ", ".join(check_result['errors'])
                await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ë–î: {errors}")

                # –ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î
                logger.info(
                    "–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∑–∞–∫–ª–∞–¥–æ–∫")
                repair_result = await db_manager.repair_db()
                if repair_result['success']:
                    await message.answer("‚úÖ –ë–î —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º")
                else:
                    await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î: {', '.join(repair_result['errors'])}")
                    return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {str(e)[:100]}")

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        saved_count = 0
        failed_count = 0
        already_exists_count = 0

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–∫–ª–∞–¥–∫—É
        for key, data in state_bookmarks.items():
            if isinstance(data, dict):
                try:
                    book_id = data.get('book_id')
                    chapter = data.get('chapter')
                    display_text = data.get('display_text')

                    if not (book_id and chapter and display_text):
                        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–ª–∞–¥–∫–∏: {data}")
                        failed_count += 1
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∑–∞–∫–ª–∞–¥–∫–∞ —É–∂–µ –≤ –ë–î
                    bookmarks = await db_manager.get_bookmarks(user_id)
                    bookmark_exists = any(
                        bm[0] == book_id and bm[1] == chapter for bm in bookmarks)

                    if bookmark_exists:
                        logger.info(
                            f"–ó–∞–∫–ª–∞–¥–∫–∞ {display_text} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
                        already_exists_count += 1
                        continue

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    result = await db_manager.add_bookmark(user_id, book_id, chapter, display_text)

                    if result:
                        logger.info(
                            f"–ó–∞–∫–ª–∞–¥–∫–∞ {display_text} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
                        saved_count += 1
                    else:
                        logger.warning(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É {display_text} –≤ –ë–î")
                        failed_count += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏ {key}: {e}")
                    failed_count += 1
            else:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–ª–∞–¥–∫–∏: {key} = {data}")
                failed_count += 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–æ–∫
        final_bookmarks = await db_manager.get_bookmarks(user_id)
        logger.info(f"–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {len(final_bookmarks)} –∑–∞–∫–ª–∞–¥–æ–∫")

        # –û—Ç—á–µ—Ç
        report = [
            f"üìä –û—Ç—á–µ—Ç –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–æ–∫ –≤ –ë–î:",
            f"- –í—Å–µ–≥–æ –∑–∞–∫–ª–∞–¥–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {len(state_bookmarks)}",
            f"- –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count}",
            f"- –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ –≤ –ë–î: {already_exists_count}",
            f"- –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {failed_count}",
            f"- –ò—Ç–æ–≥–æ –≤ –ë–î: {len(final_bookmarks)} –∑–∞–∫–ª–∞–¥–æ–∫"
        ]

        await message.answer("\n".join(report))

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–æ–∫ –≤ –ë–î: {e}", exc_info=True)
        await message.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:100]}")


@router.message(Command("reset_db"))
async def reset_db_command(message: Message, state: FSMContext):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_id = message.from_user.id
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
        from database.db_manager import db_manager
        import os
        import sqlite3
        from datetime import datetime

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
        state_bookmarks = await get_bookmarks(state)
        bookmark_count = len(state_bookmarks)
        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω–æ {bookmark_count} –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º –ë–î")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ë–î
        db_file = db_manager.db_file
        db_dir = os.path.dirname(db_file)

        await message.answer(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_file}")

        # 1. –î–µ–ª–∞–µ–º –±—ç–∫–∞–ø, –µ—Å–ª–∏ –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        backup_path = None
        if os.path.exists(db_file):
            backup_path = f"{db_file}.bak.{datetime.now().strftime('%Y%m%d%H%M%S')}"
            try:
                import shutil
                shutil.copy2(db_file, backup_path)
                logger.info(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –ë–î: {backup_path}")
                await message.answer(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: {str(e)[:100]}")

        # 2. –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –ë–î
        if os.path.exists(db_file):
            try:
                os.remove(db_file)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –ë–î: {db_file}")
                await message.answer("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –ë–î —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ë–î: {e}")
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ë–î: {str(e)[:100]}")
                return

        # 3. –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ë–î, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(db_dir):
            try:
                os.makedirs(db_dir, exist_ok=True)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ë–î: {db_dir}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ë–î: {str(e)[:100]}")
                return

        # 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ë–î –∏ —Ç–∞–±–ª–∏—Ü—ã
        try:
            conn = sqlite3.connect(db_file)
            cursor = conn.cursor()

            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                current_translation TEXT DEFAULT 'rst',
                last_activity TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–ª–∞–¥–æ–∫
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS bookmarks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                book_id INTEGER,
                chapter INTEGER,
                display_text TEXT,
                created_at TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
            ''')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω—ã –ª–∏ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()

            conn.commit()
            conn.close()

            logger.info(f"–°–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã –≤ –Ω–æ–≤–æ–π –ë–î: {tables}")
            await message.answer(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ë–î —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏: {', '.join([t[0] for t in tables])}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –ë–î: {e}")
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ë–î: {str(e)[:100]}")
            return

        # 5. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await db_manager.add_user(user_id, message.from_user.username or "", message.from_user.first_name or "")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—É—é –ë–î")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)[:100]}")

        # 6. –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–∞–∫–ª–∞–¥–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if bookmark_count > 0:
            await message.answer(f"üîÑ –ü–µ—Ä–µ–Ω–æ—à—É {bookmark_count} –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –Ω–æ–≤—É—é –ë–î...")

            saved_count = 0
            failed_count = 0

            for key, data in state_bookmarks.items():
                if isinstance(data, dict):
                    try:
                        book_id = data.get('book_id')
                        chapter = data.get('chapter')
                        display_text = data.get('display_text')

                        if book_id and chapter and display_text:
                            result = await db_manager.add_bookmark(user_id, book_id, chapter, display_text)
                            if result:
                                saved_count += 1
                            else:
                                failed_count += 1
                        else:
                            failed_count += 1
                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏ {key}: {e}")
                        failed_count += 1
                else:
                    failed_count += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_bookmarks = await db_manager.get_bookmarks(user_id)
            await message.answer(
                f"‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–∫–ª–∞–¥–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω:\n"
                f"- –£—Å–ø–µ—à–Ω–æ: {saved_count}\n"
                f"- –° –æ—à–∏–±–∫–∞–º–∏: {failed_count}\n"
                f"- –í—Å–µ–≥–æ –≤ –ë–î: {len(final_bookmarks)}"
            )

        # 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        check_result = await db_manager.check_db_access()
        if check_result['success']:
            await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            errors = ", ".join(check_result['errors'])
            await message.answer(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã: {errors}")

    except Exception as e:
        logger.error(
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}", exc_info=True)
        await message.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:100]}")
