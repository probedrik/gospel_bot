"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
"""
import logging
import re
from datetime import datetime, timedelta
from typing import Any, Dict

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup

from utils.orthodox_calendar import orthodox_calendar
from keyboards.calendar import create_calendar_keyboard, create_calendar_settings_keyboard
from services.ai_settings_manager import ai_settings_manager
from config.settings import ADMIN_USER_ID

logger = logging.getLogger(__name__)
router = Router()


async def show_calendar_for_date(message: Message, state: FSMContext, target_date: datetime = None, user_id: int = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        if target_date is None:
            target_date = datetime.now()

        if user_id is None:
            user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ Supabase
        settings = await get_calendar_default_settings(user_id)
        logger.info(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ Supabase (show_calendar_for_date): {settings}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_html = await orthodox_calendar.get_calendar_data(target_date, settings)

        if not calendar_html:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
            return

        # –ü–∞—Ä—Å–∏–º HTML –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        calendar_data = orthodox_calendar.parse_calendar_content(calendar_html)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = _format_calendar_message(calendar_data, target_date)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_calendar_keyboard(
            target_date,
            calendar_data.get('scripture_references', []),
            show_settings=True,
            user_id=user_id
        )

        await message.answer(message_text, reply_markup=keyboard, parse_mode='HTML')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")


async def show_calendar_for_callback(callback: CallbackQuery, state: FSMContext, target_date: datetime = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (–≤–µ—Ä—Å–∏—è –¥–ª—è callback)"""
    try:
        if target_date is None:
            target_date = datetime.now()

        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ Supabase
        settings = await get_calendar_default_settings(user_id)
        logger.info(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ Supabase (show_calendar_for_callback): {settings}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_html = await orthodox_calendar.get_calendar_data(target_date, settings)

        if not calendar_html:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
            return

        # –ü–∞—Ä—Å–∏–º HTML –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        calendar_data = orthodox_calendar.parse_calendar_content(calendar_html)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = _format_calendar_message(calendar_data, target_date)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_calendar_keyboard(
            target_date,
            calendar_data.get('scripture_references', []),
            show_settings=True,
            user_id=user_id
        )

        try:
            await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode='HTML')
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(message_text, reply_markup=keyboard, parse_mode='HTML')

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")


def _format_calendar_message(calendar_data: Dict[str, Any], target_date: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    parts = []

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
    if calendar_data.get('date'):
        parts.append(f"üìÖ <b>{calendar_data['date']}</b>")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–µ–¥–º–∏—Ü–∞, –≥–ª–∞—Å)
    if calendar_data.get('header'):
        header_text = calendar_data['header'].replace('<br>', '\n').strip()
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ HTML –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        header_clean = re.sub(r'<[^>]+>', '', header_text)
        if header_clean:
            parts.append(f"‚õ™ <i>{header_clean}</i>")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–º—è—Ç—å —Å–≤—è—Ç—ã—Ö
    if calendar_data.get('saints'):
        parts.append(f"<b>üìø –ü–∞–º—è—Ç—å —Å–≤—è—Ç—ã—Ö:</b>")
        for saint in calendar_data['saints']:
            saint_clean = saint.strip()
            if saint_clean:
                parts.append(f"‚Ä¢ {saint_clean}")

    # –î–æ–±–∞–≤–ª—è–µ–º —á—Ç–µ–Ω–∏—è –¥–Ω—è (—Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∏)
    if calendar_data.get('scripture_readings'):
        parts.append(f"<b>üìñ –ß—Ç–µ–Ω–∏—è –¥–Ω—è:</b>")
        for reading in calendar_data['scripture_readings']:
            parts.append(f"‚Ä¢ {reading}")
        parts.append(f"<i>üì± –û—Ç–∫—Ä—ã—Ç—å —á—Ç–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ</i>")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ–ø–∞—Ä–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
    if calendar_data.get('tropars'):
        parts.append(f"\n<b>üéµ –¢—Ä–æ–ø–∞—Ä–∏:</b>")
        for tropar in calendar_data['tropars']:
            if tropar.strip():
                parts.append(tropar)

    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not parts:
        parts.append(f"üìÖ <b>{target_date.strftime('%d.%m.%Y')}</b>")
        parts.append("üìã –î–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    result = "\n".join(parts)
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {result[:200]}...")
    return result


async def get_calendar_default_settings(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ ai_settings_manager
        settings = await ai_settings_manager.get_calendar_default_settings()
        return settings

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            'header': True,
            'lives': 4,
            'tropars': 0,
            'scripture': 1,
            'date_format': True
        }


@router.callback_query(F.data == "calendar_today")
async def calendar_today_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    await show_calendar_for_callback(callback, state, datetime.now())


@router.callback_query(F.data.startswith("calendar_date_"))
async def calendar_date_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
        date_str = callback.data.replace("calendar_date_", "")
        year, month, day = map(int, date_str.split("_"))
        target_date = datetime(year, month, day)

        await show_calendar_for_callback(callback, state, target_date)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã")


@router.callback_query(F.data.startswith("scripture_read_complex_"))
async def scripture_read_complex(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —á—Ç–µ–Ω–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–∞—Å—Ç—è–º–∏"""
    try:
        logger.info(
            f"scripture_read_complex –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {callback.data}")

        # –ü–∞—Ä—Å–∏–º callback_data: scripture_read_complex_book_id_chapter_verse_start_verse_end|book_id_chapter_verse_start_verse_end|...
        data_part = callback.data.replace("scripture_read_complex_", "")
        ref_parts = data_part.split("|")
        logger.info(f"–ß–∞—Å—Ç–∏ —Å–ª–æ–∂–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è: {ref_parts}")

        from utils.bible_data import bible_data
        from handlers.verse_reference import get_verse_by_reference
        from utils.text_utils import get_verses_parse_mode, split_text
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

        # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        await state.update_data(from_calendar=True)

        all_texts = []
        all_references = []
        combined_book_ids = set()
        combined_chapters = set()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
        for ref_part in ref_parts:
            parts = ref_part.split("_")
            if len(parts) != 4:
                continue

            book_id = int(parts[0])
            chapter = int(parts[1])
            verse_start = int(parts[2])
            verse_end = int(parts[3])

            combined_book_ids.add(book_id)
            combined_chapters.add(chapter)

            book_name = bible_data.get_book_name(book_id)
            if not book_name:
                continue

            if verse_start == verse_end:
                reference = f"{book_name} {chapter}:{verse_start}"
            else:
                reference = f"{book_name} {chapter}:{verse_start}-{verse_end}"

            all_references.append(reference)
            logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É: {reference}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
            text, meta = await get_verse_by_reference(state, reference)
            all_texts.append(f"<b>{reference}</b>\n{text}")

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã
        combined_text = "\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n".join(all_texts)

        parse_mode = get_verses_parse_mode()
        for part in split_text(combined_text):
            await callback.message.answer(part, parse_mode=parse_mode)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        # –ï—Å–ª–∏ –≤—Å–µ —á–∞—Å—Ç–∏ –∏–∑ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–ª—è –∫–Ω–æ–ø–æ–∫
        if len(combined_book_ids) == 1:
            book_id = list(combined_book_ids)[0]
            chapter = list(combined_chapters)[0] if len(
                combined_chapters) == 1 else min(combined_chapters)

            from utils.bible_data import create_chapter_action_buttons, get_english_book_abbreviation
            from config.ai_settings import ENABLE_GPT_EXPLAIN

            en_book = get_english_book_abbreviation(book_id)

            all_buttons = []

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–ª–∞–≤
            if len(combined_chapters) > 1:
                for ch in sorted(combined_chapters):
                    ru_book_abbr = None
                    for abbr, b_id in bible_data.book_abbr_dict.items():
                        if b_id == book_id:
                            ru_book_abbr = abbr
                            break

                    if ru_book_abbr:
                        all_buttons.append([
                            InlineKeyboardButton(
                                text=f"üìñ –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤—É {ch}",
                                callback_data=f"open_chapter_{ru_book_abbr}_{ch}"
                            )
                        ])

            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –ò–ò —Ä–∞–∑–±–æ—Ä–∞ –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
            if ENABLE_GPT_EXPLAIN:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ò–ò
                complex_parts = []
                for ref_part in ref_parts:
                    parts = ref_part.split("_")
                    if len(parts) == 4:
                        complex_parts.append(ref_part)

                if complex_parts:
                    all_buttons.append([
                        InlineKeyboardButton(
                            text="ü§ñ –†–∞–∑–±–æ—Ä —Å–ª–æ–∂–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –æ—Ç –ò–ò",
                            callback_data=f"gpt_explain_complex_{'|'.join(complex_parts)}"
                        )
                    ])

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤—ã (–±–µ–∑ –ò–ò —Ä–∞–∑–±–æ—Ä–∞)
            action_buttons = await create_chapter_action_buttons(
                book_id, chapter, en_book, user_id=callback.from_user.id,
                exclude_ai=True  # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –ò–ò
            )

            if action_buttons:
                all_buttons.extend(action_buttons)

            if all_buttons:
                await callback.message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=all_buttons)
                )

        logger.info("–°–ª–æ–∂–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        await callback.answer()

    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–æ–∂–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è", show_alert=True)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–æ–∂–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è: {e}", exc_info=True)


@router.callback_query(F.data.startswith("scripture_read_"))
async def scripture_read(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –ï–≤–∞–Ω–≥–µ–ª—å—Å–∫–∏—Ö –æ—Ç—Ä—ã–≤–∫–æ–≤"""
    try:
        logger.info(f"scripture_read –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {callback.data}")

        # –ü–∞—Ä—Å–∏–º callback_data: scripture_read_book_id_chapter_verse_start_verse_end
        parts = callback.data.split("_")
        logger.info(f"–ß–∞—Å—Ç–∏ callback_data: {parts}")

        if len(parts) != 6:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        book_id = int(parts[2])
        chapter = int(parts[3])
        verse_start = int(parts[4])
        verse_end = int(parts[5])
        logger.info(
            f"–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: book_id={book_id}, chapter={chapter}, verse_start={verse_start}, verse_end={verse_end}")

        from utils.bible_data import bible_data
        book_name = bible_data.get_book_name(book_id)
        logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: {book_name}")

        if not book_name:
            await callback.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        if verse_start == verse_end:
            reference = f"{book_name} {chapter}:{verse_start}"
        else:
            reference = f"{book_name} {chapter}:{verse_start}-{verse_end}"

        logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {reference}")
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º ID: {book_id}")

        from handlers.verse_reference import get_verse_by_reference
        from utils.text_utils import get_verses_parse_mode, split_text
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        from utils.bible_data import create_chapter_action_buttons, get_english_book_abbreviation

        # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        await state.update_data(from_calendar=True)

        text, meta = await get_verse_by_reference(state, reference)

        parse_mode = get_verses_parse_mode()
        for part in split_text(text):
            await callback.message.answer(part, parse_mode=parse_mode)

        ru_book_abbr = None
        for abbr, b_id in bible_data.book_abbr_dict.items():
            if b_id == book_id:
                ru_book_abbr = abbr
                break

        en_book = get_english_book_abbreviation(book_id)
        action_buttons = await create_chapter_action_buttons(
            book_id, chapter, en_book, user_id=callback.from_user.id,
            verse_start=verse_start, verse_end=verse_end
        )

        all_buttons = []
        if ru_book_abbr:
            open_chapter_button = [
                InlineKeyboardButton(
                    text="üìñ –û—Ç–∫—Ä—ã—Ç—å –≤—Å—é –≥–ª–∞–≤—É",
                    callback_data=f"open_chapter_{ru_book_abbr}_{chapter}"
                )
            ]
            all_buttons.append(open_chapter_button)

        if action_buttons:
            all_buttons.extend(action_buttons)

        if all_buttons:
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=all_buttons)
            )
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è")

        logger.info("–ß—Ç–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        await callback.answer()
        logger.info("Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")

    except (ValueError, IndexError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á—Ç–µ–Ω–∏—è", show_alert=True)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ scripture_read: {e}")
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ï–≤–∞–Ω–≥–µ–ª—å—Å–∫–æ–≥–æ —á—Ç–µ–Ω–∏—è", show_alert=True)
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ï–≤–∞–Ω–≥–µ–ª—å—Å–∫–æ–≥–æ —á—Ç–µ–Ω–∏—è: {e}", exc_info=True)


@router.callback_query(F.data == "separator")
async def separator_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç"""
    await callback.answer()


@router.callback_query(F.data == "calendar_back")
async def calendar_back_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        from datetime import datetime
        await show_calendar_for_callback(callback, state, datetime.now())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é")


@router.callback_query(F.data == "calendar_setting_lives_next")
async def toggle_lives_setting(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∂–∏—Ç–∏—è —Å–≤—è—Ç—ã—Ö (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ 0-6)"""
    try:
        user_id = callback.from_user.id
        current_value = await ai_settings_manager.get_setting(user_id, 'calendar_default_lives')
        current_value = int(current_value) if isinstance(
            current_value, (int, str)) and str(current_value).isdigit() else 4

        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ 0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 0
        new_value = (current_value + 1) % 7

        await ai_settings_manager.set_calendar_default_setting(user_id, 'lives', new_value)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        settings = await get_calendar_default_settings(user_id)
        keyboard = create_calendar_settings_keyboard(settings)

        try:
            await callback.message.edit_reply_markup(reply_markup=keyboard)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        await callback.answer(f"–ñ–∏—Ç–∏—è —Å–≤—è—Ç—ã—Ö: {new_value}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ lives: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")


@router.callback_query(F.data == "calendar_setting_tropars_next")
async def toggle_tropars_setting(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç—Ä–æ–ø–∞—Ä–µ–π (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ 0-2)"""
    try:
        user_id = callback.from_user.id
        current_value = await ai_settings_manager.get_setting(user_id, 'calendar_default_tropars')
        current_value = int(current_value) if isinstance(
            current_value, (int, str)) and str(current_value).isdigit() else 0

        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ 0 -> 1 -> 2 -> 0
        new_value = (current_value + 1) % 3

        await ai_settings_manager.set_calendar_default_setting(user_id, 'tropars', new_value)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        settings = await get_calendar_default_settings(user_id)
        keyboard = create_calendar_settings_keyboard(settings)

        try:
            await callback.message.edit_reply_markup(reply_markup=keyboard)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        await callback.answer(f"–¢—Ä–æ–ø–∞—Ä–∏: {new_value}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ tropars: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")


@router.callback_query(F.data == "calendar_setting_scripture_next")
async def toggle_scripture_setting(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ï–≤–∞–Ω–≥–µ–ª—å—Å–∫–∏—Ö —á—Ç–µ–Ω–∏–π (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ 0-2)"""
    try:
        user_id = callback.from_user.id
        current_value = await ai_settings_manager.get_setting(user_id, 'calendar_default_scripture')
        current_value = int(current_value) if isinstance(
            current_value, (int, str)) and str(current_value).isdigit() else 1

        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ 0 -> 1 -> 2 -> 0
        new_value = (current_value + 1) % 3

        await ai_settings_manager.set_calendar_default_setting(user_id, 'scripture', new_value)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        settings = await get_calendar_default_settings(user_id)
        keyboard = create_calendar_settings_keyboard(settings)

        try:
            await callback.message.edit_reply_markup(reply_markup=keyboard)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        await callback.answer(f"–ï–≤–∞–Ω–≥–µ–ª—å—Å–∫–∏–µ —á—Ç–µ–Ω–∏—è: {new_value}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ scripture: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")


@router.callback_query(F.data == "calendar_settings")
async def calendar_settings_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    try:
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if user_id != ADMIN_USER_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await get_calendar_default_settings(user_id)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = create_calendar_settings_keyboard(settings)

        settings_text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b>\n\n"
        settings_text += f"üìø –ñ–∏—Ç–∏—è —Å–≤—è—Ç—ã—Ö: {settings.get('lives', 4)}\n"
        settings_text += f"üéµ –¢—Ä–æ–ø–∞—Ä–∏: {settings.get('tropars', 0)}\n"
        settings_text += f"üìñ –ï–≤–∞–Ω–≥–µ–ª—å—Å–∫–∏–µ —á—Ç–µ–Ω–∏—è: {settings.get('scripture', 1)}\n"
        settings_text += f"üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {'–í–∫–ª—é—á–µ–Ω' if settings.get('date_format', True) else '–û—Ç–∫–ª—é—á–µ–Ω'}\n"
        settings_text += f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {'–í–∫–ª—é—á–µ–Ω' if settings.get('header', True) else '–û—Ç–∫–ª—é—á–µ–Ω'}"

        try:
            await callback.message.edit_text(settings_text, reply_markup=keyboard, parse_mode='HTML')
        except Exception:
            await callback.message.answer(settings_text, reply_markup=keyboard, parse_mode='HTML')

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data == "calendar_settings_reset")
async def reset_calendar_settings(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if user_id != ADMIN_USER_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await ai_settings_manager.set_calendar_default_setting(user_id, 'header', True)
        await ai_settings_manager.set_calendar_default_setting(user_id, 'lives', 4)
        await ai_settings_manager.set_calendar_default_setting(user_id, 'tropars', 0)
        await ai_settings_manager.set_calendar_default_setting(user_id, 'scripture', 1)
        await ai_settings_manager.set_calendar_default_setting(user_id, 'date_format', True)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        settings = await get_calendar_default_settings(user_id)
        keyboard = create_calendar_settings_keyboard(settings)

        settings_text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b>\n\n"
        settings_text += f"üìø –ñ–∏—Ç–∏—è —Å–≤—è—Ç—ã—Ö: {settings.get('lives', 4)}\n"
        settings_text += f"üéµ –¢—Ä–æ–ø–∞—Ä–∏: {settings.get('tropars', 0)}\n"
        settings_text += f"üìñ –ï–≤–∞–Ω–≥–µ–ª—å—Å–∫–∏–µ —á—Ç–µ–Ω–∏—è: {settings.get('scripture', 1)}\n"
        settings_text += f"üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {'–í–∫–ª—é—á–µ–Ω' if settings.get('date_format', True) else '–û—Ç–∫–ª—é—á–µ–Ω'}\n"
        settings_text += f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {'–í–∫–ª—é—á–µ–Ω' if settings.get('header', True) else '–û—Ç–∫–ª—é—á–µ–Ω'}"

        try:
            await callback.message.edit_text(settings_text, reply_markup=keyboard, parse_mode='HTML')
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
