"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Telegram Stars
"""
import logging
from typing import Optional

from aiogram import Router, F
from aiogram.types import (
    CallbackQuery, Message, PreCheckoutQuery, SuccessfulPayment,
    LabeledPrice
)
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from database.universal_manager import universal_db_manager as db_manager
from services.premium_manager import PremiumManager
from config.ai_settings import STAR_PREMIUM_PACKAGES

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
premium_manager = None

async def get_premium_manager():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤"""
    global premium_manager
    if premium_manager is None:
        premium_manager = PremiumManager()
    return premium_manager

# === –ü–û–ñ–ï–†–¢–í–û–í–ê–ù–ò–Ø –ß–ï–†–ï–ó TELEGRAM STARS ===

@router.callback_query(F.data.startswith("donate_stars_") & ~F.data.in_(["donate_stars_menu"]))
async def process_stars_donation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Stars"""
    try:
        logger.info(f"üåü –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: callback_data = {callback.data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ callback_data
        amount_str = callback.data.replace("donate_stars_", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        if not amount_str.isdigit():
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –≤ callback_data: '{amount_str}' –∏–∑ '{callback.data}'")
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞", show_alert=True)
            return
            
        amount_stars = int(amount_str)
        
        logger.info(f"üåü –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ Stars: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, —Å—É–º–º–∞ {amount_stars}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Stars
        prices = [LabeledPrice(label=f"–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ {amount_stars} Stars", amount=amount_stars)]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await callback.message.answer_invoice(
            title=f"–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ {amount_stars} ‚≠ê",
            description=f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –±–∏–±–ª–µ–π—Å–∫–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ {amount_stars} Telegram Stars",
            payload=f"donation_stars_{amount_stars}_{callback.from_user.id}",
            provider_token="",  # –î–ª—è Stars –Ω–µ –Ω—É–∂–µ–Ω
            currency="XTR",  # Telegram Stars
            prices=prices,
            start_parameter="donation_stars",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            send_phone_number_to_provider=False,
            send_email_to_provider=False,
            is_flexible=False
        )
        
        await callback.answer("üí´ –ò–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


# === –ü–û–ö–£–ü–ö–ê –ü–†–ï–ú–ò–£–ú –ó–ê–ü–†–û–°–û–í –ß–ï–†–ï–ó TELEGRAM STARS ===

@router.callback_query(F.data.startswith("buy_premium_stars_") & ~F.data.in_(["buy_premium_stars"]))
async def process_premium_stars_purchase(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Telegram Stars"""
    try:
        logger.info(f"üåü –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤: callback_data = {callback.data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ callback_data
        requests_str = callback.data.replace("buy_premium_stars_", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –ø–∞–∫–µ—Ç
        if requests_str not in STAR_PREMIUM_PACKAGES:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç: '{requests_str}' –∏–∑ '{callback.data}'")
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç", show_alert=True)
            return
        
        package = STAR_PREMIUM_PACKAGES[requests_str]
        requests_count = package["requests"]
        cost_stars = package["cost_stars"]
        description = package["description"]
        
        logger.info(f"üåü –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, "
                   f"{requests_count} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {cost_stars} Stars")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Stars
        prices = [LabeledPrice(
            label=f"{requests_count} –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤", 
            amount=cost_stars
        )]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await callback.message.answer_invoice(
            title=f"{requests_count} –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ ‚≠ê",
            description=f"{description}: {requests_count} –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø—Ä–µ–º–∏—É–º –ò–ò –∑–∞ {cost_stars} Telegram Stars",
            payload=f"premium_stars_{requests_count}_{cost_stars}_{callback.from_user.id}",
            provider_token="",  # –î–ª—è Stars –Ω–µ –Ω—É–∂–µ–Ω
            currency="XTR",  # Telegram Stars
            prices=prices,
            start_parameter="premium_stars",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            send_phone_number_to_provider=False,
            send_email_to_provider=False,
            is_flexible=False
        )
        
        await callback.answer("üí´ –ò–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ–∑–¥–∞–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


# === –û–ë–†–ê–ë–û–¢–ö–ê PRE-CHECKOUT QUERY ===

@router.pre_checkout_query()
async def process_pre_checkout_query(query: PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∞–Ω–∏–µ–º Stars"""
    try:
        logger.info(f"üí≥ Pre-checkout query: {query.id}, payload: {query.invoice_payload}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É
        if query.currency != "XTR":
            await query.answer(ok=False, error_message="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Telegram Stars")
            return
        
        # –ü–∞—Ä—Å–∏–º payload
        payload_parts = query.invoice_payload.split("_")
        if len(payload_parts) < 3:
            await query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        payment_type = payload_parts[0]  # donation –∏–ª–∏ premium
        
        if payment_type == "donation":
            # –î–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º
            await query.answer(ok=True)
            
        elif payment_type == "premium":
            # –î–ª—è –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if len(payload_parts) >= 4:
                requests_count = int(payload_parts[2])
                cost_stars = int(payload_parts[3])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞–∫–µ—Ç—É
                package_found = False
                for package_key, package_data in STAR_PREMIUM_PACKAGES.items():
                    if (package_data["requests"] == requests_count and 
                        package_data["cost_stars"] == cost_stars):
                        package_found = True
                        break
                
                if package_found:
                    await query.answer(ok=True)
                else:
                    await query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞")
            else:
                await query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞")
        else:
            await query.answer(ok=False, error_message="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pre_checkout_query: {e}")
        await query.answer(ok=False, error_message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


# === –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–û–ì–û –ü–õ–ê–¢–ï–ñ–ê ===

@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Stars"""
    try:
        payment: SuccessfulPayment = message.successful_payment
        user_id = message.from_user.id
        
        logger.info(f"üí∞ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, "
                   f"—Å—É–º–º–∞ {payment.total_amount} {payment.currency}, "
                   f"payload: {payment.invoice_payload}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É
        if payment.currency != "XTR":
            logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞: {payment.currency}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞")
            return
        
        # –ü–∞—Ä—Å–∏–º payload
        payload_parts = payment.invoice_payload.split("_")
        if len(payload_parts) < 3:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload: {payment.invoice_payload}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        payment_type = payload_parts[0]  # donation –∏–ª–∏ premium
        
        if payment_type == "donation":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ
            await process_donation_payment(message, payment, payload_parts)
            
        elif payment_type == "premium":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
            await process_premium_payment(message, payment, payload_parts)
            
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞: {payment_type}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


async def process_donation_payment(message: Message, payment: SuccessfulPayment, payload_parts: list):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è"""
    try:
        user_id = message.from_user.id
        amount_stars = payment.total_amount
        telegram_payment_charge_id = payment.telegram_payment_charge_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        pm = await get_premium_manager()
        donation_id = await pm.create_star_donation(
            user_id=user_id,
            amount_stars=amount_stars,
            telegram_payment_charge_id=telegram_payment_charge_id,
            message=f"–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars –æ—Ç @{message.from_user.username or 'unknown'}"
        )
        
        if donation_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
            thank_you_text = (
                f"üôè <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ!</b>\n\n"
                f"‚≠ê –°—É–º–º–∞: {amount_stars} Telegram Stars\n"
                f"üìÖ –î–∞—Ç–∞: {message.date.strftime('%d.%m.%Y %H:%M')}\n"
                f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {telegram_payment_charge_id}\n\n"
                f"–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –¥–µ–ª–∞—Ç—å –µ–≥–æ –ª—É—á—à–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n\n"
                f"ü§ñ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å –°–≤—è—â–µ–Ω–Ω–æ–µ –ü–∏—Å–∞–Ω–∏–µ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!"
            )
            
            await message.answer(thank_you_text, parse_mode="HTML")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ
            logger.info(f"‚úÖ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, "
                       f"{amount_stars} Stars, donation_id {donation_id}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


async def process_premium_payment(message: Message, payment: SuccessfulPayment, payload_parts: list):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        user_id = message.from_user.id
        amount_stars = payment.total_amount
        telegram_payment_charge_id = payment.telegram_payment_charge_id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
        if len(payload_parts) >= 4:
            requests_count = int(payload_parts[2])
            cost_stars = int(payload_parts[3])
        else:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–∫—É–ø–∫–∏: {payment.invoice_payload}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã
        if amount_stars != cost_stars:
            logger.error(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã: –æ–∂–∏–¥–∞–ª–æ—Å—å {cost_stars}, –ø–æ–ª—É—á–µ–Ω–æ {amount_stars}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        pm = await get_premium_manager()
        purchase_id = await pm.create_star_premium_purchase(
            user_id=user_id,
            requests_count=requests_count,
            amount_stars=amount_stars,
            telegram_payment_charge_id=telegram_payment_charge_id
        )
        
        if purchase_id:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
            current_balance = await pm.get_user_premium_requests(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            success_text = (
                f"‚úÖ <b>–ü—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω—ã!</b>\n\n"
                f"üåü –ö—É–ø–ª–µ–Ω–æ: {requests_count} –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                f"‚≠ê –°—Ç–æ–∏–º–æ—Å—Ç—å: {amount_stars} Telegram Stars\n"
                f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                f"üìÖ –î–∞—Ç–∞: {message.date.strftime('%d.%m.%Y %H:%M')}\n"
                f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {telegram_payment_charge_id}\n\n"
                f"ü§ñ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ò–ò –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –±–∏–±–ª–µ–π—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤!\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'ü§ñ –ò–ò —Ä–∞–∑–±–æ—Ä' –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≥–ª–∞–≤ –∏–ª–∏ —Å—Ç–∏—Ö–æ–≤."
            )
            
            await message.answer(success_text, parse_mode="HTML")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É
            logger.info(f"‚úÖ –ü—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã –∫—É–ø–ª–µ–Ω—ã: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, "
                       f"{requests_count} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {amount_stars} Stars, purchase_id {purchase_id}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def get_user_premium_balance(user_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        pm = await get_premium_manager()
        return await pm.get_user_premium_requests(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        return 0


async def get_user_donation_stats(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return {
            "total_donations": 0,
            "total_stars": 0,
            "last_donation_date": None
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π: {e}")
        return {
            "total_donations": 0,
            "total_stars": 0,
            "last_donation_date": None
        }