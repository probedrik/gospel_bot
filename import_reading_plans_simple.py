#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è –ë–∏–±–ª–∏–∏ –∏–∑ CSV —Ñ–∞–π–ª–æ–≤ –≤ Supabase.
"""
import asyncio
import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–ª–∞–Ω—ã —Å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
PLANS = [
    {
        "file": "data/plans_csv_final/–ï–≤–∞–Ω–≥–µ–ª–∏–µ-–Ω–∞-–∫–∞–∂–¥—ã–π-–¥–µ–Ω—å.csv",
        "id": "gospel-daily",
        "title": "üìñ –ï–≤–∞–Ω–≥–µ–ª–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
        "description": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –ï–≤–∞–Ω–≥–µ–ª–∏—è"
    },
    {
        "file": "data/plans_csv_final/–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π-–ø–ª–∞–Ω-—á—Ç–µ–Ω–∏—è-–ë–∏–±–ª–∏–∏-–∑–∞-1-–≥–æ–¥.csv",
        "id": "classic-1-year",
        "title": "üìö –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω –∑–∞ –≥–æ–¥",
        "description": "–ß—Ç–µ–Ω–∏–µ –≤—Å–µ–π –ë–∏–±–ª–∏–∏ –∑–∞ –æ–¥–∏–Ω –≥–æ–¥"
    },
    {
        "file": "data/plans_csv_final/–ü–ª–∞–Ω-—á—Ç–µ–Ω–∏—è-–ë–∏–±–ª–∏–∏-–í–ó-–∏-–ù–ó.csv",
        "id": "ot-nt-plan",
        "title": "‚öñÔ∏è –ü–ª–∞–Ω –í–ó –∏ –ù–ó",
        "description": "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –í–µ—Ç—Ö–æ–≥–æ –∏ –ù–æ–≤–æ–≥–æ –ó–∞–≤–µ—Ç–∞"
    }
]


async def import_plans():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω—ã —á—Ç–µ–Ω–∏—è –≤ Supabase"""

    print("üîÑ –ò–º–ø–æ—Ä—Ç –ø–ª–∞–Ω–æ–≤ —á—Ç–µ–Ω–∏—è –≤ Supabase...")

    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        from database.supabase_manager import SupabaseManager
        manager = SupabaseManager()
        await manager.initialize()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        for plan in PLANS:
            print(f"\nüìö –ò–º–ø–æ—Ä—Ç: {plan['title']}")

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            if not os.path.exists(plan['file']):
                print(f"‚ùå –§–∞–π–ª {plan['file']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue

            days_data = []
            with open(plan['file'], 'r', encoding='utf-8') as f:
                lines = f.readlines()

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å 3-–π (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏)
                for i, line in enumerate(lines[2:], start=1):
                    line = line.strip()
                    if not line:
                        continue

                    # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π
                    parts = line.split(',', 1)
                    if len(parts) == 2:
                        try:
                            day = int(parts[0])
                            reading = parts[1].strip()
                            if reading:
                                days_data.append({
                                    'plan_id': plan['id'],
                                    'day': day,
                                    'reading_text': reading
                                })
                        except ValueError:
                            continue

            if not days_data:
                print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ {plan['file']}")
                continue

            print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ –¥–Ω–µ–π: {len(days_data)}")

            # 1. –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω
            plan_data = {
                'plan_id': plan['id'],
                'title': plan['title'],
                'description': plan['description'],
                'total_days': len(days_data)
            }

            try:
                result = manager.client.table(
                    'reading_plans').upsert(plan_data).execute()
                print(f"‚úÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
                continue

            # 2. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–Ω–∏
            try:
                manager.client.table('reading_plan_days').delete().eq(
                    'plan_id', plan['id']).execute()
                print(f"üßπ –°—Ç–∞—Ä—ã–µ –¥–Ω–∏ —É–¥–∞–ª–µ–Ω—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

            # 3. –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –±–∞—Ç—á–∞–º–∏
            batch_size = 100
            for i in range(0, len(days_data), batch_size):
                batch = days_data[i:i + batch_size]
                try:
                    result = manager.client.table(
                        'reading_plan_days').insert(batch).execute()
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–Ω–µ–π: {len(batch)}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π: {e}")

            print(f"üéâ –ü–ª–∞–Ω '{plan['title']}' –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        print(f"\nüìä –ò—Ç–æ–≥–∏:")
        plans_result = manager.client.table('reading_plans').select(
            'plan_id, title, total_days').execute()
        for plan in plans_result.data:
            print(f"  üìö {plan['title']}: {plan['total_days']} –¥–Ω–µ–π")

        await manager.close()
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    print("=== –ò–ú–ü–û–†–¢ –ü–õ–ê–ù–û–í –ß–¢–ï–ù–ò–Ø –í SUPABASE ===\n")

    print("üìã –ë—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–ª–∞–Ω—ã:")
    for i, plan in enumerate(PLANS, 1):
        print(f"{i}. {plan['title']} (ID: {plan['id']})")

    print("\nüí° –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ PLANS –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ")

    response = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–º–ø–æ—Ä—Ç? (y/n): ").lower()
    if response not in ['y', 'yes', '–¥–∞', '–¥']:
        print("‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        return

    success = asyncio.run(import_plans())

    if success:
        print("\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")


if __name__ == "__main__":
    main()
