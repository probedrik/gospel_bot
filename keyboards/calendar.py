"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
"""
from datetime import datetime, timedelta
from typing import List, Dict, Any
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config.settings import ADMIN_USER_ID


def create_calendar_keyboard(current_date: datetime = None,
                             scripture_references: List[Dict] = None,
                             show_settings: bool = True,
                             has_full_content: bool = False,
                             user_id: int = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è

    Args:
        current_date: –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        scripture_references: –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ï–≤–∞–Ω–≥–µ–ª—å—Å–∫–∏–µ —á—Ç–µ–Ω–∏—è
        show_settings: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    if current_date is None:
        current_date = datetime.now()

    buttons = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
    prev_date = current_date - timedelta(days=1)
    next_date = current_date + timedelta(days=1)

    nav_buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å)
    nav_buttons.append(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"calendar_date_{prev_date.strftime('%Y_%m_%d')}"
        )
    )

    # –ö–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è"
    if current_date.date() != datetime.now().date():
        nav_buttons.append(
            InlineKeyboardButton(
                text="üìÖ –°–µ–≥–æ–¥–Ω—è",
                callback_data="calendar_today"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)
    nav_buttons.append(
        InlineKeyboardButton(
            text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
            callback_data=f"calendar_date_{next_date.strftime('%Y_%m_%d')}"
        )
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ï–≤–∞–Ω–≥–µ–ª—å—Å–∫–∏—Ö —á—Ç–µ–Ω–∏–π
    if scripture_references:
        reading_buttons = []

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ full_text (–∏—Å—Ö–æ–¥–Ω–æ–º—É —á—Ç–µ–Ω–∏—é) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        grouped_refs = {}
        for ref in scripture_references:
            full_text = ref.get('full_text', ref['display_text'])
            if full_text not in grouped_refs:
                grouped_refs[full_text] = []
            grouped_refs[full_text].append(ref)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        for full_text, refs in grouped_refs.items():
            if len(refs) > 1:
                # –°–ª–æ–∂–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–∞—Å—Ç—è–º–∏
                # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É —Å callback –¥–ª—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
                ref_parts = []
                for ref in refs:
                    ref_parts.append(
                        f"{ref['book_id']}_{ref['chapter']}_{ref['verse_start']}_{ref['verse_end']}")

                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
                first_ref = refs[0]
                if len(refs) == 2 and refs[1]['chapter'] == first_ref['chapter'] + 1:
                    # –ú–µ–∂–≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ "–ö–Ω–∏–≥–∞ –≥–ª1:—Å—Ç–∏—Ö-–≥–ª2:—Å—Ç–∏—Ö"
                    second_ref = refs[1]
                    button_text = f"üìñ {first_ref['book_name']} {first_ref['chapter']}:{first_ref['verse_start']}-{second_ref['chapter']}:{second_ref['verse_end']}"
                else:
                    # –û–±—ã—á–Ω–æ–µ —Å–ª–æ–∂–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
                    button_text = f"üìñ {first_ref['display_text']}..."
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data –¥–æ 64 –±–∞–π—Ç, –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç Telegram
                raw_data = f"scripture_read_complex_{'|'.join(ref_parts)}"
                callback_data = raw_data[:64]

                reading_buttons.append(
                    InlineKeyboardButton(
                        text=button_text,
                        callback_data=callback_data
                    )
                )
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ —á—Ç–µ–Ω–∏–µ —Å –æ–¥–Ω–æ–π —á–∞—Å—Ç—å—é
                ref = refs[0]
                # –ü—Ä–æ—Å—Ç–æ–µ —á—Ç–µ–Ω–∏–µ: —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ —É–º–µ–Ω—å—à–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                raw_simple = f"scripture_read_{ref['book_id']}_{ref['chapter']}_{ref['verse_start']}_{ref['verse_end']}"
                simple_cb = raw_simple[:64]
                reading_buttons.append(
                    InlineKeyboardButton(
                        text=f"üìñ {ref['display_text']}",
                        callback_data=simple_cb
                    )
                )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, —Ä–∞–∑–¥–µ–ª—è—è –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 3
        if reading_buttons:
            if len(reading_buttons) <= 3:
                # –î–æ 3 –∫–Ω–æ–ø–æ–∫ - –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                buttons.append(reading_buttons)
            else:
                # –ë–æ–ª—å—à–µ 3 –∫–Ω–æ–ø–æ–∫ - —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3
                for i in range(0, len(reading_buttons), 3):
                    row = reading_buttons[i:i + 3]
                    buttons.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏–π
        buttons.append([
            InlineKeyboardButton(
                text="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                callback_data="separator"
            )
        ])

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º (—Ç–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏–π)
    buttons.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å–æ–∫—Ä–∞—â–µ–Ω–æ)
    if has_full_content:
        content_buttons = []
        content_buttons.append(
            InlineKeyboardButton(
                text="üëº –ñ–∏—Ç–∏—è —Å–≤—è—Ç—ã—Ö",
                callback_data=f"calendar_show_lives_{current_date.strftime('%Y_%m_%d')}"
            )
        )
        content_buttons.append(
            InlineKeyboardButton(
                text="üéµ –¢—Ä–æ–ø–∞—Ä–∏",
                callback_data=f"calendar_show_tropars_{current_date.strftime('%Y_%m_%d')}"
            )
        )
        buttons.append(content_buttons)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    if show_settings and user_id and user_id == ADMIN_USER_ID:
        buttons.append([
            InlineKeyboardButton(
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è",
                callback_data="calendar_settings"
            )
        ])

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    buttons.append([
        InlineKeyboardButton(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="back_to_main"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_calendar_settings_keyboard(current_settings: Dict[str, Any] = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è

    Args:
        current_settings: –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    """
    if current_settings is None:
        current_settings = {
            'header': True,
            'lives': 4,
            'tropars': 0,  # 0 = –æ—Ç–∫–ª—é—á–µ–Ω–æ
            'scripture': 1,  # 1 = —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            'date_format': True
        }

    buttons = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    buttons.append([
        InlineKeyboardButton(
            text="üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è",
            callback_data="noop"
        )
    ])

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (boolean)
    boolean_settings = [
        ('header', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è', '‚ú®'),
        ('date_format', '–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã', 'üìÜ')
    ]

    for setting_key, setting_name, icon in boolean_settings:
        is_enabled = current_settings.get(setting_key, True)
        status = "‚úÖ" if is_enabled else "‚ùå"

        buttons.append([
            InlineKeyboardButton(
                text=f"{icon} {setting_name}",
                callback_data="noop"
            ),
            InlineKeyboardButton(
                text=status,
                callback_data=f"calendar_setting_toggle_{setting_key}"
            )
        ])

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç—Ä–æ–ø–∞—Ä–µ–π (0, 1, 2)
    tropars_value = current_settings.get('tropars', 0)
    tropars_options = {
        0: "‚ùå –í—ã–∫–ª",
        1: "‚úÖ –° –∑–∞–≥–æ–ª–æ–≤–∫–æ–º",
        2: "üìù –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
    }

    buttons.append([
        InlineKeyboardButton(
            text="üéµ –¢—Ä–æ–ø–∞—Ä–∏",
            callback_data="noop"
        ),
        InlineKeyboardButton(
            text=tropars_options.get(tropars_value, f"‚ùì {tropars_value}"),
            callback_data=f"calendar_setting_tropars_next"
        )
    ])

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ï–≤–∞–Ω–≥–µ–ª—å—Å–∫–∏—Ö —á—Ç–µ–Ω–∏–π (0, 1, 2)
    scripture_value = current_settings.get('scripture', 1)
    scripture_options = {
        0: "‚ùå –í—ã–∫–ª",
        1: "‚úÖ –° –∑–∞–≥–æ–ª–æ–≤–∫–æ–º",
        2: "üìù –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
    }

    buttons.append([
        InlineKeyboardButton(
            text="üìñ –ï–≤–∞–Ω–≥–µ–ª—å—Å–∫–∏–µ —á—Ç–µ–Ω–∏—è",
            callback_data="noop"
        ),
        InlineKeyboardButton(
            text=scripture_options.get(
                scripture_value, f"‚ùì {scripture_value}"),
            callback_data=f"calendar_setting_scripture_next"
        )
    ])

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∂–∏—Ç–∏—è —Å–≤—è—Ç—ã—Ö (integer)
    lives_value = current_settings.get('lives', 4)
    lives_options = {
        0: "‚ùå –í—ã–∫–ª",
        1: "üìã –ö—Ä–∞—Ç–∫–∏–µ",
        2: "üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ",
        3: "üìö –ü–æ–ª–Ω—ã–µ",
        4: "‚≠ê –û—Å–Ω–æ–≤–Ω—ã–µ",
        5: "üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ",
        6: "üìñ –ú–∞–∫—Å–∏–º—É–º"
    }

    buttons.append([
        InlineKeyboardButton(
            text="üëº –ñ–∏—Ç–∏—è —Å–≤—è—Ç—ã—Ö",
            callback_data="noop"
        ),
        InlineKeyboardButton(
            text=lives_options.get(lives_value, f"‚ùì {lives_value}"),
            callback_data=f"calendar_setting_lives_next"
        )
    ])

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.append([
        InlineKeyboardButton(
            text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            callback_data="calendar_settings_reset"
        )
    ])

    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é",
            callback_data="calendar_back"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_scripture_reading_keyboard(book_id: int, chapter: int,
                                      verse_start: int, verse_end: int,
                                      has_ai_enabled: bool = True) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á—Ç–µ–Ω–∏—è –ï–≤–∞–Ω–≥–µ–ª–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è

    Args:
        book_id: ID –∫–Ω–∏–≥–∏
        chapter: –ù–æ–º–µ—Ä –≥–ª–∞–≤—ã
        verse_start: –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∏—Ö
        verse_end: –ö–æ–Ω–µ—á–Ω—ã–π —Å—Ç–∏—Ö
        has_ai_enabled: –í–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ò–ò
    """
    buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—É—é –≥–ª–∞–≤—É"
    from utils.bible_data import bible_data
    book_abbr = None
    for abbr, b_id in bible_data.book_abbr_dict.items():
        if b_id == book_id:
            book_abbr = abbr
            break

    if book_abbr:
        buttons.append([
            InlineKeyboardButton(
                text="üìñ –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—É—é –≥–ª–∞–≤—É",
                callback_data=f"open_chapter_{book_abbr}_{chapter}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏"
    buttons.append([
        InlineKeyboardButton(
            text="üîñ –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏",
            callback_data=f"add_bookmark_{book_id}_{chapter}_{verse_start}_{verse_end}"
        )
    ])

    # –ö–Ω–æ–ø–∫–∞ "–†–∞–∑–±–æ—Ä –æ—Ç –ò–ò" –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if has_ai_enabled:
        from utils.bible_data import get_english_book_abbreviation
        en_book = get_english_book_abbreviation(book_id)
        if en_book:
            buttons.append([
                InlineKeyboardButton(
                    text="ü§ñ –†–∞–∑–±–æ—Ä –æ—Ç –ò–ò",
                    callback_data=f"gpt_explain_{en_book}_{chapter}_{verse_start}"
                )
            ])

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é",
            callback_data="calendar_back"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)
