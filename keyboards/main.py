"""
–û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞.
"""
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
import logging

from utils.bible_data import bible_data
from config.settings import ENABLE_WORD_SEARCH


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞"""
    buttons = [
        [
            KeyboardButton(text="üìñ –í—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É"),
            KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å—Ç–∏—Ö"),
        ],
        [
            KeyboardButton(text="üìö –ü–ª–∞–Ω —á—Ç–µ–Ω–∏—è"),
            KeyboardButton(text="üìù –ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏"),
        ],
        [
            KeyboardButton(text="üéØ –¢–µ–º—ã"),
            KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"),
        ]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ–≤—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
    if ENABLE_WORD_SEARCH:
        buttons.append([
            KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É"),
        ])

    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )


def create_book_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–∏–≥–∞–º–∏ –ë–∏–±–ª–∏–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    Args:
        page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
    """
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç—Ä–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤)
    books_per_page = 15  # 5 —Ä—è–¥–æ–≤ –ø–æ 3 –∫–Ω–∏–≥–∏

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    book_ids = bible_data.book_values
    book_names = bible_data.book_names

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã (id, name) –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    total_books = len(book_ids)
    start_idx = page * books_per_page
    end_idx = min(start_idx + books_per_page, total_books)

    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–Ω–∏–≥ –ø–æ 3 –≤ —Ä—è–¥
    row = []
    for i in range(start_idx, end_idx):
        book_id = book_ids[i]
        book_name = book_names[i]
        row.append(
            InlineKeyboardButton(
                text=book_name,
                callback_data=f"select_book_{book_id}"
            )
        )

        # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
        if len(row) == 3:
            buttons.append(row)
            row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if row:
        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"nav_page_{page-1}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if end_idx < total_books:
        nav_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"nav_page_{page+1}"
            )
        )

    if nav_buttons:
        buttons.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_navigation_keyboard(has_previous: bool = False, has_next: bool = True, is_bookmarked: bool = False, extra_buttons: list = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–ª–∞–≤–∞–º.

    Args:
        has_previous: –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≥–ª–∞–≤–∞
        has_next: –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞
        is_bookmarked: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ –≥–ª–∞–≤–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∏
        extra_buttons: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    logger = logging.getLogger(__name__)
    logger.info(
        f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: has_previous={has_previous}, has_next={has_next}, is_bookmarked={is_bookmarked}")

    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ, –ò–ò) –≤ –Ω–∞—á–∞–ª–µ
    if extra_buttons:
        buttons.extend(extra_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_buttons = []

    if has_previous:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≥–ª–∞–≤–∞",
                                 callback_data="prev_chapter")
        )

    if has_next:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞",
                                 callback_data="next_chapter")
        )

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    if navigation_buttons:
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ - –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É
        # –ï—Å–ª–∏ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ - –æ–Ω–∏ –¥–µ–ª—è—Ç —à–∏—Ä–∏–Ω—É –ø–æ–ø–æ–ª–∞–º
        if len(navigation_buttons) == 1:
            buttons.append([navigation_buttons[0]])
        else:
            buttons.append(navigation_buttons)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–æ–∫
    bookmark_data = "bookmark_info" if is_bookmarked else "add_bookmark"
    bookmark_text = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É" if is_bookmarked else "üìå –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É"

    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '{bookmark_text}' –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

    buttons.append([
        InlineKeyboardButton(text=bookmark_text, callback_data=bookmark_data)
    ])

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    buttons.append([
        InlineKeyboardButton(
            text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_translations_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ë–∏–±–ª–∏–∏"""
    buttons = [
        [
            InlineKeyboardButton(
                text="–°–∏–Ω–æ–¥–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥",
                callback_data="translation_rst"
            )
        ],
        [
            InlineKeyboardButton(
                text="–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –†–ë–û",
                callback_data="translation_rbo"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_bookmarks_keyboard(bookmarks) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–∫–ª–∞–¥–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        bookmarks: —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [(book_id, chapter, display_text), ...] 
                   –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è –µ—Å–ª–∏ –∏–∑ FSM
    """
    logger = logging.getLogger(__name__)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–∫–ª–∞–¥–æ–∫, –ø–æ–ª—É—á–µ–Ω–æ: {bookmarks}")

    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–ª–∞–¥–æ–∫
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –∏–∑ –ë–î (SQLite)
        if bookmarks and isinstance(bookmarks, list) and len(bookmarks) > 0 and isinstance(bookmarks[0], tuple):
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ –ë–î (SQLite - –∫–æ—Ä—Ç–µ–∂–∏)")
            for bookmark in bookmarks:
                if len(bookmark) >= 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ—Ä—Ç–µ–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    book_id, chapter, display_text = bookmark[0], bookmark[1], bookmark[2]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
                    if not isinstance(display_text, str):
                        from utils.bible_data import bible_data
                        book_name = bible_data.get_book_name(book_id)
                        display_text = f"{book_name} {chapter}"
                        logger.warning(
                            f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç display_text: {bookmark[2]} -> {display_text}")

                    buttons.append([
                        InlineKeyboardButton(
                            text=display_text,
                            callback_data=f"bookmark_{book_id}_{chapter}"
                        )
                    ])
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –∏–∑ –ë–î (Supabase/PostgreSQL)
        elif bookmarks and isinstance(bookmarks, list) and len(bookmarks) > 0 and isinstance(bookmarks[0], dict):
            logger.info(
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ –ë–î (Supabase/PostgreSQL - —Å–ª–æ–≤–∞—Ä–∏)")
            for bookmark in bookmarks:
                book_id = bookmark.get('book_id')
                chapter = bookmark.get('chapter')
                display_text = bookmark.get('display_text')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
                if book_id is not None and chapter is not None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
                    if not isinstance(display_text, str) or not display_text:
                        from utils.bible_data import bible_data
                        book_name = bible_data.get_book_name(book_id)
                        display_text = f"{book_name} {chapter}"
                        logger.warning(
                            f"–°–æ–∑–¥–∞–Ω display_text –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏: {display_text}")

                    buttons.append([
                        InlineKeyboardButton(
                            text=display_text,
                            callback_data=f"bookmark_{book_id}_{chapter}"
                        )
                    ])
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏–∑ FSM
        elif bookmarks and isinstance(bookmarks, dict):
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ State (—Å–ª–æ–≤–∞—Ä—å)")
            for key, data in bookmarks.items():
                if isinstance(data, dict) and 'book_id' in data and 'chapter' in data:
                    book_id = data['book_id']
                    chapter = data['chapter']

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ display_text, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
                    if 'display_text' in data and isinstance(data['display_text'], str):
                        display_text = data['display_text']
                    else:
                        # –ï—Å–ª–∏ display_text –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
                        from utils.bible_data import bible_data
                        book_name = bible_data.get_book_name(book_id)
                        display_text = f"{book_name} {chapter}"
                        logger.warning(
                            f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω display_text –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏: {display_text}")

                    buttons.append([
                        InlineKeyboardButton(
                            text=display_text,
                            callback_data=f"bookmark_{book_id}_{chapter}"
                        )
                    ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–ª–∞–¥–æ–∫: {e}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        buttons.append([
            InlineKeyboardButton(
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫",
                callback_data="back_to_menu"
            )
        ])

    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫ –ø—É—Å—Ç, –¥–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not buttons:
        buttons.append([
            InlineKeyboardButton(
                text="–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–æ–∫",
                callback_data="back_to_menu"
            )
        ])
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–ª–∞–¥–æ–∫
        buttons.append([
            InlineKeyboardButton(
                text="üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏",
                callback_data="clear_bookmarks"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    buttons.append([
        InlineKeyboardButton(
            text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_reading_plans_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞–Ω–∞–º–∏ —á—Ç–µ–Ω–∏—è"""
    buttons = [
        [
            InlineKeyboardButton(
                text="üìñ –ï–≤–∞–Ω–≥–µ–ª–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
                callback_data="select_plan_gospel_daily"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìö –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω –∑–∞ 1 –≥–æ–¥",
                callback_data="select_plan_classic_year"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìú –ü–ª–∞–Ω –í–ó –∏ –ù–ó",
                callback_data="select_plan_ot_nt_plan"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìã –ú–æ–∏ –ø–ª–∞–Ω—ã",
                callback_data="my_reading_plans"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_plan_overview_keyboard(plan_id: str, current_day: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    buttons = [
        [
            InlineKeyboardButton(
                text=f"üìñ –ß–∏—Ç–∞—Ç—å –¥–µ–Ω—å {current_day}",
                callback_data=f"plan_day_{plan_id}_{current_day}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
                callback_data=f"plan_progress_{plan_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å",
                callback_data=f"plan_select_day_{plan_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
                callback_data=f"clear_progress_{plan_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º",
                callback_data="reading_plans"
            )
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_plan_day_keyboard(plan_id: str, day: int, has_previous: bool = False, has_next: bool = False, is_completed: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –ø–ª–∞–Ω–∞"""
    buttons = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
    nav_buttons = []
    if has_previous:
        prev_day = day - 1
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å",
                callback_data=f"plan_day_{plan_id}_{prev_day}"
            )
        )

    if has_next:
        next_day = day + 1
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å",
                callback_data=f"plan_day_{plan_id}_{next_day}"
            )
        )

    if nav_buttons:
        buttons.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏
    if is_completed:
        buttons.append([
            InlineKeyboardButton(
                text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ",
                callback_data=f"unmark_day_{plan_id}_{day}"
            )
        ])
    else:
        buttons.append([
            InlineKeyboardButton(
                text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ",
                callback_data=f"mark_day_{plan_id}_{day}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–ª–∞–Ω—É
    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–ª–∞–Ω—É",
            callback_data=f"view_plan_{plan_id}"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_user_plans_keyboard(user_plans) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–ª–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_plans:
        for plan in user_plans:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ plan —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å plan_id –∏ –¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            plan_id = plan.get('plan_id') if isinstance(
                plan, dict) else plan[0]

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
            plan_name = "–ü–ª–∞–Ω —á—Ç–µ–Ω–∏—è"
            if plan_id == "gospel_daily":
                plan_name = "üìñ –ï–≤–∞–Ω–≥–µ–ª–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
            elif plan_id == "classic_year":
                plan_name = "üìö –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω –∑–∞ 1 –≥–æ–¥"
            elif plan_id == "ot_nt_plan":
                plan_name = "üìú –ü–ª–∞–Ω –í–ó –∏ –ù–ó"

            buttons.append([
                InlineKeyboardButton(
                    text=plan_name,
                    callback_data=f"view_plan_{plan_id}"
                )
            ])

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º",
            callback_data="reading_plans"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_reading_navigation_keyboard(plan_id: str, day: int, has_previous: bool = False, has_next: bool = False, is_bookmarked: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —á—Ç–µ–Ω–∏—é"""
    buttons = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
    nav_buttons = []
    if has_previous:
        prev_day = day - 1
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
                callback_data=f"plan_day_{plan_id}_{prev_day}"
            )
        )

    if has_next:
        next_day = day + 1
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π",
                callback_data=f"plan_day_{plan_id}_{next_day}"
            )
        )

    if nav_buttons:
        buttons.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫–ª–∞–¥–∫–∏
    if is_bookmarked:
        buttons.append([
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É",
                callback_data=f"remove_bookmark_reading_{plan_id}_{day}"
            )
        ])
    else:
        buttons.append([
            InlineKeyboardButton(
                text="üìå –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É",
                callback_data=f"add_bookmark_reading_{plan_id}_{day}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–Ω—é",
            callback_data=f"plan_day_{plan_id}_{day}"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)
