"""
–û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞.
"""
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
import logging

from utils.bible_data import bible_data
from config.settings import ENABLE_WORD_SEARCH


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞"""
    buttons = [
        [
            KeyboardButton(text="üìñ –í—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É"),
            KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å—Ç–∏—Ö"),
        ],
        [
            KeyboardButton(text="üìù –ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏"),
            KeyboardButton(text="üìö –¢–µ–º—ã"),
        ],
        [
            KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"),
            KeyboardButton(text="üìä –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö"),
        ]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ–≤—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
    if ENABLE_WORD_SEARCH:
        buttons.append([
            KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É"),
        ])

    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )


def create_book_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–∏–≥–∞–º–∏ –ë–∏–±–ª–∏–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    Args:
        page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
    """
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    books_per_page = 10

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    book_ids = bible_data.book_values
    book_names = bible_data.book_names

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã (id, name) –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    total_books = len(book_ids)
    start_idx = page * books_per_page
    end_idx = min(start_idx + books_per_page, total_books)

    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–Ω–∏–≥
    for i in range(start_idx, end_idx):
        book_id = book_ids[i]
        book_name = book_names[i]
        buttons.append([
            InlineKeyboardButton(
                text=book_name,
                callback_data=f"select_book_{book_id}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"nav_page_{page-1}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if end_idx < total_books:
        nav_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"nav_page_{page+1}"
            )
        )

    if nav_buttons:
        buttons.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_navigation_keyboard(has_previous: bool = False, has_next: bool = True, is_bookmarked: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–ª–∞–≤–∞–º.

    Args:
        has_previous: –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≥–ª–∞–≤–∞
        has_next: –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞
        is_bookmarked: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ –≥–ª–∞–≤–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–∏

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    logger = logging.getLogger(__name__)
    logger.info(
        f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: has_previous={has_previous}, has_next={has_next}, is_bookmarked={is_bookmarked}")

    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_buttons = []

    if has_previous:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≥–ª–∞–≤–∞",
                                 callback_data="prev_chapter")
        )

    if has_next:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞",
                                 callback_data="next_chapter")
        )

    if navigation_buttons:
        buttons.append(navigation_buttons)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–æ–∫
    bookmark_data = "bookmark_info" if is_bookmarked else "add_bookmark"
    bookmark_text = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É" if is_bookmarked else "üìå –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É"

    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '{bookmark_text}' –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

    buttons.append([
        InlineKeyboardButton(text=bookmark_text, callback_data=bookmark_data)
    ])

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    buttons.append([
        InlineKeyboardButton(
            text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_translations_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ë–∏–±–ª–∏–∏"""
    buttons = [
        [
            InlineKeyboardButton(
                text="–°–∏–Ω–æ–¥–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥",
                callback_data="translation_rst"
            )
        ],
        [
            InlineKeyboardButton(
                text="–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –†–ë–û",
                callback_data="translation_rbo"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_bookmarks_keyboard(bookmarks) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–∫–ª–∞–¥–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        bookmarks: —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [(book_id, chapter, display_text), ...] 
                   –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è –µ—Å–ª–∏ –∏–∑ FSM
    """
    logger = logging.getLogger(__name__)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–∫–ª–∞–¥–æ–∫, –ø–æ–ª—É—á–µ–Ω–æ: {bookmarks}")

    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–ª–∞–¥–æ–∫
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –∏–∑ –ë–î
        if bookmarks and isinstance(bookmarks, list) and isinstance(bookmarks[0], tuple):
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ –ë–î")
            for bookmark in bookmarks:
                if len(bookmark) >= 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ—Ä—Ç–µ–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    book_id, chapter, display_text = bookmark[0], bookmark[1], bookmark[2]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
                    if not isinstance(display_text, str):
                        from utils.bible_data import bible_data
                        book_name = bible_data.get_book_name(book_id)
                        display_text = f"{book_name} {chapter}"
                        logger.warning(
                            f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç display_text: {bookmark[2]} -> {display_text}")

                    buttons.append([
                        InlineKeyboardButton(
                            text=display_text,
                            callback_data=f"bookmark_{book_id}_{chapter}"
                        )
                    ])
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏–∑ FSM
        elif bookmarks and isinstance(bookmarks, dict):
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–ª–∞–¥–æ–∫ –∏–∑ State (—Å–ª–æ–≤–∞—Ä—å)")
            for key, data in bookmarks.items():
                if isinstance(data, dict) and 'book_id' in data and 'chapter' in data:
                    book_id = data['book_id']
                    chapter = data['chapter']

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ display_text, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
                    if 'display_text' in data and isinstance(data['display_text'], str):
                        display_text = data['display_text']
                    else:
                        # –ï—Å–ª–∏ display_text –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
                        from utils.bible_data import bible_data
                        book_name = bible_data.get_book_name(book_id)
                        display_text = f"{book_name} {chapter}"
                        logger.warning(
                            f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω display_text –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏: {display_text}")

                    buttons.append([
                        InlineKeyboardButton(
                            text=display_text,
                            callback_data=f"bookmark_{book_id}_{chapter}"
                        )
                    ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–ª–∞–¥–æ–∫: {e}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        buttons.append([
            InlineKeyboardButton(
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫",
                callback_data="back_to_menu"
            )
        ])

    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫ –ø—É—Å—Ç, –¥–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not buttons:
        buttons.append([
            InlineKeyboardButton(
                text="–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–æ–∫",
                callback_data="back_to_menu"
            )
        ])
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–∫–ª–∞–¥–æ–∫
        buttons.append([
            InlineKeyboardButton(
                text="üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏",
                callback_data="clear_bookmarks"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    buttons.append([
        InlineKeyboardButton(
            text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)
